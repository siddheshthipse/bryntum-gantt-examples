/*!
 *
 * Bryntum Gantt 5.6.11 (TRIAL VERSION)
 *
 * Copyright(c) 2024 Bryntum AB
 * https://bryntum.com/contact
 * https://bryntum.com/license
 *
 */
import { ChangeLogTransactionModel, CycleResolutionPopup, DependencyEdit, DependencyEditConfig, EventModel, EventResize, EventSegmentModel, EventSegmentResize, EventSegments, EventSegmentsConfig, EventStore, EventStoreConfig, GanttTaskEditor, HighlightTimeSpan, PercentBar, PercentBarConfig, SchedulerPro, AssignmentModel as SchedulerProAssignmentModel, AssignmentStore as SchedulerProAssignmentStore, CalendarIntervalModel as SchedulerProCalendarIntervalModel, CalendarManagerStore as SchedulerProCalendarManagerStore, CalendarModel as SchedulerProCalendarModel, CellEdit as SchedulerProCellEdit, Dependencies as SchedulerProDependencies, DependencyModel as SchedulerProDependencyModel, DependencyStore as SchedulerProDependencyStore, ProjectModel as SchedulerProProjectModel, ResourceModel as SchedulerProResourceModel, ResourceStore as SchedulerProResourceStore, TaskEdit as SchedulerProTaskEdit, Versions as SchedulerProVersions, SchedulingIssueResolutionPopup, StateTrackingManager, StateTrackingManagerConfig, TaskEditorBase, TaskEditorBaseConfig, TimeSpanHighlight, TimeSpanHighlightConfig, VersionModel } from '../../SchedulerPro/build/schedulerpro.thin'
import { CellCopyPaste, CellCopyPasteConfig, CellMenu, CellMenuConfig, CellTooltip, CellTooltipConfig, CheckColumn, Column, ColumnAutoWidth, ColumnAutoWidthConfig, ColumnDragToolbar, ColumnDragToolbarConfig, ColumnPicker, ColumnPickerConfig, ColumnRename, ColumnRenameConfig, ColumnReorder, ColumnReorderConfig, ColumnResize, ColumnResizeConfig, ColumnStore, ColumnStoreConfig, ColumnSummaryConfig, DateColumn, Exporter, FileDrop, FileDropConfig, FillHandle, FillHandleConfig, Filter, FilterBar, FilterBarConfig, FilterConfig, Grid, GridBase, CellEdit as GridCellEdit, CellEditConfig as GridCellEditConfig, ExcelExporter as GridExcelExporter, ExcelExporterConfig as GridExcelExporterConfig, GroupSummary as GridGroupSummary, GroupSummaryConfig as GridGroupSummaryConfig, PdfExport as GridPdfExport, PdfExportConfig as GridPdfExportConfig, Print as GridPrint, PrintConfig as GridPrintConfig, RowReorder as GridRowReorder, RowReorderConfig as GridRowReorderConfig, RowResize as GridRowResize, RowResizeConfig as GridRowResizeConfig, GridSelectionMode, Split as GridSplit, SplitConfig as GridSplitConfig, Summary as GridSummary, SummaryConfig as GridSummaryConfig, TreeGroup as GridTreeGroup, TreeGroupConfig as GridTreeGroupConfig, Group, GroupConfig, HeaderMenu, HeaderMenuConfig, Location, LocationConfig, MergeCells, MergeCellsConfig, NumberColumn, NumberColumnConfig, PreserveScrollOptions, QuickFind, QuickFindConfig, RecordPositionContext, RegionResize, RegionResizeConfig, Row, RowCopyPaste, RowCopyPasteConfig, RowExpander, RowExpanderConfig, Search, SearchConfig, Sort, SortConfig, StickyCells, StickyCellsConfig, Stripe, StripeConfig, SubGrid, SubGridConfig, Tree, TreeColumn, TreeConfig } from '../../Grid/build/grid.thin'
import { AbstractCrudManager, ColumnLines, ColumnLinesConfig, CrudManagerStoreDescriptor, DateConstraint, DependencyBaseModel, DragBase, DragCreateBase, DurationColumn, EventColor, EventFilter, EventFilterConfig, EventMenu, HeaderZoom, HeaderZoomConfig, NonWorkingTime, NonWorkingTimeConfig, Pan, PanConfig, ResourceMarginConfig, RowReorder, RowReorderConfig, ScheduleMenu, ScheduleMenuConfig, ScheduleTooltip, ScheduleTooltipConfig, Scheduler, AssignmentModel as SchedulerAssignmentModel, DependencyEdit as SchedulerDependencyEdit, DependencyModel as SchedulerDependencyModel, EventModel as SchedulerEventModel, EventStore as SchedulerEventStore, SchedulerExportDialog, SchedulerExportDialogConfig, SchedulerLabelConfig, Labels as SchedulerLabels, MultiPageExporter as SchedulerMultiPageExporter, MultiPageVerticalExporter as SchedulerMultiPageVerticalExporter, PdfExport as SchedulerPdfExport, ResourceModel as SchedulerResourceModel, SinglePageExporter as SchedulerSinglePageExporter, TimeAxisColumn as SchedulerTimeAxisColumn, TimeAxis, TimeAxisConfig, TimeAxisHeaderMenu, TimeAxisHeaderMenuConfig, TimeRangeModel, TimeRangeModelConfig, TimeRangeStore, TimeRangeStoreConfig, TimeRanges, TimeRangesConfig, TimeSpan, TimeSpanConfig, TimelineBase, TimelineContext, TimelineSummary, TooltipBase, VerticalTimeAxisColumn, ViewPreset, ViewPresetConfig, VisibleDate } from '../../Scheduler/build/scheduler.thin'
import { AjaxStore, AjaxStoreConfig, AlignSpec, Base, BryntumListenerConfig, BryntumScrollOptions, CellWidgetContext, ChipView, ChipViewConfig, Collection, CollectionCompareOperator, CollectionConfig, CollectionFilter, CollectionFilterConfig, CollectionSorter, CollectionSorterConfig, Combo, ComboConfig, Container, ContainerItem, ContainerItemConfig, ContainerLayoutConfig, ContextMenuBase, StateTrackingManager as CoreStateTrackingManager, DataField, DomClassList, DomConfig, DragHelper, DragHelperConfig, Duration, DurationConfig, DurationUnit, DurationUnitShort, Editor, EditorConfig, EventsClass, FetchOptions, Field, FieldContainer, FieldContainerConfig, FieldTriggerConfig, GridColumn, GridColumnConfig, Grouper, HttpMethods, InputFieldConfig, InstancePlugin, List, ListConfig, LocaleHelper, LocaleManager, Mask, MaskConfig, Menu, MenuConfig, MenuItem, MenuItemConfig, Model, ModelFieldConfig, NumberFormat, NumberFormatConfig, PagingToolbar, PagingToolbarConfig, Panel, PanelCollapser, PanelCollapserConfig, PanelCollapserOverlay, PanelCollapserOverlayConfig, PanelHeader, Popup, Rectangle, ScrollManager, ScrollManagerConfig, Scroller, ScrollerConfig, Sorter, StateProvider, Store, StoreConfig, SyncDataOnLoadOptions, Tab, TabConfig, Tool, ToolConfig, Toolbar, ToolbarConfig, Tooltip, TooltipConfig, Wbs, Widget } from '../../Core/build/core.thin'

type AnyConstructor<A = any> = new (...input: any[]) => A

/**
 * ["Add New.." column](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn) combobox item data.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#typedef-AddNewColumnComboModelConfig)
 */
type AddNewColumnComboModelConfig = any & {
    /**
     * Column entry text in the combobox
     */
    text: string
    /**
     * Column configuration
     */
    value: Partial<GridColumnConfig>
}

/**
 * An object that describes the actions that should trigger a [refreshWbs](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-refreshWbs) to
 * update WBS values. Objects of this type are passed to [wbsMode](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-wbsMode) when the simpler
 * values of `'auto'` or (the default) `'manual'` are not desired.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#typedef-WbsMode)
 */
type WbsMode = any & {
    /**
     * Set this property to `true` to refresh WBS values when nodes are added.
     */
    add?: boolean
    /**
     * Set this property to `true` to refresh WBS values when nodes are removed.
     */
    remove?: boolean
    /**
     * Set this property to `true` to refresh WBS values when nodes are sorted.
     */
    sort?: boolean
}

/**
 * Describes a summary level for the time axis in Gantt
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#typedef-GanttSummaryOptions)
 */
type GanttSummaryOptions = any & {
    /**
     * Label for the summary
     */
    label: string
    /**
     * Function to calculate the and render the summary value
     */
    renderer: Function
    /**
     * Tick start date
     */
    startDate: Date
    /**
     * Tick end date
     */
    endDate: Date
    /**
     * Task store
     */
    taskStore: TaskStore
    /**
     * Display store, for when Gantt is configured to display tasks from another
     * store than its task store (for example when using the TreeGroup feature)
     */
    store: TaskStore
}

type ValidationMessage = any & {
    /**
     * `true` for valid, `false` for invalid
     */
    valid: boolean
    /**
     * Validation message
     */
    message: string
}

/**
 * Options for the `convertEmptyParentToLeaf` static property.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#typedef-ConvertEmptyParentToLeafOptions)
 */
type ConvertEmptyParentToLeafOptions = any & {
    /**
     * `true` to convert empty parent tasks to leaf tasks on load
     */
    onLoad: boolean
    /**
     * `true` to convert parent tasks that become empty after removing a child to leaf tasks
     */
    onRemove: boolean
}

type EffectiveDirection = any & {
    /**
     * The type of the direction value.
     */
    kind: 'own'|'enforced'|'inherited'
    /**
     * The actual direction. Depending on the `kind` value, it might be
     * a user-provided value (`own`), or value, enforced by the predecessor/successor (`enforced`), or value inherited
     * from the parent task (or project).
     */
    direction: 'Forward'|'Backward'
    /**
     * The task which forces the current direction
     */
    enforcedBy: TaskModel
    /**
     * The task from which the current direction is inherited
     */
    inheritedFrom: TaskModel
}

/**
 * An object which encapsulates a Gantt timeline tick context based on a DOM event. This will include
 * the row (task) information and the tick and time information for a DOM pointer event detected
 * in the timeline.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/mixin/GanttDom#typedef-GanttTimelineContext)
 */
type GanttTimelineContext = any & {
    /**
     * The DOM event which triggered the context change.
     */
    domEvent: Event
    /**
     * If the `domEvent` was on an event bar, this will be the event bar element.
     */
    eventElement: HTMLElement
    /**
     * The cell element under the `domEvent`
     */
    cellElement: HTMLElement
    /**
     * The date corresponding to the `domEvent` position in the timeline
     */
    date: Date
    /**
     * A [TimeSpan](https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan) record which encapsulates the contextual tick
     */
    tick: TimeSpan
    /**
     * The contextual tick index. This may be fractional.
     */
    tickIndex: number
    /**
     * The integer contextual tick index.
     */
    tickParentIndex: number
    /**
     * The start date of the contextual tick.
     */
    tickStartDate: Date
    /**
     * The end date of the contextual tick.
     */
    tickEndDate: Date
    /**
     * The contextual [Row](https://bryntum.com/products/gantt/docs/api/Grid/row/Row)
     */
    row: Row
    /**
     * The contextual row index
     */
    index: number
    /**
     * The contextual task record (if any) if the event source is a `Gantt`
     */
    taskRecord?: TaskModel
}

/**
 * Type with configuration options for [AddNewColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/AddNewColumn) class.
 */
type AddNewColumnConfig = GridColumnConfig & {
    type: 'addnew'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` to allow adding more than one column of the same type to the Gantt.
     */
    allowMultipleColumnInstances: boolean
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * A configuration object to apply to the {Core.widget.Combo} rendered into the column header.
     */
    combo: Partial<ComboConfig>
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * A function to be called for processing the column combo store configuration object.
     * Can be specified as a function, or name of a function in the ownership.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-processComboStoreConfig)
     * @param {object} data Wrapping object
     * @param {StoreConfig} data.config The combo store configuration.
     * @param {AddNewColumnComboModelConfig>} data.config.data The store data.
     * @param {AddNewColumn} data.column The column.
     * @returns {void}
     */
    processComboStoreConfig: ((data: { config: { data: AddNewColumnComboModelConfig[] }, column: AddNewColumn }) => void)|string
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * This column allows user to dynamically add columns to the Gantt chart by clicking the column header
 * and picking columns from a combobox.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn)
 */
export class AddNewColumn extends Column {
    /**
     * Returns the combo box field rendered into the header of this column
     */
    readonly combo: Combo
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/AddNewColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<AddNewColumnConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<AddNewColumnConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [BaselineDurationColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/BaselineDurationColumn) class.
 */
type BaselineDurationColumnConfig = GridColumnConfig & {
    type: 'baselineduration'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Precision of displayed duration, defaults to use [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-durationDisplayPrecision).
     * Specify an integer value to override that setting, or `false` to use raw value
     */
    decimalPrecision: number|boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The format to use for rendering numbers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-format)
     */
    format: string|Partial<NumberFormatConfig>
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or
     * using keyboard.
     */
    largeStep: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value
     */
    max: number
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value
     */
    min: number
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Step size for spin button clicks. Also used when pressing up/down keys in the field.
     */
    step: number
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Unit to append to displayed value.
     */
    unit: string
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task baseline duration.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn)
 */
export class BaselineDurationColumn extends DurationColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [BaselineDurationVarianceColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/BaselineDurationVarianceColumn) class.
 */
type BaselineDurationVarianceColumnConfig = GridColumnConfig & {
    type: 'baselinedurationvariance'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Precision of displayed duration, defaults to use [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-durationDisplayPrecision).
     * Specify an integer value to override that setting, or `false` to use raw value
     */
    decimalPrecision: number|boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The format to use for rendering numbers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-format)
     */
    format: string|Partial<NumberFormatConfig>
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or
     * using keyboard.
     */
    largeStep: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value
     */
    max: number
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value
     */
    min: number
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Step size for spin button clicks. Also used when pressing up/down keys in the field.
     */
    step: number
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Unit to append to displayed value.
     */
    unit: string
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task Duration Variance. The duration variance field is "0 days" until the
 * task duration varies from the baseline duration. This field is calculated as:
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn)
 */
export class BaselineDurationVarianceColumn extends DurationColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineDurationVarianceColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [BaselineEndDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/BaselineEndDateColumn) class.
 */
type BaselineEndDateColumnConfig = GridColumnConfig & {
    type: 'baselineenddate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task baseline finish date.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn)
 */
export class BaselineEndDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [BaselineEndVarianceColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/BaselineEndVarianceColumn) class.
 */
type BaselineEndVarianceColumnConfig = GridColumnConfig & {
    type: 'baselineendvariance'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Precision of displayed duration, defaults to use [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-durationDisplayPrecision).
     * Specify an integer value to override that setting, or `false` to use raw value
     */
    decimalPrecision: number|boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The format to use for rendering numbers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-format)
     */
    format: string|Partial<NumberFormatConfig>
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or
     * using keyboard.
     */
    largeStep: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value
     */
    max: number
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value
     */
    min: number
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Step size for spin button clicks. Also used when pressing up/down keys in the field.
     */
    step: number
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Unit to append to displayed value.
     */
    unit: string
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task End Variance. The end variance field is "0 days" until the
 * task start date varies from the baseline end date. This field is calculated as:
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn)
 */
export class BaselineEndVarianceColumn extends DurationColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineEndVarianceColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [BaselineStartDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/BaselineStartDateColumn) class.
 */
type BaselineStartDateColumnConfig = GridColumnConfig & {
    type: 'baselinestartdate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task baseline start date.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn)
 */
export class BaselineStartDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [BaselineStartVarianceColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/BaselineStartVarianceColumn) class.
 */
type BaselineStartVarianceColumnConfig = GridColumnConfig & {
    type: 'baselinestartvariance'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Precision of displayed duration, defaults to use [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-durationDisplayPrecision).
     * Specify an integer value to override that setting, or `false` to use raw value
     */
    decimalPrecision: number|boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The format to use for rendering numbers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-format)
     */
    format: string|Partial<NumberFormatConfig>
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or
     * using keyboard.
     */
    largeStep: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value
     */
    max: number
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value
     */
    min: number
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Step size for spin button clicks. Also used when pressing up/down keys in the field.
     */
    step: number
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Unit to append to displayed value.
     */
    unit: string
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task Start Variance. The start variance field is "0 days" until the
 * task start date varies from the baseline start date. This field is calculated as:
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn)
 */
export class BaselineStartVarianceColumn extends DurationColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/BaselineStartVarianceColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [CalendarColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/CalendarColumn) class.
 */
type CalendarColumnConfig = GridColumnConfig & {
    type: 'calendar'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays (and allows user to update) the current [calendar](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel) of the task.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn)
 */
export class CalendarColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/CalendarColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [ConstraintDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/ConstraintDateColumn) class.
 */
type ConstraintDateColumnConfig = GridColumnConfig & {
    type: 'constraintdate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column showing the [date](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-constraintDate) of the constraint, applied to the task.
 * The type of the constraint can be displayed with the [ConstraintTypeColumn](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn)
 */
export class ConstraintDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [ConstraintTypeColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/ConstraintTypeColumn) class.
 */
type ConstraintTypeColumnConfig = GridColumnConfig & {
    type: 'constrainttype'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * [Constraint type](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-constraintType) column.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn)
 */
export class ConstraintTypeColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ConstraintTypeColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [DeadlineDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/DeadlineDateColumn) class.
 */
type DeadlineDateColumnConfig = GridColumnConfig & {
    type: 'deadlinedate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column showing the [deadlineDate](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-deadlineDate) field.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn)
 */
export class DeadlineDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DeadlineDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [DependencyColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/DependencyColumn) class.
 */
type DependencyColumnConfig = GridColumnConfig & {
    type: 'dependency'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Delimiter used for displayed value and editor
     */
    delimiter: string
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to [dependencyIdField](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-dependencyIdField)
     */
    dependencyIdField: string
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column which displays, in textual form, the dependencies which either link to the
 * contextual task from other, preceding tasks, or dependencies which link the
 * contextual task to successor tasks.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn)
 */
export class DependencyColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/DependencyColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<DependencyColumnConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<DependencyColumnConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [EarlyEndDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/EarlyEndDateColumn) class.
 */
type EarlyEndDateColumnConfig = GridColumnConfig & {
    type: 'earlyenddate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task's [early end date](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-earlyEndDate).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn)
 */
export class EarlyEndDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyEndDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [EarlyStartDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/EarlyStartDateColumn) class.
 */
type EarlyStartDateColumnConfig = GridColumnConfig & {
    type: 'earlystartdate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task's [early start date](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-earlyStartDate).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn)
 */
export class EarlyStartDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EarlyStartDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [EffortColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/EffortColumn) class.
 */
type EffortColumnConfig = GridColumnConfig & {
    type: 'effort'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Precision of displayed duration, defaults to use [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-durationDisplayPrecision).
     * Specify an integer value to override that setting, or `false` to use raw value
     */
    decimalPrecision: number|boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The format to use for rendering numbers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-format)
     */
    format: string|Partial<NumberFormatConfig>
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or
     * using keyboard.
     */
    largeStep: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value
     */
    max: number
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value
     */
    min: number
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Step size for spin button clicks. Also used when pressing up/down keys in the field.
     */
    step: number
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Unit to append to displayed value.
     */
    unit: string
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column showing the task [effort](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort) and [units](#Gantt/model/TaskModel#field-effortUnit).
 * The editor of this column understands the time units, so user can enter "4d" indicating 4 days effort, or "4h" indicating 4 hours, etc.
 * The numeric magnitude can be either an integer or a float value. Both "," and "." are valid decimal separators.
 * For example, you can enter "4.5d" indicating 4.5 days duration, or "4,5h" indicating 4.5 hours.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn)
 */
export class EffortColumn extends DurationColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EffortColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [EndDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/EndDateColumn) class.
 */
type EndDateColumnConfig = GridColumnConfig & {
    type: 'enddate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays (and allows user to update) the task's [end date](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-endDate).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn)
 */
export class EndDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/EndDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [GanttDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/GanttDateColumn) class.
 */
type GanttDateColumnConfig = {
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Base column class that displays dates, in the `ll` format by default. If set to `null` uses Gantt's [date format](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) as a default.
 * The format will be dynamically updated while zooming according to the [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/ViewPreset#field-displayDateFormat) value specified for the ViewPreset being selected.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn)
 */
export abstract class GanttDateColumn extends DateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/GanttDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<GanttDateColumnConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<GanttDateColumnConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [IgnoreResourceCalendarColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/IgnoreResourceCalendarColumn) class.
 */
type IgnoreResourceCalendarColumnConfig = GridColumnConfig & {
    type: 'ignoreresourcecalendar'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * CSS class name to add to checkbox
     */
    checkCls: string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-region)
     */
    region: string
    /**
     * A renderer function, which gives you access to render data like the current `record`, `cellElement` and the
     * [widgets](https://bryntum.com/products/gantt/docs/api/Grid/column/WidgetColumn#config-widgets) of the column. See [renderer](#Grid/column/WidgetColumn#config-renderer)
     * for more information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Widget>} renderData.widgets An array of the widgets rendered into this cell
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export
     * @param {boolean} renderData.isTreeGroup True if record is a generated tree group parent record
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, widgets: Widget[], grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isTreeGroup: boolean, isMeasuring: boolean }) => void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * True to show a checkbox in the column header to be able to select/deselect all rows
     */
    showCheckAll: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * An array of [Widget](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget) config objects
     */
    widgets: Partial<ContainerItemConfig>[]
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status. Returning `false` will prevent status change.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onBeforeToggle: ((event: { source: Column, record: Model, checked: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onToggle: ((event: { source: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the header checkbox is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {CheckColumn} event.source This Column
     * @param {boolean} event.checked The checked status of the header checkbox.
     */
    onToggleAll: ((event: { source: CheckColumn, checked: boolean }) => void)|string
}

/**
 * A column that displays (and allows user to change) whether the task ignores its assigned resource calendars
 * when scheduling or not ([ignoreResourceCalendar](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-ignoreResourceCalendar) field).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn)
 */
export class IgnoreResourceCalendarColumn extends CheckColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/IgnoreResourceCalendarColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [InactiveColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/InactiveColumn) class.
 */
type InactiveColumnConfig = GridColumnConfig & {
    type: 'inactive'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * CSS class name to add to checkbox
     */
    checkCls: string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-region)
     */
    region: string
    /**
     * A renderer function, which gives you access to render data like the current `record`, `cellElement` and the
     * [widgets](https://bryntum.com/products/gantt/docs/api/Grid/column/WidgetColumn#config-widgets) of the column. See [renderer](#Grid/column/WidgetColumn#config-renderer)
     * for more information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Widget>} renderData.widgets An array of the widgets rendered into this cell
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export
     * @param {boolean} renderData.isTreeGroup True if record is a generated tree group parent record
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, widgets: Widget[], grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isTreeGroup: boolean, isMeasuring: boolean }) => void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * True to show a checkbox in the column header to be able to select/deselect all rows
     */
    showCheckAll: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * An array of [Widget](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget) config objects
     */
    widgets: Partial<ContainerItemConfig>[]
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status. Returning `false` will prevent status change.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onBeforeToggle: ((event: { source: Column, record: Model, checked: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onToggle: ((event: { source: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the header checkbox is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {CheckColumn} event.source This Column
     * @param {boolean} event.checked The checked status of the header checkbox.
     */
    onToggleAll: ((event: { source: CheckColumn, checked: boolean }) => void)|string
}

/**
 * A column that displays (and allows user to update) the task's
 * [inactive](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-inactive) field.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn)
 */
export class InactiveColumn extends CheckColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/InactiveColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [LateEndDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/LateEndDateColumn) class.
 */
type LateEndDateColumnConfig = GridColumnConfig & {
    type: 'lateenddate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task's [late end date](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-lateEndDate).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn)
 */
export class LateEndDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateEndDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [LateStartDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/LateStartDateColumn) class.
 */
type LateStartDateColumnConfig = GridColumnConfig & {
    type: 'latestartdate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task's [late start date](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-lateStartDate).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn)
 */
export class LateStartDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/LateStartDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [ManuallyScheduledColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/ManuallyScheduledColumn) class.
 */
type ManuallyScheduledColumnConfig = GridColumnConfig & {
    type: 'manuallyscheduled'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * CSS class name to add to checkbox
     */
    checkCls: string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-region)
     */
    region: string
    /**
     * A renderer function, which gives you access to render data like the current `record`, `cellElement` and the
     * [widgets](https://bryntum.com/products/gantt/docs/api/Grid/column/WidgetColumn#config-widgets) of the column. See [renderer](#Grid/column/WidgetColumn#config-renderer)
     * for more information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Widget>} renderData.widgets An array of the widgets rendered into this cell
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export
     * @param {boolean} renderData.isTreeGroup True if record is a generated tree group parent record
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, widgets: Widget[], grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isTreeGroup: boolean, isMeasuring: boolean }) => void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * True to show a checkbox in the column header to be able to select/deselect all rows
     */
    showCheckAll: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * An array of [Widget](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget) config objects
     */
    widgets: Partial<ContainerItemConfig>[]
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status. Returning `false` will prevent status change.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onBeforeToggle: ((event: { source: Column, record: Model, checked: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onToggle: ((event: { source: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the header checkbox is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {CheckColumn} event.source This Column
     * @param {boolean} event.checked The checked status of the header checkbox.
     */
    onToggleAll: ((event: { source: CheckColumn, checked: boolean }) => void)|string
}

/**
 * A column that displays (and allows user to update) the task's
 * [manuallyScheduled](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-manuallyScheduled) field.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn)
 */
export class ManuallyScheduledColumn extends CheckColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ManuallyScheduledColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [MilestoneColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/MilestoneColumn) class.
 */
type MilestoneColumnConfig = GridColumnConfig & {
    type: 'milestone'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * CSS class name to add to checkbox
     */
    checkCls: string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-region)
     */
    region: string
    /**
     * A renderer function, which gives you access to render data like the current `record`, `cellElement` and the
     * [widgets](https://bryntum.com/products/gantt/docs/api/Grid/column/WidgetColumn#config-widgets) of the column. See [renderer](#Grid/column/WidgetColumn#config-renderer)
     * for more information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Widget>} renderData.widgets An array of the widgets rendered into this cell
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export
     * @param {boolean} renderData.isTreeGroup True if record is a generated tree group parent record
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, widgets: Widget[], grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isTreeGroup: boolean, isMeasuring: boolean }) => void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * True to show a checkbox in the column header to be able to select/deselect all rows
     */
    showCheckAll: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * An array of [Widget](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget) config objects
     */
    widgets: Partial<ContainerItemConfig>[]
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status. Returning `false` will prevent status change.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onBeforeToggle: ((event: { source: Column, record: Model, checked: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onToggle: ((event: { source: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the header checkbox is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {CheckColumn} event.source This Column
     * @param {boolean} event.checked The checked status of the header checkbox.
     */
    onToggleAll: ((event: { source: CheckColumn, checked: boolean }) => void)|string
}

/**
 * A Column that indicates whether a task is a milestone. This column uses a [checkbox](https://bryntum.com/products/gantt/docs/api/Core/widget/Checkbox) as
 * its editor.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn)
 */
export class MilestoneColumn extends CheckColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/MilestoneColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [NameColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/NameColumn) class.
 */
type NameColumnConfig = GridColumnConfig & {
    type: 'name'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The icon to use for the collapse icon in expanded state
     */
    collapseIconCls: string|null
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * The icon to use for the collapse icon in expanded state
     */
    collapsedFolderIconCls: string|null
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * The icon to use for the collapse icon in collapsed state
     */
    expandIconCls: string|null
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * The icon to use for the collapse icon in expanded state
     */
    expandedFolderIconCls: string|null
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-id)
     */
    id: string|number
    /**
     * Size of the child indent in em. Resulting indent is indentSize multiplied by child level.
     */
    indentSize: number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The icon to use for the leaf nodes in the tree
     */
    leafIconCls: string|null
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A tree column showing (and allowing user to edit) the task's [name](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-name) field.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn)
 */
export class NameColumn extends TreeColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NameColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [NoteColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/NoteColumn) class.
 */
type NoteColumnConfig = GridColumnConfig & {
    type: 'note'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column which displays a task's [note](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-note) field.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn)
 */
export class NoteColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/NoteColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [PercentDoneColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/PercentDoneColumn) class.
 */
type PercentDoneColumnConfig = GridColumnConfig & {
    type: 'percentdone'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The format to use for rendering numbers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-format)
     */
    format: string|Partial<NumberFormatConfig>
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * Large step size for the field used during editing. In effect for `SHIFT + click/arrows`
     */
    largeStep: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * The maximum value for the field used during editing.
     */
    max: number
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * The minimum value for the field used during editing.
     */
    min: number
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Set to `true` to render a circular progress bar to visualize the task progress
     */
    showCircle: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Step size for the field used during editing.
     */
    step: number
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Unit to append to displayed value.
     */
    unit: string
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column representing the [percentDone](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) field of the task.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn)
 */
export class PercentDoneColumn extends NumberColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PercentDoneColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<PercentDoneColumnConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<PercentDoneColumnConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [PredecessorColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/PredecessorColumn) class.
 */
type PredecessorColumnConfig = GridColumnConfig & {
    type: 'predecessor'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Delimiter used for displayed value and editor
     */
    delimiter: string
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to [dependencyIdField](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-dependencyIdField)
     */
    dependencyIdField: string
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column which displays, in textual form, the dependencies which link from tasks
 * upon which the contextual task depends.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn)
 */
export class PredecessorColumn extends DependencyColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/PredecessorColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [ResourceAssignmentColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/ResourceAssignmentColumn) class.
 */
type ResourceAssignmentColumnConfig = GridColumnConfig & {
    type: 'resourceassignment'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * A config object passed to the avatar [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-avatarTooltip)
     */
    avatarTooltip: Partial<TooltipConfig>
    /**
     * A function which receives data about the resource and returns a html string to be displayed in the
     * tooltip.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-avatarTooltipTemplate)
     * @param {object} data
     * @param {TaskModel} data.taskRecord Hovered task
     * @param {ResourceModel} data.resourceRecord Hovered resource
     * @param {AssignmentModel} data.assignmentRecord Hovered assignment
     * @param {Tooltip} data.tooltip The tooltip instance
     * @param {number} data.overflowCount Number of overflowing resources, only valid for last shown resource
     * @param {AssignmentModel>} data.overflowAssignments Array of overflowing assignments, only valid for last shown resource
     * @returns {DomConfig|string|void}
     */
    avatarTooltipTemplate: (data: { taskRecord: TaskModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, tooltip: Tooltip, overflowCount: number, overflowAssignments: AssignmentModel[] }) => DomConfig|string|void
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * True to allow drag-drop of resource avatars between rows. Dropping a resource outside the
     * resource assignment cells will unassign the resource.
     */
    enableResourceDragging: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * A function which produces the content to put in the resource assignment cell.
     * May be overridden in subclasses, or injected into the column
     * to customize the Chip content.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-itemTpl)
     * @param {AssignmentModel} assignment The assignment
     * @param {number} index The index - zero based.
     * @returns {DomConfig|string|void}
     */
    itemTpl: (assignment: AssignmentModel, index: number) => DomConfig|string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * When `true`, the names of all overflowing resources are shown in the tooltip. When `false`, the number of
     * overflowing resources is displayed instead.
     * Only valid for last shown resource, if there are overflowing resources.
     */
    showAllNames: boolean
    /**
     * True to show a resource avatar for every assignment. Note that you also have to provide a
     * [resourceImageFolderPath](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-resourceImageFolderPath) for where to load images from. And/or you may
     * provide an `imageUrl` on your record, which then will take precedence when showing images.
     */
    showAvatars: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Column allowing resource manipulation (assignment/unassignment/units changing) on a task. In the column cells,
 * assignments are either shown as badges or avatars. To show avatars, set [showAvatars](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#config-showAvatars) to `true`. When
 * showing avatars there are two options for how to specify image paths:
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn)
 */
export class ResourceAssignmentColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ResourceAssignmentColumnConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ResourceAssignmentColumnConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [RollupColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/RollupColumn) class.
 */
type RollupColumnConfig = GridColumnConfig & {
    type: 'rollup'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * CSS class name to add to checkbox
     */
    checkCls: string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-region)
     */
    region: string
    /**
     * A renderer function, which gives you access to render data like the current `record`, `cellElement` and the
     * [widgets](https://bryntum.com/products/gantt/docs/api/Grid/column/WidgetColumn#config-widgets) of the column. See [renderer](#Grid/column/WidgetColumn#config-renderer)
     * for more information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Widget>} renderData.widgets An array of the widgets rendered into this cell
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export
     * @param {boolean} renderData.isTreeGroup True if record is a generated tree group parent record
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, widgets: Widget[], grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isTreeGroup: boolean, isMeasuring: boolean }) => void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * True to show a checkbox in the column header to be able to select/deselect all rows
     */
    showCheckAll: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * An array of [Widget](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget) config objects
     */
    widgets: Partial<ContainerItemConfig>[]
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status. Returning `false` will prevent status change.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onBeforeToggle: ((event: { source: Column, record: Model, checked: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onToggle: ((event: { source: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the header checkbox is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {CheckColumn} event.source This Column
     * @param {boolean} event.checked The checked status of the header checkbox.
     */
    onToggleAll: ((event: { source: CheckColumn, checked: boolean }) => void)|string
}

/**
 * A column that displays a checkbox to edit the [rollup](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-rollup) data field.
 * This field indicates if a task should rollup to its closest parent or not.
 * Requires the [Rollups](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups) feature to be enabled.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn)
 */
export class RollupColumn extends CheckColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/RollupColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [SchedulingDirectionColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/SchedulingDirectionColumn) class.
 */
type SchedulingDirectionColumnConfig = GridColumnConfig & {
    type: 'schedulingdirection'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * This is a column class for the [scheduling direction](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction)
 * field of the task model. Please refer to the documentation of that field for more details.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn)
 */
export class SchedulingDirectionColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingDirectionColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [SchedulingModeColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/SchedulingModeColumn) class.
 */
type SchedulingModeColumnConfig = GridColumnConfig & {
    type: 'schedulingmodecolumn'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column which displays a task's scheduling [mode](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-schedulingMode) field.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn)
 */
export class SchedulingModeColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SchedulingModeColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [SequenceColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/SequenceColumn) class.
 */
type SequenceColumnConfig = GridColumnConfig & {
    type: 'sequence'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A "calculated" column which displays the sequential position of the task in the project.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn)
 */
export class SequenceColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SequenceColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [ShowInTimelineColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/ShowInTimelineColumn) class.
 */
type ShowInTimelineColumnConfig = GridColumnConfig & {
    type: 'showintimeline'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * CSS class name to add to checkbox
     */
    checkCls: string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-region)
     */
    region: string
    /**
     * A renderer function, which gives you access to render data like the current `record`, `cellElement` and the
     * [widgets](https://bryntum.com/products/gantt/docs/api/Grid/column/WidgetColumn#config-widgets) of the column. See [renderer](#Grid/column/WidgetColumn#config-renderer)
     * for more information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Widget>} renderData.widgets An array of the widgets rendered into this cell
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export
     * @param {boolean} renderData.isTreeGroup True if record is a generated tree group parent record
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, widgets: Widget[], grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isTreeGroup: boolean, isMeasuring: boolean }) => void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * True to show a checkbox in the column header to be able to select/deselect all rows
     */
    showCheckAll: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * An array of [Widget](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget) config objects
     */
    widgets: Partial<ContainerItemConfig>[]
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status. Returning `false` will prevent status change.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onBeforeToggle: ((event: { source: Column, record: Model, checked: boolean }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a cell is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {Column} event.source This Column
     * @param {Model} event.record The record for the row containing the cell.
     * @param {boolean} event.checked The new checked status of the cell.
     */
    onToggle: ((event: { source: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the header checkbox is clicked to toggle its checked status.
     * @param {object} event Event object
     * @param {CheckColumn} event.source This Column
     * @param {boolean} event.checked The checked status of the header checkbox.
     */
    onToggleAll: ((event: { source: CheckColumn, checked: boolean }) => void)|string
}

/**
 * Column that shows if a task should be shown in the [Timeline](https://bryntum.com/products/gantt/docs/api/SchedulerPro/widget/Timeline) widget.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn)
 */
export class ShowInTimelineColumn extends CheckColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/ShowInTimelineColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [StartDateColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/StartDateColumn) class.
 */
type StartDateColumnConfig = GridColumnConfig & {
    type: 'startdate'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DateDataField#config-name) of the data model date field to read data from.
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The date format used to display dates in this column. If `format` is set to `null`,
     * the current value of the Gantt's [displayDateFormat](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat) will be used to format the date value.
     */
    format: string|null
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value for the cell editor
     */
    max: string|Date
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value for the cell editor
     */
    min: string|Date
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Time increment duration value to apply when clicking the left / right trigger icons. See
     * [step](https://bryntum.com/products/gantt/docs/api/Core/widget/DateField#config-step) for more information
     * Set to `null` to hide the step triggers.
     */
    step: string|number|Partial<DurationConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays (and allows user to update) the task's [start date](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-startDate).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn)
 */
export class StartDateColumn extends GanttDateColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/StartDateColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [SuccessorColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/SuccessorColumn) class.
 */
type SuccessorColumnConfig = GridColumnConfig & {
    type: 'successor'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Delimiter used for displayed value and editor
     */
    delimiter: string
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to [dependencyIdField](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-dependencyIdField)
     */
    dependencyIdField: string
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column which displays, in textual form, the dependencies which link from the
 * contextual to successor tasks.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn)
 */
export class SuccessorColumn extends DependencyColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/SuccessorColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [TimeAxisColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/TimeAxisColumn) class.
 */
type TimeAxisColumnConfig = GridColumnConfig & {
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged.
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * Set to `false` to disable the [TaskMenu](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu) for the cell elements in this column.
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if Filter feature is enabled)
     */
    filterable: boolean
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column.
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI.
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-region)
     */
    region: string
    /**
     * A renderer function, which gives you access to render data like the current `record`, `cellElement` and the
     * [widgets](https://bryntum.com/products/gantt/docs/api/Grid/column/WidgetColumn#config-widgets) of the column. See [renderer](#Grid/column/WidgetColumn#config-renderer)
     * for more information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Widget>} renderData.widgets An array of the widgets rendered into this cell
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export
     * @param {boolean} renderData.isTreeGroup True if record is a generated tree group parent record
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, widgets: Widget[], grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isTreeGroup: boolean, isMeasuring: boolean }) => void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column.
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column
     */
    sortable: boolean
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * An array of [Widget](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget) config objects
     */
    widgets: Partial<ContainerItemConfig>[]
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column containing the timeline "viewport", in which tasks, dependencies etc. are drawn.
 * Normally you do not need to interact with or create this column, it is handled by Gantt.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn)
 */
export class TimeAxisColumn extends SchedulerTimeAxisColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TimeAxisColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<TimeAxisColumnConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<TimeAxisColumnConfig>, store?: Store, meta?: object);
}

/**
 * Type with configuration options for [TotalSlackColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/TotalSlackColumn) class.
 */
type TotalSlackColumnConfig = GridColumnConfig & {
    type: 'totalslack'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Precision of displayed duration, defaults to use [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-durationDisplayPrecision).
     * Specify an integer value to override that setting, or `false` to use raw value
     */
    decimalPrecision: number|boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * The format to use for rendering numbers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-format)
     */
    format: string|Partial<NumberFormatConfig>
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or
     * using keyboard.
     */
    largeStep: number
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Max value
     */
    max: number
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Min value
     */
    min: number
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Step size for spin button clicks. Also used when pressing up/down keys in the field.
     */
    step: number
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Unit to append to displayed value.
     */
    unit: string
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays the task's [total slack](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn)
 */
export class TotalSlackColumn extends DurationColumn {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/TotalSlackColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [WBSColumn](https://bryntum.com/products/grid/docs/api/Gantt/column/WBSColumn) class.
 */
type WBSColumnConfig = GridColumnConfig & {
    type: 'wbs'
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering. <strong>This is the default behaviour until 6.0.</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-alwaysClearCell)
     */
    alwaysClearCell: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-autoHeight)
     */
    autoHeight: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-autoWidth)
     */
    autoWidth: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/gantt/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor: Partial<EditorConfig>
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-cellMenuItems)
     */
    cellMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-collapseMode)
     */
    collapseMode: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible: boolean
    /**
     * Set to false to prevent this column header from being dragged
     */
    draggable: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-editor)
     * @param {*} ref React `RefObject` for editor JSX component.
     * @returns {*} Returns React editor JSX component template
     */
    editor: boolean|string|Partial<InputFieldConfig>|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/gantt/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType: string
    /**
     * The [name](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-field)
     */
    field: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/gantt/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-filterable)
     * @param {object} data Data object
     * @param {*} data.value Record value
     * @param {Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Field} context.inputField The field configured as the column's `editor`.
     * @param {Model} context.record The record being edited.
     * @param {*} context.oldValue The old value of the cell.
     * @param {*} context.value The new value of the cell.
     * @param {Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) context object.
     * @param {Column} context.editorContext.column The column being edited.
     * @param {Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean|void}
     */
    finalizeCellEdit: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-fitMode)
     */
    fitMode: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex: number|string
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {*} renderData.groupRowFor Current group value
     * @param {Model} renderData.record Record for the row
     * @param {Model>} renderData.groupRecords Records in the group
     * @param {Column} renderData.column Current rendering column
     * @param {Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid} renderData.grid This grid
     * @returns {DomConfig|string|void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to false to prevent grouping by this column
     */
    groupable: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-headerMenuItems)
     */
    headerMenuItems: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     * @returns {string|void} The text or markup to show in the column header
     */
    headerRenderer: (renderData: { column: Column, headerElement: HTMLElement }) => string|void
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-id)
     */
    id: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-invalidAction)
     */
    invalidAction: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-managedCellEditing)
     */
    managedCellEditing: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-mergeCells)
     */
    mergeCells: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-mergeable)
     */
    mergeable: boolean
    /**
     * Column minimal width. If value is `Number`, then minimal width is in pixels
     */
    minWidth: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-region)
     */
    region: string
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {*} renderData.value Value to be displayed in the cell
     * @param {Model} renderData.record Record for the row
     * @param {Column} renderData.column This column
     * @param {Grid} renderData.grid This grid
     * @param {Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/gantt/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport True if record is being exported to allow special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string|DomConfig|DomConfig>|void}
     */
    renderer: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-sortable)
     * @param {Model} left Left side model to compare
     * @param {Model} right Right side model to compare
     * @returns {number}
     */
    sortable: boolean|((left: Model, right: Model) => number)|Partial<CollectionSorterConfig>
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-sum)
     * @param {number|*} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number|*}
     */
    sum: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries: Partial<ColumnSummaryConfig>[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number|*} data.sum The sum parameter
     * @returns {string|DomConfig|void}
     */
    summaryRenderer: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags: string[]
    /**
     * Header text
     */
    text: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Model} renderData.record Record for cell row
     * @param {Column} renderData.column Cell column
     * @param {CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string|DomConfig|void}
     */
    tooltipRenderer: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig: Partial<GridColumnConfig>
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A calculated column which displays the *WBS* (*Work Breakdown Structure*) for the tasks - the position of the task
 * in the project tree structure.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn)
 */
export class WBSColumn extends Column {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/column/WBSColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [AssignmentStore](https://bryntum.com/products/grid/docs/api/Gantt/data/AssignmentStore) class.
 */
type AssignmentStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoCommit](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-autoCommit) is set to `true`.
     */
    autoCommitTimeout: number
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Creates a model instance, used internally when data is set/added.
     * Provide this method for your own custom conversion from data to record.
     * @param {*} data Json data
     * @param {boolean} skipExpose Supply true when batch setting to not expose properties multiple times
     * @returns {Model}
     */
    createRecord: (data: any, skipExpose?: boolean) => Model
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Set to `false` to only include the id of a removed parent node in the request to the backend, and not the ids
     * of its children. Applies when configured with a [deleteUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-deleteUrl).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-includeChildrenInRemoveRequest)
     */
    includeChildrenInRemoveRequest: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string, or in the request body
     * if HTTP method allows. See [paramsInBody](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-paramsInBody) config.
     */
    params: object
    /**
     * When this config is enabled, the [params](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-params) of "read" request are placed in the
     * request body instead of the query string, if the HTTP method allows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-paramsInBody)
     */
    paramsInBody: boolean
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/gantt/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * If `true`, chained stores will be sorted when the master store is sorted. Note that this replaces
     * any existing sorters defined on the chained store.
     */
    syncSort: boolean
    /**
     * An [EventStore](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data. Incoming data must be in the correct format expected by each field, for example dates must be Date objects.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPage: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page load is beginning.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPageStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The moved records.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A class representing a collection of assignments between tasks in the [TaskStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore) and resources
 * in the [ResourceStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore)
 */
export class AssignmentStore extends SchedulerProAssignmentStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Returns all assignments for a given task.
     * @param {TaskModel} task The task to get assignments for
     */
    getAssignmentsForEvent(task: TaskModel): AssignmentModel[];
}

/**
 * Type with configuration options for [CalendarManagerStore](https://bryntum.com/products/grid/docs/api/Gantt/data/CalendarManagerStore) class.
 */
type CalendarManagerStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoCommit](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-autoCommit) is set to `true`.
     */
    autoCommitTimeout: number
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Creates a model instance, used internally when data is set/added.
     * Provide this method for your own custom conversion from data to record.
     * @param {*} data Json data
     * @param {boolean} skipExpose Supply true when batch setting to not expose properties multiple times
     * @returns {Model}
     */
    createRecord: (data: any, skipExpose?: boolean) => Model
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Set to `false` to only include the id of a removed parent node in the request to the backend, and not the ids
     * of its children. Applies when configured with a [deleteUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-deleteUrl).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-includeChildrenInRemoveRequest)
     */
    includeChildrenInRemoveRequest: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string, or in the request body
     * if HTTP method allows. See [paramsInBody](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-paramsInBody) config.
     */
    params: object
    /**
     * When this config is enabled, the [params](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-params) of "read" request are placed in the
     * request body instead of the query string, if the HTTP method allows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-paramsInBody)
     */
    paramsInBody: boolean
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/gantt/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * If `true`, chained stores will be sorted when the master store is sorted. Note that this replaces
     * any existing sorters defined on the chained store.
     */
    syncSort: boolean
    /**
     * An [EventStore](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data. Incoming data must be in the correct format expected by each field, for example dates must be Date objects.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPage: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page load is beginning.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPageStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The moved records.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A class representing the tree of calendars in the Gantt chart. An individual calendar is represented as an instance of the
 * [CalendarModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel) class. The store expects the data loaded to be hierarchical. Each parent node should
 * contain its children in a property called 'children'.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore)
 */
export class CalendarManagerStore extends SchedulerProCalendarManagerStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
}

/**
 * Type with configuration options for [DependencyStore](https://bryntum.com/products/grid/docs/api/Gantt/data/DependencyStore) class.
 */
type DependencyStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoCommit](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-autoCommit) is set to `true`.
     */
    autoCommitTimeout: number
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Creates a model instance, used internally when data is set/added.
     * Provide this method for your own custom conversion from data to record.
     * @param {*} data Json data
     * @param {boolean} skipExpose Supply true when batch setting to not expose properties multiple times
     * @returns {Model}
     */
    createRecord: (data: any, skipExpose?: boolean) => Model
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Set to `false` to only include the id of a removed parent node in the request to the backend, and not the ids
     * of its children. Applies when configured with a [deleteUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-deleteUrl).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-includeChildrenInRemoveRequest)
     */
    includeChildrenInRemoveRequest: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string, or in the request body
     * if HTTP method allows. See [paramsInBody](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-paramsInBody) config.
     */
    params: object
    /**
     * When this config is enabled, the [params](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-params) of "read" request are placed in the
     * request body instead of the query string, if the HTTP method allows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-paramsInBody)
     */
    paramsInBody: boolean
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/gantt/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * If `true`, chained stores will be sorted when the master store is sorted. Note that this replaces
     * any existing sorters defined on the chained store.
     */
    syncSort: boolean
    /**
     * An [EventStore](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data. Incoming data must be in the correct format expected by each field, for example dates must be Date objects.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPage: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page load is beginning.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPageStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The moved records.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A class representing a collection of dependencies between tasks in the [TaskStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore).
 * Contains a collection of [DependencyModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel) records.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore)
 */
export class DependencyStore extends SchedulerProDependencyStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
}

/**
 * Type with configuration options for [ResourceStore](https://bryntum.com/products/grid/docs/api/Gantt/data/ResourceStore) class.
 */
type ResourceStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoCommit](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-autoCommit) is set to `true`.
     */
    autoCommitTimeout: number
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Creates a model instance, used internally when data is set/added.
     * Provide this method for your own custom conversion from data to record.
     * @param {*} data Json data
     * @param {boolean} skipExpose Supply true when batch setting to not expose properties multiple times
     * @returns {Model}
     */
    createRecord: (data: any, skipExpose?: boolean) => Model
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Set to `false` to only include the id of a removed parent node in the request to the backend, and not the ids
     * of its children. Applies when configured with a [deleteUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-deleteUrl).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-includeChildrenInRemoveRequest)
     */
    includeChildrenInRemoveRequest: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string, or in the request body
     * if HTTP method allows. See [paramsInBody](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-paramsInBody) config.
     */
    params: object
    /**
     * When this config is enabled, the [params](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-params) of "read" request are placed in the
     * request body instead of the query string, if the HTTP method allows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-paramsInBody)
     */
    paramsInBody: boolean
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/gantt/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * If `true`, chained stores will be sorted when the master store is sorted. Note that this replaces
     * any existing sorters defined on the chained store.
     */
    syncSort: boolean
    /**
     * An [EventStore](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data. Incoming data must be in the correct format expected by each field, for example dates must be Date objects.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPage: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page load is beginning.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPageStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The moved records.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A class representing the collection of the resources - [ResourceModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel) records.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore)
 */
export class ResourceStore extends SchedulerProResourceStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Store|any} event.source The
     * @param {(Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Store|any} event.source This store
     * @param {(Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Store|any} event.source The store
     * @param {(Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
}

/**
 * Type with configuration options for [TaskStore](https://bryntum.com/products/grid/docs/api/Gantt/data/TaskStore) class.
 */
type TaskStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-allowNoId)
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoCommit](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-autoCommit) is set to `true`.
     */
    autoCommitTimeout: number
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * @param {Model} record
     * @returns {boolean}
     */
    chainedFilterFn: (record: Model) => boolean
    /**
     * Creates a model instance, used internally when data is set/added.
     * Provide this method for your own custom conversion from data to record.
     * @param {*} data Json data
     * @param {boolean} skipExpose Supply true when batch setting to not expose properties multiple times
     * @returns {Model}
     */
    createRecord: (data: any, skipExpose?: boolean) => Model
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-createUrl)
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-data)
     */
    data: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-deleteUrl)
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-fetchOptions)
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-fields)
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-filterParamName)
     */
    filterParamName: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-filters)
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Always return changes in increasing WBS order.
     */
    forceWbsOrderForChanges: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-headers)
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-httpMethods)
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Set to `false` to only include the id of a removed parent node in the request to the backend, and not the ids
     * of its children. Applies when configured with a [deleteUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-deleteUrl).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-includeChildrenInRemoveRequest)
     */
    includeChildrenInRemoveRequest: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-listeners)
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-modelClass)
     */
    modelClass: typeof Model
    /**
     * Controls behavior of the outdent logic regarding siblings. By default, outdent will move child to be
     * its parent's sibling and will move all previous siblings to the outdented node's children. Visually, node
     * will remain in place just changing the level. When set to `true` only node with its subtree will be
     * outdented, siblings will not change parent. Visually, node will be moved as last child of the new parent.
     */
    outdentIgnoringSiblings: boolean
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting *either* the [pageParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName) *or* the
     * [pageStartParamName](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName), this is the value to send in the [pageSizeParamName](#Core/data/AjaxStore#config-pageSizeParamName).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-pageSize)
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string, or in the request body
     * if HTTP method allows. See [paramsInBody](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-paramsInBody) config.
     */
    params: object
    /**
     * When this config is enabled, the [params](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-params) of "read" request are placed in the
     * request body instead of the query string, if the HTTP method allows.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-paramsInBody)
     */
    paramsInBody: boolean
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-readUrl)
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-responseDataProperty)
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-responseSuccessProperty)
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-responseTotalProperty)
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-restfulFilter)
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-sortParamName)
     */
    sortParamName: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-sorters)
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/gantt/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-storeClass)
     */
    storeClass: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-syncDataOnLoad)
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * If `true`, chained stores will be sorted when the master store is sorted. Note that this replaces
     * any existing sorters defined on the chained store.
     */
    syncSort: boolean
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-transformFlatData)
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-updateUrl)
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-useLocaleSort)
     */
    useLocaleSort: boolean|string|object
    /**
     * Specifies which tree to use to calculate WBS. Ordered tree is unsortable and unfilterable, it
     * always holds complete tree hierarchy. By default, it uses sortable and filterable tree.
     */
    useOrderedTreeForWbs: boolean
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data. Incoming data must be in the correct format expected by each field, for example dates must be Date objects.
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods: boolean
    /**
     * Whether to validate the loaded tasks data by checking if it is suitable for pre-rendering.
     * Pre-rendering is activated with the [delayCalculation](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-delayCalculation)
     * config option, and it allows to improve the perceived loading performance - the tasks are rendered
     * immediately on load, before the initial calculation completes.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-validatePreRenderData)
     */
    validatePreRenderData: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds: boolean
    /**
     * Set to `'auto'` to automatically update [wbsValue](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-wbsValue) as records in the
     * store are manipulated (e.g., when the user performs drag-and-drop reordering).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-wbsMode)
     */
    wbsMode: string|WbsMode
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {Model} event.record The record confirmed as added.
     */
    onAddConfirmed: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create'|'read'|'update'|'delete'} event.action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     */
    onAfterRequest: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before tasks in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {TaskStore} event.source The task store
     * @param {TaskModel[]} event.records Tasks to be indented
     */
    onBeforeIndent: ((event: { source: TaskStore, records: TaskModel[] }) => boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadPage: ((event: { source: Store, params: object }) => boolean|void)|string
    /**
     * Fired before tasks in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {TaskStore} event.source The task store
     * @param {TaskModel[]} event.records Tasks to be outdented
     */
    onBeforeOutdent: ((event: { source: TaskStore, records: TaskModel[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create'|'read'|'update'|'delete'} event.action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */
    onBeforeRequest: ((event: { source: Store, params: object, body: object, action: 'create'|'read'|'update'|'delete' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#event-change)
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitAdded: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitModified: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onCommitRemoved: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#event-exception)
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create'|'read'|'update'|'delete'|'commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network'|'failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {string|number} event.oldValue Old id
     * @param {string|number} event.value New id
     */
    onIdChange: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {TaskStore} event.source The task store
     * @param {TaskModel[]} event.records Tasks that were indented
     */
    onIndent: ((event: { source: TaskStore, records: TaskModel[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#event-loadDateRange)
     * @param {object} event Event object
     * @param {SchedulerEventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: SchedulerEventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPage: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page load is beginning.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPageStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record (DEPRECATED) The first record moved (The [move](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Model[]} event.records The moved records.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove: ((event: { source: Store, record: Model, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {TaskStore} event.source The task store
     * @param {TaskModel[]} event.records Tasks that were outdented
     */
    onOutdent: ((event: { source: TaskStore, records: TaskModel[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.oldRoot The old root node.
     * @param {Model} event.rootNode The new root node.
     */
    onRootChange: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A class representing the tree of tasks in the Gantt project. An individual task is represented as an instance of the
 * [TaskModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel) class. The store expects the data loaded to be hierarchical. Each parent node should
 * contain its children in a property called 'children'.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore)
 */
export class TaskStore extends AjaxStore {
    /**
     * Whether to validate the loaded tasks data by checking if it is suitable for pre-rendering.
     * Pre-rendering is activated with the [delayCalculation](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-delayCalculation)
     * config option, and it allows to improve the perceived loading performance - the tasks are rendered
     * immediately on load, before the initial calculation completes.
     */
    validatePreRenderData: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Model} event.parent If due to an [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to true if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to true if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be added
     * @param {Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before tasks in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {TaskStore} event.source The task store
     * @param {TaskModel[]} event.records Tasks to be indented
     */
    onBeforeIndent: ((event: { source: TaskStore, records: TaskModel[] }) => boolean|void)|string
    /**
     * Fired before tasks in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {TaskStore} event.source The task store
     * @param {TaskModel[]} event.records Tasks to be outdented
     */
    onBeforeOutdent: ((event: { source: TaskStore, records: TaskModel[] }) => boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records The records which are to be removed.
     * @param {Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Collection} event.filters Filters used by this Store
     * @param {Model[]} event.removed The records which were filtered out by the action.
     * @param {Model[]} event.added The records which were filtered back in by the action.
     * @param {Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {TaskStore} event.source The task store
     * @param {TaskModel[]} event.records Tasks that were indented
     */
    onIndent: ((event: { source: TaskStore, records: TaskModel[] }) => void)|string
    /**
     * Fired when a range of events is requested from the [getEvents](https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents) method.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#event-loadDateRange)
     * @param {object} event Event object
     * @param {SchedulerEventStore} event.source This EventStore
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made.
     */
    onLoadDateRange: ((event: { source: SchedulerEventStore, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {TaskStore} event.source The task store
     * @param {TaskModel[]} event.records Tasks that were outdented
     */
    onOutdent: ((event: { source: TaskStore, records: TaskModel[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Model} event.parent If due to a [removeChild](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to true if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to true if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<TaskStoreConfig>} config
     */
    constructor(config?: Partial<TaskStoreConfig>);
    /**
     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.
     * @param {object} options An options object determining which events to return
     */
    getEvents(options: {
        date?: Date
        startDate: Date
        endDate?: Date
        resourceRecord?: SchedulerResourceModel
        filter?: Function
        ignoreFilters?: boolean
        includeOccurrences?: boolean
        allowPartial?: boolean
        startOnly?: boolean
        onlyAssigned?: boolean
        dateMap?: boolean|Map<any, any>
    }): SchedulerEventModel[]|Map<any, any>;
    /**
     * Increase the indentation level of one or more tasks in the tree
     * @param {TaskModel|TaskModel[]} nodes The nodes to indent.
     */
    indent(nodes: TaskModel|TaskModel[]): Promise<any>;
    /**
     * Checks if a date range is allocated or not for a given resource.
     * @param {Date} start The start date
     * @param {Date} end The end date
     * @param {SchedulerEventModel|null} excludeEvent An event to exclude from the check (or null)
     * @param {SchedulerResourceModel} resource The resource
     */
    isDateRangeAvailable(start: Date, end: Date, excludeEvent: SchedulerEventModel|null, resource: SchedulerResourceModel): boolean;
    /**
     * Decrease the indentation level of one or more tasks in the tree
     * @param {TaskModel|TaskModel[]} nodes The nodes to outdent.
     */
    outdent(nodes: TaskModel|TaskModel[]): Promise<any>;
    /**
     * For each task in this TaskStore, sets the data in the passed baseline index to the current state of the task.
     * @param {number} index The index in the baselines list of the baseline to update.
     */
    setBaseline(index: number): void;
}

/**
 * Type with configuration options for [WbsField](https://bryntum.com/products/grid/docs/api/Gantt/data/field/WbsField) class.
 */
type WbsFieldConfig = InputFieldConfig & ContainerItemConfig & {
    /**
     * Setting to `true` will ensure this field is included in any update/insert request payload
     * when a Store / Project / CrudManager performs a request.
     */
    alwaysWrite: boolean
    /**
     * When this flag is enabled, this field will skip the equality check when store is syncing the new
     * dataset (see [syncDataOnLoad](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-syncDataOnLoad) config). This means, that even if the
     * new value in new dataset is the same as old, it will still be applied to the model. It is useful
     * in certain edge case scenarios, when the update of the field does not preserve extra context information,
     * which should be provided by other fields.
     */
    bypassEqualityOnSyncDataset: boolean
    /**
     * A column config object for a column to display this field in a grid. For simple, atomic
     * data types, such as `date`, `string`, `boolean`, `number` and `integer`, this is optional
     * and the appropriate column type can be inferred.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/field/WbsField#config-column)
     */
    column: string|Partial<GridColumnConfig>
    /**
     * A function that compares two values and returns a value &lt; 0 if the first is less than the second, or 0
     * if the values are equal, or a value &gt; 0 if the first is greater than the second.
     * @param {Model} value1
     * @param {Model} value2
     * @returns {number}
     */
    compare: (value1: Model, value2: Model) => number
    /**
     * The property in a record's data object that contains the field's value.
     * Defaults to the field's `name`.
     */
    dataSource: string
    /**
     * The default value to assign to this field in a record if no value is provided.
     */
    defaultValue: any
    /**
     * By default, defined [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model) fields may be used to create a grid column
     * suitable for displaying that field in a grid cell. Some fields may not be suitable for
     * features which automatically generate columns for view. These fields are created using
     * `internal : true`. Some examples are the `expanded` and `rowHeight` fields which are used
     * internally.
     */
    internal: boolean
    /**
     * The label text for a form item generated for this field. This is also used to create
     * a column header for a [column](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-column) for this field.
     */
    label: string
    /**
     * The name of the field.
     */
    name: string
    /**
     * The value to return from [print](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#function-print) for a `null` or `undefined` value.
     */
    nullText: string
    /**
     * The value to replace `null` when the field is not `nullable`.
     */
    nullValue: any
    /**
     * Setting to `false` indicates that `null` is not a valid value.
     */
    nullable: boolean
    /**
     * Set to `false` to exclude this field when saving records to a server.
     */
    persist: boolean
    /**
     * Set to `true` for the field's set accessor to ignore attempts to set this field.
     */
    readOnly: boolean
}

/**
 * This class is used for a WBS (Work Breakdown Structure) field. These fields hold a [Wbs](https://bryntum.com/products/gantt/docs/api/Gantt/data/Wbs)
 * object for their value.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/data/field/WbsField)
 */
export class WbsField extends DataField {
}

/**
 * Type with configuration options for [Baselines](https://bryntum.com/products/grid/docs/api/Gantt/feature/Baselines) class.
 */
type BaselinesConfig = {
    type: 'baselines'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-allowOver)
     */
    allowOver: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-autoClose)
     */
    autoClose: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Specify true to have tooltip updated when mouse moves, if you for example want to display date at mouse
     * position.
     */
    autoUpdate: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: Partial<ContainerItemConfig>
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-disabled)
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A config [object](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-hideDelay)
     */
    hideDelay: number
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-listeners)
     */
    listeners: object
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/gantt/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/gantt/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-ref)
     */
    ref: string
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a task baseline is rendered into the gantt to render the contents of the baseline element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-renderer)
     * @param {object} detail An object containing the information needed to render a Baseline.
     * @param {TaskModel} detail.taskRecord The task record.
     * @param {Baseline} detail.baselineRecord The baseline record.
     * @param {DomConfig} detail.renderData An object containing details about the baseline element.
     * @returns {DomConfig|DomConfig>|string} A string or an DomObject config object to append to a baseline element children
     */
    renderer: (detail: { taskRecord: TaskModel, baselineRecord: Baseline, renderData: DomConfig }) => DomConfig|DomConfig[]|string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/gantt/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Template (a function accepting event data and returning a string) used to display info in the tooltip.
     * The template will be called with an object as with fields as detailed below
     * @param {object} data A data block containing the information needed to create tooltip content
     * @param {Baseline} data.baseline The Baseline record to display
     * @param {string} data.startClockHtml Predefined HTML to show the start time
     * @param {string} data.endClockHtml Predefined HTML to show the end time
     * @returns {DomConfig|string|void}
     */
    template: (data: { baseline: Baseline, startClockHtml: string, endClockHtml: string }) => DomConfig|string|void
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a tooltip is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Tooltip} event.source The tooltip being shown.
     * @param {SchedulerEventModel} event.source.eventRecord The event record.
     */
    onBeforeShow: ((event: { source: { eventRecord: SchedulerEventModel } }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a tooltip is shown.
     * @param {object} event Event object
     * @param {Tooltip} event.source The tooltip.
     * @param {SchedulerEventModel} event.source.eventRecord The event record.
     */
    onShow: ((event: { source: { eventRecord: SchedulerEventModel } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Displays a [task](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel)'s [baselines](#Gantt/model/TaskModel#field-baselines) below the tasks in the
 * timeline.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines)
 */
export class Baselines extends TooltipBase {
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a task baseline is rendered into the gantt to render the contents of the baseline element.
     */
    renderer: (detail: { taskRecord: TaskModel, baselineRecord: Baseline, renderData: DomConfig }) => DomConfig|DomConfig[]|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Baselines#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<BaselinesConfig>} config
     */
    constructor(config?: Partial<BaselinesConfig>);
}

/**
 * Type with configuration options for [CellEdit](https://bryntum.com/products/grid/docs/api/Gantt/feature/CellEdit) class.
 */
type CellEditConfig = {
    type: 'cellEdit'|'celledit'
    /**
     * Set to true to have TAB key on the last cell (and ENTER anywhere in the last row) in the data set create
     * a new record and begin editing it at its first editable cell.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#config-addNewAtEnd)
     */
    addNewAtEnd: boolean|object
    /**
     * Set to `true` to add record to the parent of the last record, when configured with [addNewAtEnd](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit#config-addNewAtEnd).
     * Only applicable when using a tree view and store.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#config-addToCurrentParent)
     */
    addToCurrentParent: boolean
    /**
     * Set to `true` to start editing when user starts typing text on a focused cell (as in Excel)
     */
    autoEdit: boolean
    /**
     * Set to true to select the field text when editing starts
     */
    autoSelect: boolean
    /**
     * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.
     * May be `'complete'` or `'cancel`'.
     */
    blurAction: 'complete'|'cancel'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Set to `false` to stop editing when clicking another cell after a cell edit.
     */
    continueEditingOnCellClick: boolean
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#config-disabled)
     */
    disabled: boolean
    /**
     * Set to `false` to not start editing next record when user presses enter inside a cell editor (or previous
     * record if SHIFT key is pressed). This is set to `false` when [autoEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit#config-autoEdit) is `true`. Please
     * note that these key combinations could be different if a customized [keyMap](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit#config-keyMap) is used.
     */
    editNextOnEnterPress: boolean
    /**
     * A CSS selector for elements that when clicked, should not trigger editing. Useful if you render actionable
     * icons or buttons into a grid cell.
     */
    ignoreCSSSelector: string
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * If set to `true` (which is default) this will make it possible to edit current column in multiple rows
     * simultaneously.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#config-multiEdit)
     */
    multiEdit: boolean
    /**
     * The name of the grid event that will trigger cell editing. Defaults to
     * [celldblclick](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridElementEvents#event-cellDblClick) but can be changed to any other event,
     * such as [cellclick](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridElementEvents#event-cellClick).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#config-triggerEvent)
     */
    triggerEvent: string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Extends the [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) to encapsulate Gantt functionality. This feature is enabled by <b>default</b>
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit)
 */
export class CellEdit extends SchedulerProCellEdit {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CellEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Adds a new, empty record at the end of the TaskStore with the initial
     * data specified by the [addNewAtEnd](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit#config-addNewAtEnd) setting.
     */
    doAddNewAtEnd(): Promise<any>;
}

/**
 * Type with configuration options for [CriticalPaths](https://bryntum.com/products/grid/docs/api/Gantt/feature/CriticalPaths) class.
 */
type CriticalPathsConfig = {
    type: 'criticalPaths'|'criticalpaths'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature highlights the project *critical paths*.
 * Every task is important, but only some of them are critical.
 * The critical path is a chain of linked tasks that directly affects the project finish date.
 * If any task on the critical path is late, the whole project is late.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths)
 */
export class CriticalPaths extends InstancePlugin {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [Dependencies](https://bryntum.com/products/grid/docs/api/Gantt/feature/Dependencies) class.
 */
type DependenciesConfig = {
    type: 'dependencies'
    /**
     * Set to `false` to not allow creating dependencies
     */
    allowCreate: boolean
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * The clickable/touchable width of the dependency line in pixels. Setting this to a number greater than 1 will
     * draw an invisible but clickable line along the same path as the dependency line, making it easier to click.
     * The tradeoff is that twice as many lines will be drawn, which can affect performance.
     */
    clickWidth: number
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * A tooltip config object that will be applied to the dependency creation [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip)
     */
    creationTooltip: Partial<TooltipConfig>
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {object} data Data about the dependency being created
     * @param {TimeSpan} data.source The from event
     * @param {TimeSpan} data.target The target event
     * @param {string} data.fromSide The from side (start, end, top, bottom)
     * @param {string} data.toSide The target side (start, end, top, bottom)
     * @param {boolean} data.valid The validity of the dependency
     * @returns {string|DomConfig}
     */
    creationTooltipTemplate: (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: boolean }) => string|DomConfig
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-disabled)
     */
    disabled: boolean
    /**
     * *Experimental* - This setting only applies when using dependencies with the nested events feature. In such
     * scenarios, enabling this config will cause the dependency lines to, when the algorithm determines it is
     * possible, be drawn around parent events, instead of through them.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-drawAroundParents)
     */
    drawAroundParents: boolean
    /**
     * Specify `false` to prevent dependencies from being drawn during scroll, for smoother scrolling in schedules
     * with lots of dependencies. Dependencies will be drawn when scrolling stops instead.
     */
    drawOnScroll: boolean
    /**
     * Specify `true` to highlight incoming and outgoing dependencies when hovering an event.
     */
    highlightDependenciesOnEventHover: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * SVG path definition used as marker (arrow head) for the dependency lines.
     * Should fit in a viewBox that is 9 x 6.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-markerDef)
     */
    markerDef: string
    /**
     * Radius (in px) used to draw arcs where dependency line segments connect. Specify it to get a rounded look.
     * The radius will during drawing be reduced as needed on a per segment basis to fit lines.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-radius)
     */
    radius: number
    /**
     * Renderer function, supply one if you want to manipulate the [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object used to draw a
     * dependency line between two assignments.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-renderer)
     * @param {object} renderData
     * @param {DomConfig} renderData.domConfig that will be used to create the dependency line, can be manipulated by the renderer
     * @param {DependencyModel} renderData.dependencyRecord The dependency being rendered
     * @param {AssignmentModel} renderData.fromAssignmentRecord Drawing line from this assignment
     * @param {AssignmentModel} renderData.toAssignmentRecord Drawing line to this assignment
     * @param {<Object>} renderData.points A collection of points making up the line segments for the dependency line. Read-only in the renderer, any manipulation should be done to `domConfig`
     * @param {Rectangle} renderData.fromBox Bounds for the fromAssignment's element
     * @param {Rectangle} renderData.toBox Bounds for the toAssignment's element
     * @param {'top'|'right'|'bottom'|'left'} renderData.fromSide Drawn from this side of the fromAssignment
     * @param {'top'|'right'|'bottom'|'left'} renderData.toSide Drawn to this side of the fromAssignment
     * @returns {void}
     */
    renderer: (renderData: { domConfig: DomConfig, dependencyRecord: SchedulerDependencyModel, fromAssignmentRecord: SchedulerAssignmentModel, toAssignmentRecord: SchedulerAssignmentModel, points: object[], fromBox: Rectangle, toBox: Rectangle, fromSide: 'top'|'right'|'bottom'|'left', toSide: 'top'|'right'|'bottom'|'left' }) => void
    /**
     * `false` to not show a tooltip while creating a dependency
     */
    showCreationTooltip: boolean
    /**
     * Set to `true` to show the lag in the tooltip
     */
    showLagInTooltip: boolean
    /**
     * Set to `true` to show a tooltip when hovering a dependency line
     */
    showTooltip: boolean
    /**
     * CSS class used for terminals
     */
    terminalCls: string
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-terminalHideDelay)
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-terminalShowDelay)
     */
    terminalShowDelay: number
    /**
     * Where (on event bar edges) to display terminals. The sides are `'start'`, `'top'`,
     * `'end'` and `'bottom'`
     */
    terminalSides: string[]
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#config-terminalSize)
     */
    terminalSize: number|string
    /**
     * A tooltip config object that will be applied to the dependency hover tooltip. Can be used to for example
     * customize delay
     */
    tooltip: Partial<TooltipConfig>
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {DependencyBaseModel} dependency The dependency record
     * @returns {string|DomConfig}
     */
    tooltipTemplate: (dependency: DependencyBaseModel) => string|DomConfig
    /**
     * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onAfterDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onBeforeDependencyCreateDrag: ((event: { source: TimeSpan }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {'start'|'end'|'top'|'bottom'} event.fromSide The from side (start / end / top / bottom)
     * @param {'start'|'end'|'top'|'bottom'} event.toSide The to side (start / end / top / bottom)
     */
    onBeforeDependencyCreateFinalize: ((event: { source: TimeSpan, target: TimeSpan, fromSide: 'start'|'end'|'top'|'bottom', toSide: 'start'|'end'|'top'|'bottom' }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler/Gantt before showing dependency terminals on a task or event. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The hovered task
     */
    onBeforeShowTerminals: ((event: { source: TimeSpan }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onDependencyCreateDragStart: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationComplete: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationStart: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that draws dependencies between tasks. Uses a dependency [store](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore)
 * to determine which dependencies to draw.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies)
 */
export class Dependencies extends SchedulerProDependencies {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Dependencies#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Draws all dependencies for the specified task.
     * @deprecated 5.1 The Dependencies feature was refactored and this fn is no longer needed
     */
    drawForTask(): void;
    /**
     * Returns the dependency record for a DOM element
     * @param {HTMLElement} element The dependency line element
     */
    resolveDependencyRecord(element: HTMLElement): DependencyModel;
}

/**
 * Type with configuration options for [Indicators](https://bryntum.com/products/grid/docs/api/Gantt/feature/Indicators) class.
 */
type IndicatorsConfig = {
    type: 'indicators'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-allowOver)
     */
    allowOver: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-autoClose)
     */
    autoClose: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Specify true to have tooltip updated when mouse moves, if you for example want to display date at mouse
     * position.
     */
    autoUpdate: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: Partial<ContainerItemConfig>
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-disabled)
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A config [object](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-hideDelay)
     */
    hideDelay: number
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * Used to enable/disable built-in indicators and to define custom indicators.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-items)
     */
    items: Record<string, Function|boolean>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-listeners)
     */
    listeners: object
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/gantt/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/gantt/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/gantt/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * A function which receives data about the indicator and returns a string,
     * or a Promise yielding a string (for async tooltips), to be displayed in the tooltip.
     * This method will be called with an object containing the fields below
     * @param {object} data Indicator data
     * @param {string} data.name Indicator name
     * @param {Date} data.startDate Indicator startDate
     * @param {Date} data.endDate Indicator endDate
     * @param {TaskModel} data.taskRecord The task to which the indicator belongs
     * @param {string} data.startClockHtml Predefined HTML to show the start time
     * @param {string} data.endClockHtml Predefined HTML to show the end time
     * @returns {DomConfig|string|void}
     */
    tooltipTemplate: (data: { name: string, startDate: Date, endDate: Date, taskRecord: TaskModel, startClockHtml: string, endClockHtml: string }) => DomConfig|string|void
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a tooltip is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Tooltip} event.source The tooltip being shown.
     * @param {SchedulerEventModel} event.source.eventRecord The event record.
     */
    onBeforeShow: ((event: { source: { eventRecord: SchedulerEventModel } }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a tooltip is shown.
     * @param {object} event Event object
     * @param {Tooltip} event.source The tooltip.
     * @param {SchedulerEventModel} event.source.eventRecord The event record.
     */
    onShow: ((event: { source: { eventRecord: SchedulerEventModel } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * The Indicators feature displays indicators (icons) for different dates related to a task in its row. Hovering an
 * indicator will show a tooltip with its name and date(s). The owning task `id` is embedded in the indicator element
 * dataset as `taskRecordId` which can be useful if you want to have custom actions when clicking (showing a menu for example).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators)
 */
export class Indicators extends TooltipBase {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Indicators#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<IndicatorsConfig>} config
     */
    constructor(config?: Partial<IndicatorsConfig>);
}

/**
 * Type with configuration options for [Labels](https://bryntum.com/products/grid/docs/api/Gantt/feature/Labels) class.
 */
type LabelsConfig = {
    type: 'labels'
    /**
     * Configuration object for the label which appears *after* the event bar in the current writing direction.
     */
    after: Partial<SchedulerLabelConfig>
    /**
     * Configuration object for the label which appears *before* the event bar in the current writing direction.
     */
    before: Partial<SchedulerLabelConfig>
    /**
     * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.
     * May be `'complete'` or `'cancel`'.
     */
    blurAction: 'complete'|'cancel'
    /**
     * Bottom label configuration object.
     */
    bottom: Partial<SchedulerLabelConfig>
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Labels#config-disabled)
     */
    disabled: boolean
    /**
     * Factor representing the average char width in pixels used to determine label width when configured
     * with `labelLayoutMode: 'estimate'`.
     */
    labelCharWidth: number
    /**
     * CSS class to apply to label elements
     */
    labelCls: string
    /**
     * How to handle labels during event layout. Options are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Labels#config-labelLayoutMode)
     */
    labelLayoutMode: 'default'|'estimate'|'measure'
    /**
     * Left label configuration object.
     */
    left: Partial<SchedulerLabelConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Labels#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Labels#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Labels#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Right label configuration object.
     */
    right: Partial<SchedulerLabelConfig>
    /**
     * Top label configuration object.
     */
    top: Partial<SchedulerLabelConfig>
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Labels#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Specialized version of the Labels feature for Scheduler, that handles labels for tasks in Gantt. See
 * [Schedulers Labels feature](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/Labels) for more information.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Labels)
 */
export class Labels extends SchedulerLabels {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Labels#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [ParentArea](https://bryntum.com/products/grid/docs/api/Gantt/feature/ParentArea) class.
 */
type ParentAreaConfig = {
    type: 'parentArea'|'parentarea'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ParentArea#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ParentArea#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ParentArea#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ParentArea#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ParentArea#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Highlights the area encapsulating all child tasks of a parent task in a semi-transparent layer. You can style
 * these layer elements using the `b-parent-area` CSS class.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ParentArea)
 */
export class ParentArea extends InstancePlugin {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ParentArea#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [ProgressLine](https://bryntum.com/products/grid/docs/api/Gantt/feature/ProgressLine) class.
 */
type ProgressLineConfig = {
    type: 'progressLine'|'progressline'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProgressLine#config-disabled)
     */
    disabled: boolean
    /**
     * Set to true to hide progress line, when status date is not in the current time axis.
     */
    drawLineOnlyWhenStatusDateVisible: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProgressLine#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProgressLine#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProgressLine#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Progress line status date. If not provided, current date is used.
     */
    statusDate: Date
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProgressLine#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when progress line is rendered
     */
    onProgressLineDrawn: (() => void)|string
}

/**
 * This feature draws project progress line with SVG lines. Requires [PercentBar](https://bryntum.com/products/gantt/docs/api/SchedulerPro/feature/PercentBar) to be enabled (which
 * by default, it is)
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProgressLine)
 */
export class ProgressLine extends InstancePlugin {
    /**
     * Progress line status date. If not provided, current date is used.
     */
    statusDate: Date
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProgressLine#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when progress line is rendered
     */
    onProgressLineDrawn: (() => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<ProgressLineConfig>} config
     */
    constructor(config?: Partial<ProgressLineConfig>);
    /**
     * Renders the progress line.
     */
    draw(): void;
    /**
     * Returns true if progress line should be drawn
     */
    shouldDrawProgressLine(): boolean;
}

/**
 * Type with configuration options for [ProjectLines](https://bryntum.com/products/grid/docs/api/Gantt/feature/ProjectLines) class.
 */
type ProjectLinesConfig = {
    type: 'projectLines'|'projectlines'
    /**
     * Function used to generate the HTML content for a time range body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#config-bodyRenderer)
     * @param {object} data Render data
     * @param {TimeSpan} data.timeRange
     * @returns {string} String representing the HTML markup
     */
    bodyRenderer: (data: { timeRange: TimeSpan }) => string
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The date format to show in the header for the current time line (when [showCurrentTimeLine](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/TimeRanges#config-showCurrentTimeLine) is configured).
     * See [DateHelper](https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper) for the possible formats to use.
     */
    currentDateFormat: string
    /**
     * The interval (as amount of ms) defining how frequently the current timeline will be updated
     */
    currentTimeLineUpdateInterval: number
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#config-disabled)
     */
    disabled: boolean
    /**
     * Set to `true` to enable dragging and resizing of range elements in the header. Only relevant when
     * [showHeaderElements](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/AbstractTimeRanges#config-showHeaderElements) is `true`.
     */
    enableResizing: boolean
    /**
     * Function used to generate the HTML content for a time range header element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#config-headerRenderer)
     * @param {object} data Render data
     * @param {TimeSpan} data.timeRange
     * @returns {string} String representing the HTML markup
     */
    headerRenderer: (data: { timeRange: TimeSpan }) => string
    /**
     * A [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip) config object which is applied to the tooltip shown when hovering a
     * TimeRange header element
     */
    hoverTooltip: Partial<TooltipConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Show a line indicating current time. Either `true` or `false` or a [TimeSpan](https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan)
     * configuration object to apply to this special time range (allowing you to provide a custom text):
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#config-showCurrentTimeLine)
     */
    showCurrentTimeLine: boolean|Partial<TimeSpanConfig>
    /**
     * Set to `false` to not render range elements into the time axis header
     */
    showHeaderElements: boolean
    /**
     * A Boolean specifying whether to show tooltip while resizing range elements, or a
     * [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip) config object which is applied to the tooltip
     */
    showTooltip: boolean|Partial<TooltipConfig>
    /**
     * Template used to generate the tooltip contents when hovering a time range header element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#config-tooltipTemplate)
     * @param {object} data Tooltip data
     * @param {TimeSpan} data.timeRange
     * @param {string} data.startClockHtml Predefined HTML to show the start time
     * @param {string} data.endClockHtml Predefined HTML to show the end time
     * @returns {string} String representing the HTML markup
     */
    tooltipTemplate: (data: { timeRange: TimeSpan, startClockHtml: string, endClockHtml: string }) => string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature draws two vertical lines in the schedule area, indicating project start/end dates.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines)
 */
export class ProjectLines extends TimeRanges {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ProjectLines#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [Rollups](https://bryntum.com/products/grid/docs/api/Gantt/feature/Rollups) class.
 */
type RollupsConfig = {
    type: 'rollups'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-allowOver)
     */
    allowOver: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-autoClose)
     */
    autoClose: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Specify true to have tooltip updated when mouse moves, if you for example want to display date at mouse
     * position.
     */
    autoUpdate: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: Partial<ContainerItemConfig>
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-disabled)
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A config [object](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-hideDelay)
     */
    hideDelay: number
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-listeners)
     */
    listeners: object
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/gantt/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/gantt/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/gantt/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Template (a function accepting event data and returning a string) used to display info in the tooltip.
     * The template will be called with an object as with fields as detailed below
     * @param {object} data A data block containing the information needed to create tooltip content.
     * @param {TaskModel} data.task The summary task to rollup to.
     * @param {TaskModel>} data.children The array of rollup tasks.
     * @returns {string} String representing the HTML markup
     */
    template: (data: { task: TaskModel, children: TaskModel[] }) => string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a tooltip is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Tooltip} event.source The tooltip being shown.
     * @param {SchedulerEventModel} event.source.eventRecord The event record.
     */
    onBeforeShow: ((event: { source: { eventRecord: SchedulerEventModel } }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a tooltip is shown.
     * @param {object} event Event object
     * @param {Tooltip} event.source The tooltip.
     * @param {SchedulerEventModel} event.source.eventRecord The event record.
     */
    onShow: ((event: { source: { eventRecord: SchedulerEventModel } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * If the task's [rollup](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-rollup) data field is set to true, it displays a small bar or diamond below its summary task in the timeline.
 * Each of the rollup elements show a tooltip when hovering it with details of the task.
 * The tooltip content is customizable, see [template](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#config-template) config for details.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups)
 */
export class Rollups extends TooltipBase {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Rollups#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<RollupsConfig>} config
     */
    constructor(config?: Partial<RollupsConfig>);
}

/**
 * Type with configuration options for [ScrollButtons](https://bryntum.com/products/grid/docs/api/Gantt/feature/ScrollButtons) class.
 */
type ScrollButtonsConfig = {
    type: 'scrollButtons'|'scrollbuttons'
    /**
     * The icon to use for the button scrolling into the past
     */
    backwardIconCls: string
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons#config-disabled)
     */
    disabled: boolean
    /**
     * The icon to use for the button scrolling into the future
     */
    forwardIconCls: string
    /**
     * A method letting you render a label above the button.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons#config-labelRenderer)
     * @param {object} detail An object that contains data about the event being rendered.
     * @param {TaskModel} detail.taskRecord The task record
     * @returns {string} The text or raw HTML, remember to HTML encode contents
     */
    labelRenderer: (detail: { taskRecord: TaskModel }) => string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * A config object describing how the scroll action should be performed.
     */
    scrollOptions: BryntumScrollOptions
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature injects buttons in each row that scrolls the task bar into view. It can optionally show a label along with the
 * button, using the [labelRenderer](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons#config-labelRenderer).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons)
 */
export class ScrollButtons extends InstancePlugin {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/ScrollButtons#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<ScrollButtonsConfig>} config
     */
    constructor(config?: Partial<ScrollButtonsConfig>);
}

/**
 * Type with configuration options for [Summary](https://bryntum.com/products/grid/docs/api/Gantt/feature/Summary) class.
 */
type SummaryConfig = {
    type: 'summary'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Renderer function for a single time axis tick. Should calculate a sum and return HTML as a result.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#config-renderer)
     * @param {object} context Rendering context object
     * @param {Date} context.startDate Tick start date
     * @param {Date} context.endDate Tick end date
     * @param {TaskStore} context.taskStore Task store
     * @param {TaskStore} context.store Display store, for when Gantt is configured to display tasks from another store than its task store (for example when using the TreeGroup feature)
     * @returns {string} Html content
     */
    renderer: (context: { startDate: Date, endDate: Date, taskStore: TaskStore, store: TaskStore }) => string
    /**
     * Set to `true` to sum values of selected row records
     */
    selectedOnly: boolean
    /**
     * Show tooltip containing summary values and labels
     */
    showTooltip: boolean
    /**
     * Array of summary configs which consists of a label and a [renderer](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#config-renderer) function
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#config-summaries)
     */
    summaries: GanttSummaryOptions[]
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A feature displaying a summary bar in the grid footer.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary)
 */
export class Summary extends TimelineSummary {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Summary#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<SummaryConfig>} config
     */
    constructor(config?: Partial<SummaryConfig>);
}

/**
 * Type with configuration options for [TaskCopyPaste](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskCopyPaste) class.
 */
type TaskCopyPasteConfig = {
    type: 'taskCopyPaste'|'taskcopypaste'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * If `true` this prevents cutting and pasting. Will default to `true` if [CellEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit) feature
     * is disabled. Set to `false` to prevent this behaviour.
     */
    copyOnly: boolean
    /**
     * The format a copied date value should have when converted to a string. To learn more about available formats,
     * check out [DateHelper](https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper) docs.
     */
    dateFormat: string
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#config-disabled)
     */
    disabled: boolean
    /**
     * If an empty value (null or empty string) is copied or cut, this config will replace that value.
     * This allows for clipboard data to skip columns.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#config-emptyValueChar)
     */
    emptyValueChar: string
    /**
     * Default keyMap configuration: Ctrl/Cmd+c to copy, Ctrl/Cmd+x to cut and Ctrl/Cmd+v to paste. These keyboard
     * shortcuts require a selection to be made.
     */
    keyMap: Record<string, string>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * The field to use as the name field when updating the name of copied records
     */
    nameField: string
    /**
     * Adds `Cut (row)`, `Copy (row)` and `Paste (row)` options when opening a context menu on a selected cell when
     * [cellSelection](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridSelection#config-selectionMode) and
     * [CellCopyPaste](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellCopyPaste) is active. Default behaviour will only provide row copy/paste actions on a
     * selected row.
     */
    rowOptionsOnCellContextMenu: boolean
    /**
     * Provide a function to be able to customize the string value which is copied
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#config-toCopyString)
     * @param {object} data
     * @param {string} data.currentValue
     * @param {Column} data.column
     * @param {Model} data.record
     * @returns {string}
     */
    toCopyString: (data: { currentValue: string, column: Column, record: Model }) => string
    /**
     * Provide a function to be able to customize the value which will be set onto the record
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#config-toPasteValue)
     * @param {object} data
     * @param {string} data.currentValue
     * @param {Column} data.column
     * @param {Model} data.record
     * @returns {string}
     */
    toPasteValue: (data: { currentValue: string, column: Column, record: Model }) => string
    /**
     * Set this to `false` to not use native Clipboard API even if it is available
     */
    useNativeClipboard: boolean
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste tasks. You can configure how a newly pasted record
 * is named using [generateNewName](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#function-generateNewName)
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste)
 */
export class TaskCopyPaste extends RowCopyPaste {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskCopyPaste#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [TaskDrag](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskDrag) class.
 */
type TaskDragConfig = {
    type: 'taskDrag'|'taskdrag'
    /**
     * Whether to allow the SNET constraint generated by an event drag to be placed in non-
     * working time. When `true` and the event is dragged so that its `startDate` is in non-working
     * time, the SNET constraint date will be kept on the non-working date where the task is dropped.
     * When `false`, snaps the SNET date to working time in the same way as the `startDate`. The
     * `startDate` is not affected by this config.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#config-allowNonWorkingTimeSNET)
     */
    allowNonWorkingTimeSNET: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Set to `false` to allow dragging tasks outside the client Scheduler.
     * Useful when you want to drag tasks between multiple Scheduler instances
     */
    constrainDragToTimeline: boolean
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#config-disabled)
     */
    disabled: boolean
    /**
     * An object used to configure the internal [DragHelper](https://bryntum.com/products/gantt/docs/api/Core/helper/DragHelper) class
     */
    dragHelperConfig: Partial<DragHelperConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Set to true to enable dragging task while pinning dependent tasks. By default, this behavior is activated
     * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#config-pinSuccessors)
     */
    pinSuccessors: boolean|string
    /**
     * When enabled, the event being dragged always "snaps" to the exact start date that it will have after drop.
     */
    showExactDropPosition: boolean
    /**
     * Specifies whether or not to show tooltip while dragging event
     */
    showTooltip: boolean
    /**
     * The `eventDrag`and `taskDrag` events are normally only triggered when the drag operation will lead to a
     * change in date or assignment. By setting this config to `false`, that logic is bypassed to trigger events
     * for each native mouse move event.
     */
    throttleDragEvent: boolean
    /**
     * A config object to allow customization of the [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip) which tracks
     * the event during a drag operation.
     */
    tip: Partial<TooltipConfig>
    /**
     * Template used to generate drag tooltip contents.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#config-tooltipTemplate)
     * @param {object} data Tooltip data
     * @param {TaskModel} data.taskRecord
     * @param {boolean} data.valid Currently over a valid drop target or not
     * @param {Date} data.startDate New start date
     * @param {Date} data.endDate New end date
     * @returns {string}
     */
    tooltipTemplate: (data: { taskRecord: TaskModel, valid: boolean, startDate: Date, endDate: Date }) => string
    /**
     * An empty function by default, but provided so that you can perform custom validation on
     * the item being dragged. This function is called during the drag and drop process and also after the drop is made.
     * Return true if the new position is valid, false to prevent the drag.
     * @param {TaskModel>} taskRecords An array of tasks being dragged
     * @param {Date} startDate The new start date
     * @param {number} duration The duration of the item being dragged
     * @param {Event} event The event object
     * @returns {boolean|ValidationMessage} `true` if this validation passes, `false` if it does not. Or an object with 2 properties: `valid` -  Boolean `true`/`false` depending on validity, and `message` - String with a custom error message to display when invalid.
     */
    validatorFn: (taskRecords: TaskModel[], startDate: Date, duration: number, event: Event) => boolean|ValidationMessage
    /**
     * `this` reference for the validatorFn
     */
    validatorFnThisObj: object
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Allows user to drag and drop tasks within Gantt, to change their start date.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag)
 */
export class TaskDrag extends DragBase {
    /**
     * Gets or sets special key to activate successor pinning behavior. Supported values are:
     */
    pinSuccessors: boolean|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<TaskDragConfig>} config
     */
    constructor(config?: Partial<TaskDragConfig>);
}

/**
 * Type with configuration options for [TaskDragCreate](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskDragCreate) class.
 */
type TaskDragCreateConfig = {
    type: 'taskDragCreate'|'taskdragcreate'
    /**
     * Set to true to allow resizing to a zero-duration span
     */
    allowResizeToZero: boolean
    /**
     * Use bottom handle when resizing. Only applies when owning client's `direction` is 'vertical'
     */
    bottomHandle: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDragCreate#config-disabled)
     */
    disabled: boolean
    /**
     * The amount of pixels to move pointer/mouse before it counts as a drag operation.
     */
    dragThreshold: number
    /**
     * Number of pixels the drag target must be moved before dragging is considered to have started. Defaults to 2.
     */
    dragTolerance: number
    /**
     * The amount of time (ms) to delay a touch-resize interaction.
     */
    dragTouchStartDelay: number
    /**
     * Automatically shrink virtual handles when available space &lt; handleSize. The virtual handles will
     * decrease towards width/height 1, reserving space between opposite handles to for example leave room for
     * dragging. To configure reserved space, see [reservedSpace](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/EventResize#config-reservedSpace).
     */
    dynamicHandleSize: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    handleSize: number
    /**
     * Use left handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    leftHandle: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDragCreate#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDragCreate#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDragCreate#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Locks the layout during drag resize, overriding the default behaviour that uses the same rendering
     * pathway for drag resize as for already existing events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDragCreate#config-lockLayout)
     */
    lockLayout: boolean
    /**
     * Room in px to leave unoccupied by handles when shrinking them dynamically (see
     * [dynamicHandleSize](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/EventResize#config-dynamicHandleSize)).
     */
    reservedSpace: number
    /**
     * Use right handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    rightHandle: boolean
    /**
     * true to see exact event length during resizing
     */
    showExactResizePosition: boolean
    /**
     * true to show a time tooltip when dragging to create a new event
     */
    showTooltip: boolean
    /**
     * If a tooltip is required to illustrate the resize, specify this as `true`, or a config
     * object for the [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip).
     */
    tip: Tooltip|Partial<TooltipConfig>
    /**
     * A template function returning the content to show during a resize operation.
     * @param {object} context A context object
     * @param {Date} context.startDate New start date
     * @param {Date} context.endDate New end date
     * @param {TimeSpan} context.record The record being resized
     * @param {string} context.startClockHtml Predefined HTML to show the start time
     * @param {string} context.endClockHtml Predefined HTML to show the end time
     * @returns {string} String representing the HTML markup
     */
    tooltipTemplate: (context: { startDate: Date, endDate: Date, record: TimeSpan, startClockHtml: string, endClockHtml: string }) => string
    /**
     * Use top handle when resizing. Only applies when owning client's direction` is 'vertical'
     */
    topHandle: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS on touch devices
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    touchHandleSize: number
    /**
     * An empty function by default, but provided so that you can perform custom validation on
     * the item being resized. Return true if the new duration is valid, false to signal that it is not.
     * @param {object} context The resize context, contains the record &amp; dates.
     * @param {TimeSpan} context.record The record being resized.
     * @param {Date} context.startDate The new start date.
     * @param {Date} context.endDate The new start date.
     * @param {Date} context.originalStartDate Start date before resize
     * @param {Date} context.originalEndDate End date before resize
     * @param {Event} event The browser Event object
     * @returns {boolean}
     */
    validatorFn: (context: { record: TimeSpan, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date }, event: Event) => boolean
    /**
     * `this` reference for the validatorFn
     */
    validatorFnThisObj: object
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDragCreate#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A feature that allows the user to schedule tasks by dragging in the empty parts of the gantt timeline row. Note, this feature is only applicable for unscheduled tasks.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDragCreate)
 */
export class TaskDragCreate extends DragCreateBase {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDragCreate#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [TaskEdit](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskEdit) class.
 */
type TaskEditConfig = {
    type: 'taskEdit'|'taskedit'
    /**
     * What action should be taken when you click outside the editor, `cancel` or `save`
     */
    blurAction: 'cancel'|'save'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * True to show a confirmation dialog before deleting the event
     */
    confirmDelete: boolean
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#config-disabled)
     */
    disabled: boolean
    /**
     * Class to use as the editor. By default it uses [TaskEditor](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor)
     */
    editorClass: typeof Widget
    /**
     * A configuration object applied to the internal [TaskEditor](https://bryntum.com/products/gantt/docs/api/SchedulerPro/widget/TaskEditorBase).
     * Useful to for example change the title of the editor or to set its dimensions in code:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#config-editorConfig)
     */
    editorConfig: Partial<TaskEditorBaseConfig>
    /**
     * A configuration object used to customize the contents of the task editor. Supply a config object or
     * boolean per tab (listed below) to either affects its contents or toggle it on/off.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#config-items)
     */
    items: object
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * How much of a long task bar which is clipped by scrolling must be brought into view
     * to facilitate editing.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#config-minEditSize)
     */
    minEditSize: number
    /**
     * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.
     */
    saveAndCloseOnEnter: boolean
    /**
     * Set to false to not scroll event into view when invoking edit action (e.g. if event is only partially visible)
     */
    scrollIntoView: boolean
    /**
     * When field in task editor is changed, project model normally will trigger `hasChanges` event. If you use
     * this event to handle project changes excessive events might be a problem. Set this flag to true to only
     * trigger single `hasChanges` event after task changes are applied.
     */
    suspendHasChangesEvent: boolean
    /**
     * The event that shall trigger showing the editor. Set to `` or null to disable editing of existing events.
     */
    triggerEvent: string|null
    /**
     * The week start day used in all date fields of the feature editor form by default.
     * 0 means Sunday, 6 means Saturday.
     * Defaults to the locale's week start day.
     */
    weekStartDay: number
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that allows editing tasks using a [TaskEditor](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor), a popup with fields for editing task data.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit)
 */
export class TaskEdit extends SchedulerProTaskEdit {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<TaskEditConfig>} config
     */
    constructor(config?: Partial<TaskEditConfig>);
    /**
     * Shows a [TaskEditor](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor) to edit the passed task. This function is exposed on
     * the Gantt instance and can be called as `gantt.editTask()`.
     * @param {TaskModel} taskRecord Task to edit
     * @param {HTMLElement} element The task element
     */
    editTask(taskRecord: TaskModel, element?: HTMLElement): Promise<any>;
}

/**
 * Type with configuration options for [TaskMenu](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskMenu) class.
 */
type TaskMenuConfig = {
    /**
     * A CSS selector targeting an element, such as an ellipsis icon that when
     * clicked will trigger the menu to show.
     */
    clickTriggerSelector: string
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu#config-disabled)
     */
    disabled: boolean
    /**
     * [Menu](https://bryntum.com/products/gantt/docs/api/Core/widget/Menu) items object containing named child menu items to apply to the feature's
     * provided context menu.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu#config-items)
     */
    items: Record<string, Partial<MenuItemConfig>|boolean|null>
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/gantt/docs/api/Core/feature/base/ContextMenuBase#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * A config which will be applied when creating the Menu component.
     */
    menu: Partial<MenuConfig>
    /**
     * A function called before displaying the menu that allows manipulations of its items.
     * Returning `false` from this function prevents the menu being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu#config-processItems)
     * @param {object} context An object with information about the menu being shown.
     * @param {ContextMenuBase} context.feature A reference to the menu feature which owns this context.
     * @param {Event} context.domEvent The initiating event.
     * @param {Event} context.event DEPRECATED: The initiating event.
     * @param {<Number>} context.point The client `X` and `Y` position of the initiating event.
     * @param {HTMLElement} context.targetElement The target to which the menu is being applied.
     * @param {TaskModel} context.taskRecord The record representing the current task.
     * @param {Column} context.column The current column.
     * @param {<String, (MenuItemConfig} context.items An object containing the [menu item](https://bryntum.com/products/gantt/docs/api/Core/widget/MenuItem) configs keyed by their id.
     * @returns {boolean|void} Returning `false` from this function prevents the menu being shown
     */
    processItems: (context: { feature: ContextMenuBase, domEvent: Event, event: Event, point: number[], targetElement: HTMLElement, taskRecord: TaskModel, column: Column, items: Record<string, Partial<MenuItemConfig>|boolean> }) => boolean|void
    /**
     * Event which is used to show context menu.
     * Available options are: 'contextmenu', 'click' and 'dblclick'.
     * Default value is used from [contextMenuTriggerEvent](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-contextMenuTriggerEvent)
     */
    triggerEvent: 'contextmenu'|'click'|'dblclick'|null
    /**
     * This is a type of the context menu used to generate correct names for methods and events.
     * Should be in camel case. Required to be set in subclass.
     */
    type: string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Displays a context menu for tasks. Items are populated by other features and/or application code.
 * Configure it with `false` to disable it completely. If enabled, [CellMenu](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellMenu) feature
 * is not available. Cell context menu items are handled by this feature.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu)
 */
export class TaskMenu extends EventMenu {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<TaskMenuConfig>} config
     */
    constructor(config?: Partial<TaskMenuConfig>);
}

/**
 * Type with configuration options for [TaskNonWorkingTime](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskNonWorkingTime) class.
 */
type TaskNonWorkingTimeConfig = {
    type: 'taskNonWorkingTime'|'tasknonworkingtime'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#config-disabled)
     */
    disabled: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: string
    /**
     * Rendering mode, one of:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#config-mode)
     */
    mode: 'row'|'bar'|'both'
    /**
     * Config that allows rendering to take into account the Gantt [fillTicks](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-fillTicks) config:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#config-respectFillTicks)
     */
    respectFillTicks: boolean
    /**
     * A template function used to generate contents for a tooltip when hovering non-working time intervals
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#config-tooltipTemplate)
     * @param {object} data Tooltip data
     * @param {TaskModel} data.taskRecord The taskRecord
     * @param {Date} data.startDate The start date of the-non working interval
     * @param {Date} data.endDate The end date of the non-working interval
     * @param {string} data.name The name of the non-working interval
     * @param {string} data.cls The cls of the non-working interval
     * @param {string} data.iconCls The iconCls of the non-working interval
     * @returns {string|DomConfig|DomConfig>}
     */
    tooltipTemplate: (data: { taskRecord: TaskModel, startDate: Date, endDate: Date, name: string, cls: string, iconCls: string }) => string|DomConfig|DomConfig[]
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature highlighting the non-working time intervals for tasks, based on their [calendar](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-calendar).
 * If a task has no calendar defined, the project's calendar will be used. The non-working time interval can also be
 * recurring. You can find a live example showing how to achieve this in the [Task Calendars Demo](../examples/calendars/).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime)
 */
export class TaskNonWorkingTime extends InstancePlugin {
    /**
     * Rendering mode, one of:
     */
    mode: 'row'|'bar'|'both'
    /**
     * Config that allows rendering to take into account the Gantt [fillTicks](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-fillTicks) config:
     */
    respectFillTicks: boolean
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskNonWorkingTime#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<TaskNonWorkingTimeConfig>} config
     */
    constructor(config?: Partial<TaskNonWorkingTimeConfig>);
}

/**
 * Type with configuration options for [TaskResize](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskResize) class.
 */
type TaskResizeConfig = {
    type: 'taskResize'|'taskresize'
    /**
     * Set to true to allow resizing to a zero-duration span
     */
    allowResizeToZero: boolean
    /**
     * Use bottom handle when resizing. Only applies when owning client's `direction` is 'vertical'
     */
    bottomHandle: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize#config-disabled)
     */
    disabled: boolean
    /**
     * The amount of pixels to move pointer/mouse before it counts as a drag operation.
     */
    dragThreshold: number
    /**
     * The amount of time (ms) to delay a touch-resize interaction.
     */
    dragTouchStartDelay: number
    /**
     * Automatically shrink virtual handles when available space &lt; handleSize. The virtual handles will
     * decrease towards width/height 1, reserving space between opposite handles to for example leave room for
     * dragging. To configure reserved space, see [reservedSpace](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/EventResize#config-reservedSpace).
     */
    dynamicHandleSize: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    handleSize: number
    /**
     * Use left handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    leftHandle: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Locks the layout during drag resize, overriding the default behaviour that uses the same rendering
     * pathway for drag resize as for already existing events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize#config-lockLayout)
     */
    lockLayout: boolean
    /**
     * Set to true to enable resizing task while pinning dependent tasks. By default, this behavior is activated
     * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize#config-pinSuccessors)
     */
    pinSuccessors: boolean|string
    /**
     * Room in px to leave unoccupied by handles when shrinking them dynamically (see
     * [dynamicHandleSize](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/EventResize#config-dynamicHandleSize)).
     */
    reservedSpace: number
    /**
     * Use right handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    rightHandle: boolean
    /**
     * true to see exact event length during resizing
     */
    showExactResizePosition: boolean
    /**
     * `false` to not show a tooltip while resizing
     */
    showTooltip: boolean
    /**
     * If a tooltip is required to illustrate the resize, specify this as `true`, or a config
     * object for the [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip).
     */
    tip: Tooltip|Partial<TooltipConfig>
    /**
     * A template function returning the content to show during a resize operation.
     * @param {object} context A context object
     * @param {Date} context.startDate New start date
     * @param {Date} context.endDate New end date
     * @param {TimeSpan} context.record The record being resized
     * @param {string} context.startClockHtml Predefined HTML to show the start time
     * @param {string} context.endClockHtml Predefined HTML to show the end time
     * @returns {string} String representing the HTML markup
     */
    tooltipTemplate: (context: { startDate: Date, endDate: Date, record: TimeSpan, startClockHtml: string, endClockHtml: string }) => string
    /**
     * Use top handle when resizing. Only applies when owning client's direction` is 'vertical'
     */
    topHandle: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS on touch devices
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    touchHandleSize: number
    /**
     * An empty function by default, but provided so that you can perform custom validation on
     * the item being resized. Return true if the new duration is valid, false to signal that it is not.
     * @param {object} context The resize context, contains the record &amp; dates.
     * @param {TimeSpan} context.record The record being resized.
     * @param {Date} context.startDate The new start date.
     * @param {Date} context.endDate The new start date.
     * @param {Date} context.originalStartDate Start date before resize
     * @param {Date} context.originalEndDate End date before resize
     * @param {Event} event The browser Event object
     * @returns {boolean}
     */
    validatorFn: (context: { record: TimeSpan, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date }, event: Event) => boolean
    /**
     * `this` reference for the validatorFn
     */
    validatorFnThisObj: object
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that allows resizing a task by dragging its end date. Resizing a task by dragging its start date is not allowed.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize)
 */
export class TaskResize extends EventResize {
    /**
     * Gets or sets special key to activate successor pinning behavior. Supported values are:
     */
    pinSuccessors: boolean|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<TaskResizeConfig>} config
     */
    constructor(config?: Partial<TaskResizeConfig>);
}

/**
 * Type with configuration options for [TaskSegmentDrag](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskSegmentDrag) class.
 */
type TaskSegmentDragConfig = {
    type: 'taskSegmentDrag'|'tasksegmentdrag'
    /**
     * Whether to allow the SNET constraint generated by an event drag to be placed in non-
     * working time. When `true` and the event is dragged so that its `startDate` is in non-working
     * time, the SNET constraint date will be kept on the non-working date where the task is dropped.
     * When `false`, snaps the SNET date to working time in the same way as the `startDate`. The
     * `startDate` is not affected by this config.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#config-allowNonWorkingTimeSNET)
     */
    allowNonWorkingTimeSNET: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Set to `false` to allow dragging tasks outside the client Scheduler.
     * Useful when you want to drag tasks between multiple Scheduler instances
     */
    constrainDragToTimeline: boolean
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#config-disabled)
     */
    disabled: boolean
    /**
     * An object used to configure the internal [DragHelper](https://bryntum.com/products/gantt/docs/api/Core/helper/DragHelper) class
     */
    dragHelperConfig: Partial<DragHelperConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Set to true to enable dragging task while pinning dependent tasks. By default, this behavior is activated
     * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#config-pinSuccessors)
     */
    pinSuccessors: boolean|string
    /**
     * When enabled, the event being dragged always "snaps" to the exact start date that it will have after drop.
     */
    showExactDropPosition: boolean
    /**
     * Specifies whether or not to show tooltip while dragging event
     */
    showTooltip: boolean
    /**
     * The `eventDrag`and `taskDrag` events are normally only triggered when the drag operation will lead to a
     * change in date or assignment. By setting this config to `false`, that logic is bypassed to trigger events
     * for each native mouse move event.
     */
    throttleDragEvent: boolean
    /**
     * A config object to allow customization of the [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip) which tracks
     * the event during a drag operation.
     */
    tip: Partial<TooltipConfig>
    /**
     * Template used to generate drag tooltip contents.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#config-tooltipTemplate)
     * @param {object} data Tooltip data
     * @param {TaskModel} data.taskRecord
     * @param {boolean} data.valid Currently over a valid drop target or not
     * @param {Date} data.startDate New start date
     * @param {Date} data.endDate New end date
     * @returns {string}
     */
    tooltipTemplate: (data: { taskRecord: TaskModel, valid: boolean, startDate: Date, endDate: Date }) => string
    /**
     * An empty function by default, but provided so that you can perform custom validation on
     * the item being dragged. This function is called during the drag and drop process and also after the drop is made.
     * Return true if the new position is valid, false to prevent the drag.
     * @param {TaskModel>} taskRecords An array of tasks being dragged
     * @param {Date} startDate The new start date
     * @param {number} duration The duration of the item being dragged
     * @param {Event} event The event object
     * @returns {boolean|ValidationMessage} `true` if this validation passes, `false` if it does not. Or an object with 2 properties: `valid` -  Boolean `true`/`false` depending on validity, and `message` - String with a custom error message to display when invalid.
     */
    validatorFn: (taskRecords: TaskModel[], startDate: Date, duration: number, event: Event) => boolean|ValidationMessage
    /**
     * `this` reference for the validatorFn
     */
    validatorFnThisObj: object
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Allows user to drag and drop task segments, to change their start date.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag)
 */
export class TaskSegmentDrag extends TaskDrag {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [TaskSegmentResize](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskSegmentResize) class.
 */
type TaskSegmentResizeConfig = {
    type: 'taskSegmentResize'|'tasksegmentresize'
    /**
     * Set to true to allow resizing to a zero-duration span
     */
    allowResizeToZero: boolean
    /**
     * Use bottom handle when resizing. Only applies when owning client's `direction` is 'vertical'
     */
    bottomHandle: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentResize#config-disabled)
     */
    disabled: boolean
    /**
     * The amount of pixels to move pointer/mouse before it counts as a drag operation.
     */
    dragThreshold: number
    /**
     * The amount of time (ms) to delay a touch-resize interaction.
     */
    dragTouchStartDelay: number
    /**
     * Automatically shrink virtual handles when available space &lt; handleSize. The virtual handles will
     * decrease towards width/height 1, reserving space between opposite handles to for example leave room for
     * dragging. To configure reserved space, see [reservedSpace](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/EventResize#config-reservedSpace).
     */
    dynamicHandleSize: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    handleSize: number
    /**
     * Use left handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    leftHandle: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentResize#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentResize#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentResize#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Locks the layout during drag resize, overriding the default behaviour that uses the same rendering
     * pathway for drag resize as for already existing events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentResize#config-lockLayout)
     */
    lockLayout: boolean
    /**
     * Room in px to leave unoccupied by handles when shrinking them dynamically (see
     * [dynamicHandleSize](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/EventResize#config-dynamicHandleSize)).
     */
    reservedSpace: number
    /**
     * Use right handle when resizing. Only applies when owning client's `direction` is 'horizontal'
     */
    rightHandle: boolean
    /**
     * true to see exact event length during resizing
     */
    showExactResizePosition: boolean
    /**
     * `false` to not show a tooltip while resizing
     */
    showTooltip: boolean
    /**
     * If a tooltip is required to illustrate the resize, specify this as `true`, or a config
     * object for the [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip).
     */
    tip: Tooltip|Partial<TooltipConfig>
    /**
     * A template function returning the content to show during a resize operation.
     * @param {object} context A context object
     * @param {Date} context.startDate New start date
     * @param {Date} context.endDate New end date
     * @param {TimeSpan} context.record The record being resized
     * @param {string} context.startClockHtml Predefined HTML to show the start time
     * @param {string} context.endClockHtml Predefined HTML to show the end time
     * @returns {string} String representing the HTML markup
     */
    tooltipTemplate: (context: { startDate: Date, endDate: Date, record: TimeSpan, startClockHtml: string, endClockHtml: string }) => string
    /**
     * Use top handle when resizing. Only applies when owning client's direction` is 'vertical'
     */
    topHandle: boolean
    /**
     * Resizing handle size to use instead of that determined by CSS on touch devices
     * @deprecated Since 5.2.7. The handle size is determined from responsive CSS. Will be removed in 6.0
     */
    touchHandleSize: number
    /**
     * An empty function by default, but provided so that you can perform custom validation on
     * the item being resized. Return true if the new duration is valid, false to signal that it is not.
     * @param {object} context The resize context, contains the record &amp; dates.
     * @param {TimeSpan} context.record The record being resized.
     * @param {Date} context.startDate The new start date.
     * @param {Date} context.endDate The new start date.
     * @param {Date} context.originalStartDate Start date before resize
     * @param {Date} context.originalEndDate End date before resize
     * @param {Event} event The browser Event object
     * @returns {boolean}
     */
    validatorFn: (context: { record: TimeSpan, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date }, event: Event) => boolean
    /**
     * `this` reference for the validatorFn
     */
    validatorFnThisObj: object
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentResize#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that allows resizing a task segment by dragging its end.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentResize)
 */
export class TaskSegmentResize extends EventSegmentResize {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskSegmentResize#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [TaskTooltip](https://bryntum.com/products/grid/docs/api/Gantt/feature/TaskTooltip) class.
 */
type TaskTooltipConfig = {
    type: 'taskTooltip'|'tasktooltip'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-allowOver)
     */
    allowOver: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-autoClose)
     */
    autoClose: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Specify true to have tooltip updated when mouse moves, if you for example want to display date at mouse
     * position.
     */
    autoUpdate: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * Precision of displayed duration, defaults to use [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-durationDisplayPrecision).
     * Specify an integer value to override that setting, or `false` to use raw value
     */
    decimalPrecision: number|boolean
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: Partial<ContainerItemConfig>
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-disabled)
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A config [object](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-hideDelay)
     */
    hideDelay: number
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-listeners)
     */
    listeners: object
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/gantt/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/gantt/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/gantt/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Template (a function accepting task data and returning a string) used to display info in the tooltip.
     * The template will be called with an object as with fields as detailed below
     * @param {object} data Tooltip data
     * @param {TaskModel} data.taskRecord Task record
     * @param {string} data.startClockHtml Predefined HTML to show the start time
     * @param {string} data.endClockHtml Predefined HTML to show the end time
     * @returns {string} String representing the HTML markup
     */
    template: (data: { taskRecord: TaskModel, startClockHtml: string, endClockHtml: string }) => string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a tooltip is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Tooltip} event.source The tooltip being shown.
     * @param {SchedulerEventModel} event.source.eventRecord The event record.
     */
    onBeforeShow: ((event: { source: { eventRecord: SchedulerEventModel } }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a tooltip is shown.
     * @param {object} event Event object
     * @param {Tooltip} event.source The tooltip.
     * @param {SchedulerEventModel} event.source.eventRecord The event record.
     */
    onShow: ((event: { source: { eventRecord: SchedulerEventModel } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * This feature displays a task tooltip on mouse hover. The template of the tooltip is customizable
 * with the [template](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#config-template) function.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip)
 */
export class TaskTooltip extends TooltipBase {
    /**
     * Precision of displayed duration, defaults to use [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-durationDisplayPrecision).
     * Specify an integer value to override that setting, or `false` to use raw value
     */
    decimalPrecision: number|boolean
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<TaskTooltipConfig>} config
     */
    constructor(config?: Partial<TaskTooltipConfig>);
}

/**
 * Type with configuration options for [TreeGroup](https://bryntum.com/products/grid/docs/api/Gantt/feature/TreeGroup) class.
 */
type TreeGroupConfig = {
    type: 'treeGroup'|'treegroup'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup#config-disabled)
     */
    disabled: boolean
    /**
     * True to hide grouped columns. Only supported when using String to define levels.
     */
    hideGroupedColumns: boolean
    /**
     * An array of model field names or functions used to determine the levels in the resulting tree.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup#config-levels)
     */
    levels: (string|((model: Model) => any))[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * CSS class to apply to the generated parents.
     */
    parentCls: string
    /**
     * A function letting you format the text shown in the generated parent group levels. This method will be provided
     * with the value produced by the column representing the grouped level. Each column's renderer method will be
     * provided an extra `isTreeGroup` param to indicate that the value will be used for a generated parent. `cellElement`
     * and other DOM specific args will be in the context of the tree column.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup#config-parentRenderer)
     * @param {object} data The rendering data representing the generated tree parent record
     * @param {string} data.field The field representing this group level (e.g. 'priority')
     * @param {*} data.value The value representing this group level (e.g. 'high')
     * @param {Column} data.column The value representing this group level (e.g. 'high')
     * @param {Model} data.record The first record for this parent
     * @returns {string}
     */
    parentRenderer: (data: { field: string, value: any, column: Column, record: Model }) => string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Extends Grid's [TreeGroup](https://bryntum.com/products/gantt/docs/api/Grid/feature/TreeGroup) (follow the link for more info) feature to enable using it with Gantt.
 * Allows generating a new task tree where parents are determined by the values of specified task fields/functions:
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup)
 */
export class TreeGroup extends GridTreeGroup {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [Versions](https://bryntum.com/products/grid/docs/api/Gantt/feature/Versions) class.
 */
type VersionsConfig = {
    type: 'versions'
    /**
     * The interval between autosaves, in minutes. To disable autosave, set the interval to zero.
     * To save on the hour, use 'hourly'.
     */
    autoSaveInterval: 'hourly'|number
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Versions#config-disabled)
     */
    disabled: boolean
    /**
     * The set of Model types whose subtypes should be recorded as the base type in the change log. For example,
     * by default if a subclassed TaskModelEx exists and an instance of one is updated, it will be recorded in the
     * changelog as a TaskModel.
     */
    knownBaseTypes: any[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Versions#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Versions#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Versions#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Optional subclass of [ChangeLogTransactionModel](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/changelog/ChangeLogTransactionModel) to use instead of [ChangeLogTransactionModel](#SchedulerPro/model/changelog/ChangeLogTransactionModel).
     * Use this to extend ChangeLogTransactionModel to add any additional fields your application needs.
     */
    transactionModelClass: typeof ChangeLogTransactionModel
    /**
     * Optional subclass of [VersionModel](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/VersionModel) to use instead of [VersionModel](#SchedulerPro/model/VersionModel).
     * Use this to extend VersionModel to add any additional fields your application needs.
     */
    versionModelClass: typeof VersionModel
    /**
     * Fires before the Versions feature attempts to load the content for a specific version.
     * To handle populating the content yourself instead, listen for this event, set the `content` field
     * of the `context` object passed to the event listener, and return `false` from your
     * event listener.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Versions#event-beforeLoadVersionContent)
     * @param {object} event Event object
     * @param {object} event.context The event context
     * @param {boolean} event.context.version The [VersionModel](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/VersionModel) for which content is requested
     * @param {object} event.context.content Context field to receive the version content. Populate this field and return `false` in order to implement content loading. Object structure should match [toJSON](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#function-toJSON).
     */
    onBeforeLoadVersionContent: ((event: { context: { version: boolean, content: object } }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Versions#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Captures versions (snapshots) of the active project, including a detailed log of the changes new in each version.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Versions)
 */
export class Versions extends SchedulerProVersions {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/Versions#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<VersionsConfig>} config
     */
    constructor(config?: Partial<VersionsConfig>);
}

/**
 * Type with configuration options for [MspExport](https://bryntum.com/products/grid/docs/api/Gantt/feature/export/MspExport) class.
 */
type MspExportConfig = {
    type: 'mspExport'|'mspexport'
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Defines how dates are formatted for MS Project. Information about formats can be found in [DateHelper](https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper)
     */
    dateFormat: string
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport#config-disabled)
     */
    disabled: boolean
    /**
     * Name of the exported file (including extension)
     */
    filename: string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Defines the version used for MSProject (2013 or 2019)
     */
    msProjectVersion: number
    /**
     * Specify `true` to replace commas in resource names with semicolons.
     */
    replaceResourceNameCommas: boolean
    /**
     * Defines how time is formatted for MSProject. Information about formats can be found in [DateHelper](https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper)
     */
    timeFormat: string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when project data is collected to an object
     * that is going to be exported as XML text.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport#event-dataCollected)
     * @param {object} event Event object
     * @param {object} event.config Export config
     * @param {object} event.data Collected data to export
     */
    onDataCollected: ((event: { config: object, data: object }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A feature that allows exporting Gantt to Microsoft Project without involving a server.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport)
 */
export class MspExport extends InstancePlugin {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when project data is collected to an object
     * that is going to be exported as XML text.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/MspExport#event-dataCollected)
     * @param {object} event Event object
     * @param {object} event.config Export config
     * @param {object} event.data Collected data to export
     */
    onDataCollected: ((event: { config: object, data: object }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<MspExportConfig>} config
     */
    constructor(config?: Partial<MspExportConfig>);
    /**
     * Generates and downloads the .XML file.
     * @param {object} config Optional configuration object, which overrides the initial settings of the feature/exporter.
     */
    export(config?: {
        filename?: string
    }): void;
}

/**
 * Type with configuration options for [PdfExport](https://bryntum.com/products/grid/docs/api/Gantt/feature/export/PdfExport) class.
 */
type PdfExportConfig = {
    type: 'pdfExport'|'pdfexport'
    /**
     * Set to true to align row top to the page top on every exported page. Only applied to multipage export.
     */
    alignRows: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * Export server will navigate to this url first and then will change page content to whatever client sent.
     * This option is useful with react dev server, which uses a strict CORS policy.
     */
    clientURL: string
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-disabled)
     */
    disabled: boolean
    /**
     * Enables direct rendering of the component content which significantly improves performance. To enable
     * old export mode set this flag to false.
     */
    enableDirectRendering: boolean
    /**
     * A config object to apply to the [SchedulerExportDialog](https://bryntum.com/products/gantt/docs/api/Scheduler/view/export/SchedulerExportDialog) widget.
     */
    exportDialog: Partial<SchedulerExportDialogConfig>
    /**
     * A message to be shown when Export feature is performing export.
     */
    exportMask: string
    /**
     * A message to be shown when export is almost done.
     */
    exportProgressMask: string
    /**
     * URL of the print server.
     */
    exportServer: string
    /**
     * Type of the exporter to use. Should be one of the configured [exporters](https://bryntum.com/products/gantt/docs/api/Grid/feature/export/PdfExport#config-exporters)
     */
    exporterType: 'singlepage'|'multipage'|'multipagevertical'|string
    /**
     * List of exporter classes to use in export feature
     */
    exporters: Exporter[]
    /**
     * An object containing the Fetch options to pass to the export server request. Use this to control if
     * credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).
     */
    fetchOptions: FetchOptions
    /**
     * Format of the exported file, either `pdf` or `png`.
     */
    fileFormat: 'pdf'|'png'
    /**
     * Name of the exported file.
     */
    fileName: string
    /**
     * A template function used to generate a page footer. It is passed an object with ´currentPage´ and `totalPages´ properties.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-footerTpl)
     * @param {object} data Data object
     * @param {number} data.currentPage Current page number
     * @param {number} data.totalPages Tolal pages count
     * @returns {string}
     */
    footerTpl: (data: { currentPage: number, totalPages: number }) => string
    /**
     * A template function used to generate a page header. It is passed an object with ´currentPage´ and `totalPages´ properties.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-headerTpl)
     * @param {object} data Data object
     * @param {number} data.currentPage Current page number
     * @param {number} data.totalPages Tolal pages count
     * @returns {string}
     */
    headerTpl: (data: { currentPage: number, totalPages: number }) => string
    /**
     * When true links are converted to absolute by combining current window location (with replaced origin) with
     * resource link.
     * When false links are converted by combining new origin with resource link (for angular)
     */
    keepPathName: boolean
    /**
     * By default, subGrid width is changed to fit all exported columns. To keep certain subGrid size specify it
     * in the following form:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-keepRegionSizes)
     */
    keepRegionSizes: Record<string, boolean>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * When true, page will attempt to download generated file.
     */
    openAfterExport: boolean
    /**
     * False to open in the current tab, true - in a new tab
     */
    openInNewTab: boolean
    /**
     * Orientation. Options are `portrait` and `landscape`.
     */
    orientation: 'portrait'|'landscape'
    /**
     * Export paper format. Available options are A1...A5, Legal, Letter.
     */
    paperFormat: 'A1'|'A2'|'A3'|'A4'|'A5'|'Legal'|'Letter'
    /**
     * Exported time span range end. Used with `daterange` config of the [scheduleRange](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/export/PdfExport#config-scheduleRange)
     */
    rangeEnd: Date
    /**
     * Exported time span range start. Used with `daterange` config of the [scheduleRange](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/export/PdfExport#config-scheduleRange)
     */
    rangeStart: Date
    /**
     * Set to true to show column headers on every page. This will also set [alignRows](https://bryntum.com/products/gantt/docs/api/Grid/feature/export/PdfExport#config-alignRows) to true.
     * Only applies to MultiPageVertical exporter.
     */
    repeatHeader: boolean
    /**
     * Specifies which rows to export. `all` for complete set of rows, `visible` for only rows currently visible.
     */
    rowsRange: 'all'|'visible'
    /**
     * Specifies how to export time span.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-scheduleRange)
     */
    scheduleRange: 'completeview'|'currentview'|'daterange'
    /**
     * Set to true to receive binary file from the server instead of download link.
     */
    sendAsBinary: boolean
    /**
     * Set to `false` to not show Toast message on export error.
     */
    showErrorToast: boolean
    /**
     * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.
     * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#config-translateURLsToAbsolute)
     */
    translateURLsToAbsolute: boolean|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fires when export progress changes
     * @param {object} event Event object
     * @param {number} event.progress Current progress, 0-100
     * @param {string} event.text Optional text to show
     */
    onExportStep: ((event: { progress: number, text: string }) => void)|string
}

/**
 * Generates PDF/PNG files from the Gantt component.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport)
 */
export class PdfExport extends SchedulerPdfExport {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
}

/**
 * Type with configuration options for [Print](https://bryntum.com/products/grid/docs/api/Gantt/feature/export/Print) class.
 */
type PrintConfig = {
    type: 'print'
    /**
     * Set to true to align row top to the page top on every exported page. Only applied to multipage export.
     */
    alignRows: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-disabled)
     */
    disabled: boolean
    /**
     * Enables direct rendering of the component content which significantly improves performance. To enable
     * old export mode set this flag to false.
     */
    enableDirectRendering: boolean
    /**
     * A config object to apply to the [SchedulerExportDialog](https://bryntum.com/products/gantt/docs/api/Scheduler/view/export/SchedulerExportDialog) widget.
     */
    exportDialog: Partial<SchedulerExportDialogConfig>
    /**
     * A message to be shown when Export feature is performing export.
     */
    exportMask: string
    /**
     * A message to be shown when export is almost done.
     */
    exportProgressMask: string
    /**
     * Type of the exporter to use. Should be one of the configured [exporters](https://bryntum.com/products/gantt/docs/api/Grid/feature/export/PdfExport#config-exporters)
     */
    exporterType: 'singlepage'|'multipage'|'multipagevertical'|string
    /**
     * List of exporter classes to use in export feature
     */
    exporters: Exporter[]
    /**
     * A template function used to generate a page footer. It is passed an object with ´currentPage´ and `totalPages´ properties.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-footerTpl)
     * @param {object} data Data object
     * @param {number} data.currentPage Current page number
     * @param {number} data.totalPages Tolal pages count
     * @returns {string}
     */
    footerTpl: (data: { currentPage: number, totalPages: number }) => string
    /**
     * A template function used to generate a page header. It is passed an object with ´currentPage´ and `totalPages´ properties.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-headerTpl)
     * @param {object} data Data object
     * @param {number} data.currentPage Current page number
     * @param {number} data.totalPages Tolal pages count
     * @returns {string}
     */
    headerTpl: (data: { currentPage: number, totalPages: number }) => string
    /**
     * When true links are converted to absolute by combining current window location (with replaced origin) with
     * resource link.
     * When false links are converted by combining new origin with resource link (for angular)
     */
    keepPathName: boolean
    /**
     * By default, subGrid width is changed to fit all exported columns. To keep certain subGrid size specify it
     * in the following form:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-keepRegionSizes)
     */
    keepRegionSizes: Record<string, boolean>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Orientation. Options are `portrait` and `landscape`.
     */
    orientation: 'portrait'|'landscape'
    /**
     * Export paper format. Available options are A1...A5, Legal, Letter.
     */
    paperFormat: 'A1'|'A2'|'A3'|'A4'|'A5'|'Legal'|'Letter'
    /**
     * Exported time span range end. Used with `daterange` config of the [scheduleRange](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/export/PdfExport#config-scheduleRange)
     */
    rangeEnd: Date
    /**
     * Exported time span range start. Used with `daterange` config of the [scheduleRange](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/export/PdfExport#config-scheduleRange)
     */
    rangeStart: Date
    /**
     * Set to true to show column headers on every page. This will also set [alignRows](https://bryntum.com/products/gantt/docs/api/Grid/feature/export/PdfExport#config-alignRows) to true.
     * Only applies to MultiPageVertical exporter.
     */
    repeatHeader: boolean
    /**
     * Specifies which rows to export. `all` for complete set of rows, `visible` for only rows currently visible.
     */
    rowsRange: 'all'|'visible'
    /**
     * Specifies how to export time span.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-scheduleRange)
     */
    scheduleRange: 'completeview'|'currentview'|'daterange'
    /**
     * Set to `false` to not show Toast message on export error.
     */
    showErrorToast: boolean
    /**
     * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.
     * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#config-translateURLsToAbsolute)
     */
    translateURLsToAbsolute: boolean|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onDisable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {InstancePlugin} event.source
     */
    onEnable: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fires when export progress changes
     * @param {object} event Event object
     * @param {number} event.progress Current progress, 0-100
     * @param {string} event.text Optional text to show
     */
    onExportStep: ((event: { progress: number, text: string }) => void)|string
}

/**
 * Allows printing Gantt contents using browser print dialog.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print)
 */
export class Print extends PdfExport {
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/Print#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * This method is called when IFrame is loaded with all the HTML/CSS and is about to be printed. Use it to take
     * control over the page contents.
     * @param {HTMLIFrameElement} iframe
     */
    onPrintIFrameLoad(iframe: HTMLIFrameElement): Promise<void>;
    /**
     * Starts the print process. Accepts a config object which overrides any default configs.
     * <strong>NOTE</strong> Component should not be interacted with when print is in progress
     * @param {object} config
     */
    print(config: object): Promise<any>;
    /**
     * Shows the [print dialog](https://bryntum.com/products/gantt/docs/api/Grid/view/export/ExportDialog)
     */
    showPrintDialog(): Promise<any>;
}

/**
 * Type with configuration options for [MultiPageExporter](https://bryntum.com/products/grid/docs/api/Gantt/feature/export/exporter/MultiPageExporter) class.
 */
type MultiPageExporterConfig = {
    type: 'multipage'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * When true links are converted to absolute by combining current window location (with replaced origin) with
     * resource link.
     * When false links are converted by combining new origin with resource link (for angular)
     */
    keepPathName: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.
     * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter#config-translateURLsToAbsolute)
     */
    translateURLsToAbsolute: boolean|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A multiple page exporter. Used by the [PdfExport](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport) feature to export to multiple pages. You
 * do not need to use this class directly.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter)
 */
export class MultiPageExporter extends SchedulerMultiPageExporter {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [MultiPageVerticalExporter](https://bryntum.com/products/grid/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter) class.
 */
type MultiPageVerticalExporterConfig = {
    type: 'multipagevertical'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * When true links are converted to absolute by combining current window location (with replaced origin) with
     * resource link.
     * When false links are converted by combining new origin with resource link (for angular)
     */
    keepPathName: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.
     * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter#config-translateURLsToAbsolute)
     */
    translateURLsToAbsolute: boolean|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A vertical multiple page exporter. Used by the [PdfExport](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport) feature to export to multiple
 * pages. Content will be scaled in a horizontal direction to fit the page.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter)
 */
export class MultiPageVerticalExporter extends SchedulerMultiPageVerticalExporter {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/MultiPageVerticalExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [SinglePageExporter](https://bryntum.com/products/grid/docs/api/Gantt/feature/export/exporter/SinglePageExporter) class.
 */
type SinglePageExporterConfig = {
    type: 'singlepage'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Set to true to center content horizontally on the page
     */
    centerContentHorizontally: boolean
    /**
     * When true links are converted to absolute by combining current window location (with replaced origin) with
     * resource link.
     * When false links are converted by combining new origin with resource link (for angular)
     */
    keepPathName: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.
     * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter#config-translateURLsToAbsolute)
     */
    translateURLsToAbsolute: boolean|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * A single page exporter. Used by the [PdfExport](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/PdfExport) feature to export to single page. Content
 * will be scaled in both directions to fit the page.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter)
 */
export class SinglePageExporter extends SchedulerSinglePageExporter {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/feature/export/exporter/SinglePageExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [AssignmentModel](https://bryntum.com/products/grid/docs/api/Gantt/model/AssignmentModel) class.
 */
type AssignmentModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * A numeric value indicating the effort contributed by the assigned [resource](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel#field-resource) to the
     * [event](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel#field-event).
     */
    effort: number
    /**
     * Id for event to assign. Note that after load it will be populated with the actual event.
     */
    event: string|number|TaskModel
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel#config-id)
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Id for resource to assign to. Note that after load it will be populated with the actual resource.
     */
    resource: string|number|ResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * The numeric, percent-like value, indicating what is the "contribution level"
     * of the resource availability to the task.
     * Number 100, means that the assigned resource spends 100% of its working time to the task.
     * Number 50 means that the resource spends only half of its available time for the assigned task.
     */
    units: number
}

/**
 * This class represents a single assignment of a [resource](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel) to a
 * [task](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel) in your gantt chart.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel)
 */
export class AssignmentModel extends SchedulerProAssignmentModel {
    /**
     * A numeric value indicating the effort contributed by the assigned [resource](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel#field-resource) to the
     * [event](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel#field-event).
     */
    effort: number
    /**
     * Id for event to assign. Note that after load it will be populated with the actual event.
     */
    event: string|number|TaskModel
    /**
     * Id for resource to assign to. Note that after load it will be populated with the actual resource.
     */
    resource: string|number|ResourceModel
    /**
     * The numeric, percent-like value, indicating what is the "contribution level"
     * of the resource availability to the task.
     * Number 100, means that the assigned resource spends 100% of its working time to the task.
     * Number 50 means that the resource spends only half of its available time for the assigned task.
     */
    units: number
}

/**
 * Type with configuration options for [Baseline](https://bryntum.com/products/grid/docs/api/Gantt/model/Baseline) class.
 */
type BaselineConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-cls)
     */
    cls: DomClassList|string|string[]|object
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-durationUnit)
     */
    durationUnit: DurationUnit
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-endDate)
     */
    endDate: string|Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration) and [durationUnit](#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-id)
     */
    id: string|number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-readOnly)
     */
    readOnly: boolean
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-startDate)
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-style)
     */
    style: string
    /**
     * The owning Task of the Baseline
     */
    task: TaskModel
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline#config-timeZone)
     */
    timeZone: string|number|null
}

/**
 * This class represents a baseline of a Task.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline)
 */
export class Baseline extends TimeSpan {
    /**
     * Baseline duration variance in the task's duration unit.
     */
    durationVariance: Duration
    /**
     * Baseline end variance in the task's duration unit.
     */
    endVariance: Duration
    /**
     * Baseline start variance in the task's duration unit.
     */
    startVariance: Duration
    /**
     * The owning Task of the Baseline
     */
    task: TaskModel
    /**
     * Converts this baseline to a milestone (start date will match the end date).
     */
    convertToMilestone(): Promise<void>;
    /**
     * Converts a milestone baseline to a regular baseline with a duration of 1 (keeping current `durationUnit`).
     */
    convertToRegular(): Promise<void>;
}

/**
 * Type with configuration options for [CalendarIntervalModel](https://bryntum.com/products/grid/docs/api/Gantt/model/CalendarIntervalModel) class.
 */
type CalendarIntervalModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * A CSS class to add to the element visualizing this interval, when using the NonWorkingTime feature.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel#config-cls)
     */
    cls: string
    /**
     * The end date of the fixed (not recurrent) time interval.
     */
    endDate: Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A CSS class used to add an icon to the element visualizing this interval, when using the NonWorkingTime feature.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel#config-iconCls)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel#config-id)
     */
    id: string|number
    /**
     * The "is working" flag, which defines what kind of interval this is - either working or non-working. Default value is `false`,
     * denoting non-working intervals.
     */
    isWorking: boolean
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The priority of the interval. By default, recurrent intervals are assigned the priority 20 and static - priority 30.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel#config-priority)
     */
    priority: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * The end date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent [later](http://bunkat.github.io/later/) library.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel#config-recurrentEndDate)
     */
    recurrentEndDate: string
    /**
     * The start date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent [later](http://bunkat.github.io/later/) library.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel#config-recurrentStartDate)
     */
    recurrentStartDate: string
    /**
     * The start date of the fixed (not recurrent) time interval.
     */
    startDate: Date
}

/**
 * This class represents a calendar interval in the Gantt calendar.
 * Every interval can be either recurrent (regularly repeating in time) or static.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarIntervalModel)
 */
export class CalendarIntervalModel extends SchedulerProCalendarIntervalModel {
}

/**
 * Type with configuration options for [CalendarModel](https://bryntum.com/products/grid/docs/api/Gantt/model/CalendarModel) class.
 */
type CalendarModelConfig = {
    /**
     * A flag, indicating whether the duration calculation should adjust the result to DST time shift.
     * By default, this flag is ignored and the corresponding flag from the
     * [ProjectModel](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#config-adjustDurationToDST) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel#config-adjustDurationToDST)
     */
    adjustDurationToDST: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * A CSS class to add to calendar interval elements rendered in the UI.
     */
    cls: string
    /**
     * Start expanded or not
     */
    expanded: boolean
    /**
     * A CSS class defining an icon to show in non-working time elements rendered in the UI.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel#config-id)
     */
    id: string|number
    /**
     * If using the [timeZone](https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone) config, you can set this to `true` to
     * *not* convert this calendar to the specified time zone.
     */
    ignoreTimeZone: boolean
    /**
     * [Intervals](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel) collection of the calendar. Accepts an array
     * as its input, which behind the scenes will be converted to an [intervalStore](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarModel#property-intervalStore) containing
     * the intervals. When serializing it will be converted back to an array.
     */
    intervals: SchedulerProCalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]|Store
    /**
     * The calendar name.
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * An [EventStore](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * The flag, indicating, whether the "unspecified" time (time that does not belong to any interval
     * is working (`true`) or not (`false`).
     */
    unspecifiedTimeIsWorking: boolean
}

/**
 * This class represents a calendar in the Gantt project. It contains a collection of the [CalendarIntervalModel](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel).
 * Every interval can be either recurrent (regularly repeating in time) or static.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel)
 */
export class CalendarModel extends SchedulerProCalendarModel {
}

/**
 * Type with configuration options for [DependencyModel](https://bryntum.com/products/grid/docs/api/Gantt/model/DependencyModel) class.
 */
type DependencyModelConfig = {
    /**
     * Set to `false` to ignore this dependency in scheduling
     */
    active: boolean
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * The calendar of the dependency used to take `lag` duration into account.
     */
    calendar: SchedulerProCalendarModel
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#config-fromEvent)
     */
    fromEvent: string|number|SchedulerEventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * The origin task of this dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#config-fromTask)
     */
    fromTask: string|number|TaskModel
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#config-id)
     */
    id: string|number
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#config-lagUnit)
     */
    lagUnit: DurationUnitShort
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * An [EventStore](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#config-toEvent)
     */
    toEvent: string|number|SchedulerEventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * The destination task of this dependency.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#config-toTask)
     */
    toTask: string|number|TaskModel
    /**
     * Dependency type, see static property [Type](https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    type: number
}

/**
 * This class represents a single dependency between the tasks in your Gantt project.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel)
 */
export class DependencyModel extends SchedulerProDependencyModel {
    /**
     * The origin task of this dependency.
     */
    fromTask: string|number|TaskModel
    /**
     * The destination task of this dependency.
     */
    toTask: string|number|TaskModel
}

/**
 * Type with configuration options for [ProjectModel](https://bryntum.com/products/grid/docs/api/Gantt/model/ProjectModel) class.
 */
type ProjectModelConfig = {
    /**
     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding
     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to
     * keep the event "attached" to this date, according to the user intention.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-addConstraintOnDateSet)
     */
    addConstraintOnDateSet: boolean
    /**
     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is
     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic
     * is not involved.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-adjustDurationToDST)
     */
    adjustDurationToDST: boolean
    /**
     * The constructor of the assignment model class, to be used in the project. Will be set as the [modelClass](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass)
     * property of the [assignmentStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-assignmentStore)
     */
    assignmentModelClass: typeof AssignmentModel
    /**
     * An [AssignmentStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore) instance or a config object.
     */
    assignmentStore: AssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the [AssignmentStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore)
     */
    assignmentStoreClass: typeof AssignmentStore
    /**
     * Data use to fill the [assignmentStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-assignmentStore). Should be an array of
     * [AssignmentModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel) or its configuration objects.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * The initial data, to fill the [assignmentStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-assignmentStore) with.
     * Should be an array of [AssignmentModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel) or configuration objects.
     */
    assignmentsData: Partial<AssignmentModelConfig>[]|AssignmentModel[]
    /**
     * `true` to enable automatic [% done](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-percentDone) calculation for summary
     * tasks, `false` to disable it.
     */
    autoCalculatePercentDoneForParentTasks: boolean
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-autoLoad)
     */
    autoLoad: boolean
    /**
     * When `true` (default) adjacent or overlapping task segments get merged automatically.
     */
    autoMergeAdjacentSegments: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * The project calendar.
     */
    calendar: string|Partial<CalendarModelConfig>|CalendarModel
    /**
     * A [CalendarManagerStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore) instance or a config object.
     */
    calendarManagerStore: CalendarManagerStore|Partial<CalendarManagerStoreConfig>
    /**
     * The constructor to create a calendar store instance with. Should be a class, subclassing the [CalendarManagerStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore)
     */
    calendarManagerStoreClass: typeof CalendarManagerStore
    /**
     * The constructor of the calendar model class, to be used in the project. Will be set as the [modelClass](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass)
     * property of the [calendarManagerStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-calendarManagerStore)
     */
    calendarModelClass: typeof CalendarModel
    /**
     * Data use to fill the [calendarManagerStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-calendarManagerStore). Should be a
     * [CalendarModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel) array or its configuration objects.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * The initial data, to fill the [calendarManagerStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-calendarManagerStore) with.
     * Should be an array of [CalendarModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel) or configuration objects.
     */
    calendarsData: Partial<CalendarModelConfig>[]|CalendarModel[]
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-crudStores)
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * The number of days per month.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-daysPerMonth)
     */
    daysPerMonth: number
    /**
     * The number of days per week.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-daysPerWeek)
     */
    daysPerWeek: number
    /**
     * Enables early rendering in Gantt, by postponing calculations to after the first refresh.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-delayCalculation)
     */
    delayCalculation: boolean
    /**
     * Data use to fill the [dependencyStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore). Should be an array of
     * [DependencyModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel) or its configuration objects.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).
     * Possible values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-dependenciesCalendar)
     */
    dependenciesCalendar: string
    /**
     * The initial data, to fill the [dependencyStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore) with.
     * Should be an array of [DependencyModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel) or configuration objects.
     */
    dependenciesData: Partial<DependencyModelConfig>[]|DependencyModel[]
    /**
     * The constructor of the dependency model class, to be used in the project. Will be set as the [modelClass](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass)
     * property of the [dependencyStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore)
     */
    dependencyModelClass: typeof DependencyModel
    /**
     * A [DependencyStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore) instance or a config object.
     */
    dependencyStore: DependencyStore|Partial<DependencyStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the [DependencyStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore)
     */
    dependencyStoreClass: typeof DependencyStore
    /**
     * The scheduling direction of the project tasks.
     * The `Forward` direction corresponds to the As-Soon-As-Possible (ASAP) scheduling,
     * `Backward` - to As-Late-As-Possible (ALAP).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-direction)
     */
    direction: 'Forward'|'Backward'
    /**
     * Set to `true` to enable calculation progress notifications.
     * When enabled, the project fires [progress](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-progress) events and the Gantt chart load mask reacts by showing a progress bar for the Engine calculations.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-enableProgressNotifications)
     */
    enableProgressNotifications: boolean
    /**
     * Configuration of the JSON encoder used by the *Crud Manager*.
     */
    encoder: {
        requestData?: object
    }
    /**
     * End date of the project in the ISO 8601 format.
     * The value is calculated as the latest date among all tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-endDate)
     */
    endDate: string|Date
    /**
     * A [TaskStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore) instance or a config object.
     */
    eventStore: TaskStore|object|Partial<TaskStoreConfig>
    /**
     * Alias to [tasksData](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-tasksData).
     */
    eventsData: Partial<TaskModelConfig>[]|TaskModel[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The number of hours per day.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-hoursPerDay)
     */
    hoursPerDay: number
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-id)
     */
    id: string|number
    /**
     * Set to `true` to make STM ignore changes coming from the backend. This will allow user to only undo redo
     * local changes.
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Whether to include "As soon as possible" and "As late as possible" in the list of the constraints,
     * for compatibility with the MS Project. Enabled by default.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-includeAsapAlapAsConstraints)
     */
    includeAsapAlapAsConstraints: boolean
    /**
     * Set to `false` to only include the id of a removed parent node in the request to the backend (also
     * affects programmatic calls to get [changes](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes) etc.), and not the ids of its children.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-includeChildrenInRemoveRequest)
     */
    includeChildrenInRemoveRequest: boolean
    /**
     * Project data as a JSON string, used to populate its stores.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-json)
     */
    json: string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-listeners)
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-loadUrl)
     */
    loadUrl: string
    /**
     * Maximum range the project calendars can iterate.
     * The value is defined in milliseconds and by default equals `5 years` roughly.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-maxCalendarRange)
     */
    maxCalendarRange: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * Set to `true` to reset the undo/redo queues of the internal [StateTrackingManager](https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager)
     * after the Project has loaded. Defaults to `false`
     */
    resetUndoRedoQueuesAfterLoad: boolean
    /**
     * The constructor of the resource model class, to be used in the project. Will be set as the [modelClass](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass)
     * property of the [resourceStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-resourceStore)
     */
    resourceModelClass: typeof ResourceModel
    /**
     * A [ResourceStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore) instance or a config object.
     */
    resourceStore: ResourceStore|Partial<ResourceStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the [ResourceStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore)
     */
    resourceStoreClass: typeof ResourceStore
    /**
     * Data use to fill the [resourceStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-resourceStore). Should be an array of
     * [ResourceModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel) or its configuration objects.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * The initial data, to fill the [resourceStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-resourceStore) with.
     * Should be an array of [ResourceModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel) or configuration objects.
     */
    resourcesData: Partial<ResourceModelConfig>[]|ResourceModel[]
    /**
     * Experimental hook that lets the app determine if a bound dataset needs syncing with the store or not, and
     * if it does - which records that should be processed. Only called for stores that are configured with
     * `syncDataOnLoad: true` (which is the default in the React, Angular and Vue wrappers).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-shouldSyncDataOnLoad)
     * @param {object} options Options passed by the store to this hook
     * @param {Store} options.store Store about to be synced
     * @param {Model} options.records Records currently in the store
     * @param {<Object>} options.data Incoming data
     * @returns {Set|boolean} Return `false` to prevent the store from syncing, or a set of record ids that need further processing (for records that has some kind of change, eg. an update, removal or addition)
     */
    shouldSyncDataOnLoad: (options: { store: Store, records: Model, data: object[] }) => Set<any>|boolean
    /**
     * Silences propagations caused by the project loading.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-silenceInitialCommit)
     */
    silenceInitialCommit: boolean
    /**
     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates
     * to skip non working time.
     */
    skipNonWorkingTimeWhenSchedulingManually: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Start date of the project in the ISO 8601 format. Setting this date will constrain all other tasks in the
     * project to start no earlier than it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-startDate)
     */
    startDate: string|Date
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|CoreStateTrackingManager
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-storeIdProperty)
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-supportShortSyncResponse)
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-syncApplySequence)
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-syncUrl)
     */
    syncUrl: string
    /**
     * The constructor of the event model class, to be used in the project. Will be set as the [modelClass](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass)
     * property of the [eventStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-eventStore)
     */
    taskModelClass: typeof TaskModel
    /**
     * An alias for the [eventStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-eventStore).
     */
    taskStore: TaskStore|Partial<TaskStoreConfig>
    /**
     * The constructor to create an task store instance with. Should be a class, subclassing the [TaskStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore)
     */
    taskStoreClass: typeof TaskStore
    /**
     * Data use to fill the [taskStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-taskStore). Should be an array of
     * [TaskModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel) or its configuration objects.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * The initial data, to fill the [taskStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-taskStore) with.
     * Should be an array of [TaskModels](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel) or configuration objects.
     */
    tasksData: Partial<TaskModelConfig>[]|TaskModel[]
    /**
     * Store that holds time ranges - instances of [TimeRangeModel](https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeRangeModel) for the
     * [TimeRanges](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/TimeRanges) feature. A store will be automatically created if none is specified.
     */
    timeRangeStore: Partial<TimeRangeStoreConfig>|TimeRangeStore
    /**
     * Data use to fill the [timeRangeStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-timeRangeStore). Should be an array of
     * [TimeRangeModels](https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeRangeModel) or its configuration objects.
     */
    timeRanges: TimeRangeModel[]|Partial<TimeRangeModelConfig>[]
    /**
     * The initial data, to fill the [timeRangeStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-timeRangeStore) with.
     * Should be an array of [TimeRangeModels](https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeRangeModel) or configuration objects.
     */
    timeRangesData: Partial<TimeSpanConfig>[]|TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-timeZone)
     */
    timeZone: string|number
    /**
     * Specifies the output format of [toJSON](https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelCommon#function-toJSON).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-toJSONResultFormat)
     */
    toJSONResultFormat: 'inlineData'|'model'
    /**
     * If `true`, project [changes](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes) API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by *Crud Manager* to communicate with a server-side.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-transport)
     */
    transport: {
        load?: object
        sync?: object
    }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-validateResponse)
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => boolean|void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => boolean|void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => boolean|void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => boolean|void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {ProjectModel} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above.
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: ProjectModel, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the Engine detects a computation cycle.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue Scheduling error describing the case:
     * @param {Function} event.schedulingIssue.getDescription Returns the cycle description
     * @param {object} event.schedulingIssue.cycle Object providing the cycle info
     * @param {Function} event.schedulingIssue.getResolutions Returns possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('cycle', ({ continueWithResolutionResult }) => {     // cancel changes in case of a cycle     continueWithResolutionResult(EffectResolutionResult.Cancel); }) ```
     */
    onCycle: ((event: { schedulingIssue: { getDescription: Function, cycle: object, getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-dataReady)
     * @param {object} event Event object
     * @param {ProjectModel} event.source The project
     * @param {boolean} event.isInitialCommit Flag that shows if this commit is initial
     * @param {Set<any>} event.records Set of all [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model)s that were modified in the completed transaction. Use the [modifications](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-modifications) property of each Model to identify modified fields.
     */
    onDataReady: ((event: { source: ProjectModel, isInitialCommit: boolean, records: Set<any> }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the Engine detects a calendar misconfiguration when the calendar does
     * not provide any working periods of time which makes usage impossible.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue Scheduling error describing the case:
     * @param {Function} event.schedulingIssue.getDescription Returns the error description
     * @param {Function} event.schedulingIssue.getCalendar Returns the calendar that must be fixed
     * @param {Function} event.schedulingIssue.getResolutions Returns possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {     // apply the first resolution and continue     schedulingIssue.getResolutions()[0].resolve();     continueWithResolutionResult(EffectResolutionResult.Resume); }) ```
     */
    onEmptyCalendar: ((event: { schedulingIssue: { getDescription: Function, getCalendar: Function, getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fired during the Engine calculation if [enableProgressNotifications](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-enableProgressNotifications) config is `true`
     * @param {object} event Event object
     * @param {number} event.total The total number of operations
     * @param {number} event.remaining The number of remaining operations
     * @param {'storePopulation'|'propagating'} event.phase The phase of the calculation, either 'storePopulation' when data is getting loaded, or 'propagating' when data is getting calculated
     */
    onProgress: ((event: { total: number, remaining: number, phase: 'storePopulation'|'propagating' }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fired when the Engine detects a scheduling conflict.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue The conflict details:
     * @param {Function} event.schedulingIssue.getDescription Returns the conflict description
     * @param {object[]} event.schedulingIssue.intervals Array of conflicting intervals
     * @param {Function} event.schedulingIssue.getResolutions Function to get possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {     // apply the first resolution and continue     schedulingIssue.getResolutions()[0].resolve();     continueWithResolutionResult(EffectResolutionResult.Resume); }) ```
     */
    onSchedulingConflict: ((event: { schedulingIssue: { getDescription: Function, intervals: object[], getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
}

/**
 * This class represents a global project of your Project plan or Gantt - a central place for all data.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel)
 */
export class ProjectModel extends Model {
    /**
     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding
     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to
     * keep the event "attached" to this date, according to the user intention.
     */
    addConstraintOnDateSet: boolean
    /**
     * The [store](https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore) holding the assignment information.
     */
    assignmentStore: AssignmentStore
    /**
     * Get/set [assignmentStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-assignmentStore) data.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * `true` to enable automatic [% done](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-percentDone) calculation for summary
     * tasks, `false` to disable it.
     */
    autoCalculatePercentDoneForParentTasks: boolean
    /**
     * When `true` (default) adjacent or overlapping task segments get merged automatically.
     */
    autoMergeAdjacentSegments: boolean
    /**
     * The project calendar.
     */
    calendar: CalendarModel
    /**
     * The [store](https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore) holding the calendar information.
     */
    calendarManagerStore: CalendarManagerStore
    /**
     * Get/set [calendarManagerStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-calendarManagerStore) data.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every
     * managed store. Returns `null` if no changes exist. Format:
     */
    readonly changes: object
    /**
     * Returns an array of critical paths.
     * Each *critical path* is an array of critical path nodes.
     * Each *critical path node* is an object which contains [critical task](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-critical)
     * and [dependency](https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel) leading to the next critical path node.
     * Dependency is missing if it is the last critical path node in the critical path.
     * To highlight critical paths, enable [CriticalPaths](https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths) feature.
     */
    criticalPaths: any[]
    /**
     * The server revision stamp.
     * The *revision stamp* is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each [load](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) and [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a *store descriptor*.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * The number of days per month.
     */
    daysPerMonth: number
    /**
     * The number of days per week.
     */
    daysPerWeek: number
    /**
     * Get/set [dependencyStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore) data.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).
     * Possible values are:
     */
    dependenciesCalendar: string
    /**
     * The [store](https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore) holding the dependency information.
     */
    dependencyStore: DependencyStore
    /**
     * The scheduling direction of the project tasks.
     * The `Forward` direction corresponds to the As-Soon-As-Possible (ASAP) scheduling,
     * `Backward` - to As-Late-As-Possible (ALAP).
     */
    direction: 'Forward'|'Backward'
    /**
     * Enables/disables the calculation progress notifications.
     */
    enableProgressNotifications: boolean
    /**
     * End date of the project in the ISO 8601 format.
     * The value is calculated as the latest date among all tasks.
     */
    endDate: string|Date
    /**
     * The [store](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore) holding the task information.
     */
    eventStore: TaskStore
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The number of hours per day.
     */
    hoursPerDay: number
    /**
     * Set to `true` to make STM ignore changes coming from the backend. This will allow user to only undo redo
     * local changes.
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Get or set data of project stores. The returned data is identical to what
     * [toJSON](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-toJSON) returns:
     */
    inlineData: object
    /**
     * Returns `true` if changes tracking is suspended
     */
    readonly isChangeTrackingSuspended: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Get or set project data (records from its stores) as a JSON string.
     */
    json: string
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     */
    loadUrl: string
    /**
     * The [store](https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore) holding the resources that can be assigned to the tasks in the
     * task store.
     */
    resourceStore: ResourceStore
    /**
     * Get/set [resourceStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-resourceStore) data.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * Experimental hook that lets the app determine if a bound dataset needs syncing with the store or not, and
     * if it does - which records that should be processed. Only called for stores that are configured with
     * `syncDataOnLoad: true` (which is the default in the React, Angular and Vue wrappers).
     */
    shouldSyncDataOnLoad: (options: { store: Store, records: Model, data: object[] }) => Set<any>|boolean
    /**
     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates
     * to skip non working time.
     */
    skipNonWorkingTimeWhenSchedulingManually: boolean
    /**
     * Start date of the project in the ISO 8601 format. Setting this date will constrain all other tasks in the
     * project to start no earlier than it.
     */
    startDate: string|Date
    /**
     * State tracking manager instance the project relies on
     */
    stm: CoreStateTrackingManager
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a *store descriptor*.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     */
    syncUrl: string
    /**
     * An alias for the [eventStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-eventStore).
     */
    taskStore: TaskStore
    /**
     * Get/set [taskStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-taskStore) data.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * The [store](https://bryntum.com/products/gantt/docs/api/Core/data/Store) containing time ranges to be visualized.
     */
    timeRangeStore: Store
    /**
     * Get/set [timeRangeStore](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-timeRangeStore) data.
     */
    timeRanges: TimeRangeModel[]|Partial<TimeRangeModelConfig>[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     */
    timeZone: string|number
    /**
     * If `true`, project [changes](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes) API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => boolean|void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => boolean|void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => boolean|void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-beforeSend)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync'|'load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-beforeSync)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => boolean|void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {ProjectModel} event.source This project
     * @param {Store} event.store Affected store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of the options listed above.
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: ProjectModel, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the Engine detects a computation cycle.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue Scheduling error describing the case:
     * @param {Function} event.schedulingIssue.getDescription Returns the cycle description
     * @param {object} event.schedulingIssue.cycle Object providing the cycle info
     * @param {Function} event.schedulingIssue.getResolutions Returns possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('cycle', ({ continueWithResolutionResult }) => {     // cancel changes in case of a cycle     continueWithResolutionResult(EffectResolutionResult.Cancel); }) ```
     */
    onCycle: ((event: { schedulingIssue: { getDescription: Function, cycle: object, getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-dataReady)
     * @param {object} event Event object
     * @param {ProjectModel} event.source The project
     * @param {boolean} event.isInitialCommit Flag that shows if this commit is initial
     * @param {Set<any>} event.records Set of all [Model](https://bryntum.com/products/gantt/docs/api/Core/data/Model)s that were modified in the completed transaction. Use the [modifications](https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-modifications) property of each Model to identify modified fields.
     */
    onDataReady: ((event: { source: ProjectModel, isInitialCommit: boolean, records: Set<any> }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when the Engine detects a calendar misconfiguration when the calendar does
     * not provide any working periods of time which makes usage impossible.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue Scheduling error describing the case:
     * @param {Function} event.schedulingIssue.getDescription Returns the error description
     * @param {Function} event.schedulingIssue.getCalendar Returns the calendar that must be fixed
     * @param {Function} event.schedulingIssue.getResolutions Returns possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {     // apply the first resolution and continue     schedulingIssue.getResolutions()[0].resolve();     continueWithResolutionResult(EffectResolutionResult.Resume); }) ```
     */
    onEmptyCalendar: ((event: { schedulingIssue: { getDescription: Function, getCalendar: Function, getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-hasChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-noChanges)
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fired during the Engine calculation if [enableProgressNotifications](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-enableProgressNotifications) config is `true`
     * @param {object} event Event object
     * @param {number} event.total The total number of operations
     * @param {number} event.remaining The number of remaining operations
     * @param {'storePopulation'|'propagating'} event.phase The phase of the calculation, either 'storePopulation' when data is getting loaded, or 'propagating' when data is getting calculated
     */
    onProgress: ((event: { total: number, remaining: number, phase: 'storePopulation'|'propagating' }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync'|'load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Fired when the Engine detects a scheduling conflict.
     * @param {object} event Event object
     * @param {object} event.schedulingIssue The conflict details:
     * @param {Function} event.schedulingIssue.getDescription Returns the conflict description
     * @param {object[]} event.schedulingIssue.intervals Array of conflicting intervals
     * @param {Function} event.schedulingIssue.getResolutions Function to get possible resolutions
     * @param {Function} event.continueWithResolutionResult Function to call after a resolution is chosen to proceed with the Engine calculations: ```javascript project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {     // apply the first resolution and continue     schedulingIssue.getResolutions()[0].resolve();     continueWithResolutionResult(EffectResolutionResult.Resume); }) ```
     */
    onSchedulingConflict: ((event: { schedulingIssue: { getDescription: Function, intervals: object[], getResolutions: Function }, continueWithResolutionResult: Function }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions The server response options.
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions The response options.
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object }) => void)|string
    /**
     * Constructs a new record from the supplied data config.
     * @param {Partial<ProjectModelConfig>} config Raw model config
     * @param {Store} store Data store
     * @param {object} meta Meta data
     */
    constructor(config?: Partial<ProjectModelConfig>, store?: Store, meta?: object);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * @param {Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[]} store A store or list of stores. Each store might be specified by its instance, `storeId` or *descriptor*.
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of collection crudManager.addCrudStore([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addCrudStore(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addCrudStore(store7, 1, store3); ```
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using [syncApplySequence](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence) option
     * or by calling this method.
     * @param {Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[]} store The store to add or its *descriptor* (or array of stores or descriptors).
     * @param {number} position The relative position of the store. If `fromStore` is specified the position will be taken relative to it. If not specified then store(s) will be appended to the end of collection. Otherwise, it will be just a position in stores collection. ```javascript // insert stores store4, store5 to the start of sequence crudManager.addStoreToApplySequence([ store4, store5 ], 0); ```
     * @param {string|Store|CrudManagerStoreDescriptor} fromStore The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of [getStoreDescriptor](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor) call). ```javascript // insert store6 just before a store having storeId equal to 'foo' crudManager.addStoreToApplySequence(store6, 0, 'foo');  // insert store7 just after store3 store crudManager.addStoreToApplySequence(store7, 1, store3); ```
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * @param {object} changes Changeset to apply, an object keyed by store id where each value follows the format described in [applyChangeset](https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-applyChangeset)
     * @param {Function} transformFn Optional function used to preprocess a changeset per store in a different format, should return an object with the format expected by [applyChangeset](https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-applyChangeset)
     * @param {string} phantomIdField Field used by the backend when communicating a record being assigned a proper id instead of a phantom id
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Allows to apply changes from one project to another. For method to produce correct results, projects should be
     * isomorphic - they should use same models and store configuration, also data in source and target projects
     * should be identical before changes to the source project are made and applied to the target project.
     * This method is meant to apply changes in real time - as source project is changed, changes should be applied to
     * the target project before it is changed.
     * When changes are applied all changes are committed and project is recalculated, which means target project
     * won't have any local changes after.
     * @param {object} changes Project [changes](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes) object
     */
    applyProjectChanges(changes: object): Promise<any>;
    /**
     * Cancels a sent request.
     * @param {Promise<any>} requestPromise The Promise object wrapping the Request to be cancelled. The *requestPromise* is the value returned from the corresponding [sendRequest](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/transport/AjaxTransport#function-sendRequest) call.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the
     * underlying graph based calculation engine. The engine performs it calculations async.
     */
    commitAsync(): Promise<void>;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * @param {string|Store} storeId The store identifier or store instance to check changes for. If not specified then will check changes for all of the registered stores.
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a *JSON* response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the *Crud Manager*.
     * @param {string} responseText The response text to decode.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to *JSON* encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the *Crud Manager* has to be transformed into format requested by server.
     * @param {object} requestData The request to encode.
     */
    encode(requestData: object): string;
    /**
     * Returns a calendar of the project. If task has never been assigned a calendar a project's calendar will be returned.
     */
    getCalendar(): CalendarModel;
    /**
     * Returns a registered store.
     * @param {string} storeId Store identifier.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     * @param {string|Store} storeId The store identifier or registered store instance.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * @param {object|string} options The request parameters or a URL.
     */
    load(options?: {
        request?: object
    }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     * @param {object} response A simple object representing the data. The object structure matches the decoded `load` response structure: ```javascript // load static data into crudManager crudManager.loadCrudManagerData({     success   : true,     resources : {         rows : [             { id : 1, name : 'John' },             { id : 2, name : 'Abby' }         ]     } }); ```
     * @param {object} options Extra data loading options.
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Accepts a "data package" consisting of data for the projects stores, which is then loaded into the stores.
     * @param {object} dataPackage A data package as described above
     */
    loadInlineData(dataPackage: object): Promise<void>;
    /**
     * Alias for [addListener](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Causes the scheduling engine to re-evaluate the task data and all associated data and constraints
     * and apply necessary changes.
     */
    propagate(): Promise<void>;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * @param {CrudManagerStoreDescriptor|string|Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     * @param {boolean} doSync Pass `true` to schedule a sync after resuming (if there are pending changes) and `false` to not persist the changes.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resumes [hasChanges](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events. By default, it will check for changes
     * and if there are any, `hasChanges` or `noChanges` event will be triggered.
     * @param {boolean} skipChangeCheck
     */
    resumeChangeTracking(skipChangeCheck?: boolean): void;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Resume [propagation](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-propagate). If propagation is resumed (calls may be nested
     * which increments a suspension counter), then if a call to propagate was made during suspension,
     * [propagate](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-propagate) is executed.
     * @param {boolean} trigger Pass `false` to inhibit automatic propagation if propagate was requested during suspension.
     */
    resumePropagate(trigger?: boolean): Promise<void>;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a *Crud Manager* request to the server.
     * @param {object} request The request configuration object having following properties:
     */
    sendRequest(request: {
        type: 'load'|'sync'
        url: string
        data: string
        params: object
        success: Function
        failure: Function
        thisObj: object
    }): Promise<any>;
    /**
     * Overrides the project owned store identifiers calculation and launches rescheduling.
     * @param {object} calculations Object providing new *engine* fields calculation function names. The object is grouped by store identifiers. For example below code overrides task [startDate](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-startDate), [endDate](#Gantt/model/TaskModel#field-endDate) and [duration](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-duration) calculation so the fields will always simply return their current values: ```javascript // task startDate, endDate and duration will use their userProvidedValue method // which simply returns their current values as-is const oldCalculations = await project.setCalculations({     tasks : {         startDate : "userProvidedValue",         endDate   : "userProvidedValue",         duration  : "userProvidedValue"     } }) ```
     */
    setCalculations(calculations: object): Promise<any>;
    /**
     * Sets the calendar of the project. Will cause the schedule to be updated - returns a `Promise`
     * @param {CalendarModel} calendar The new calendar.
     */
    setCalendar(calendar: CalendarModel): Promise<void>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Suspends [hasChanges](https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-hasChanges) and [noChanges](#Scheduler/crud/AbstractCrudManagerMixin#event-noChanges) events.
     */
    suspendChangeTracking(): void;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Suspend [propagation](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-propagate) processing. When propagation is suspended,
     * calls to [propagate](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-propagate) do not proceed, instead a propagate call is deferred
     * until a matching [resumePropagate](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-resumePropagate) is called.
     */
    suspendPropagate(): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     */
    sync(): Promise<any>;
    /**
     * Returns the data from the records of the projects stores, in a format that can be consumed by
     * `loadInlineData()`.
     */
    toJSON(): object;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

/**
 * Type with configuration options for [ResourceModel](https://bryntum.com/products/grid/docs/api/Gantt/model/ResourceModel) class.
 */
type ResourceModelConfig = {
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     */
    calendar: SchedulerProCalendarModel|string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel#config-children)
     */
    children: boolean|object[]|Model[]
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured [resourceColumns](https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-resourceColumns) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel#config-columnWidth)
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventColor config](https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor). Also, see
     * Schedulers [eventColor config](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * [eventLayout](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout) for options.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel#config-eventLayout)
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels [eventStyle config](https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle). See Schedulers
     * [eventStyle config](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle) for available
     * options.
     */
    eventStyle: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A link to use for this record when rendered into a [TreeColumn](https://bryntum.com/products/gantt/docs/api/Grid/column/TreeColumn).
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel#config-id)
     */
    id: string|number
    /**
     * Image name relative to [resourceImagePath](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath),
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * A maximum units "capacity" for this resource, in percents. Corresponds to [units](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#fields-units) field.
     * Default value is 100%. If the sum of all "units" of all assignments of a resource for a certain period exceeds
     * this value, such resource is marked as "over-allocated" in the resource histogram.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel#config-maxUnits)
     */
    maxUnits: number
    /**
     * Get or set resource name
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom
     * margin within the resource row in horizontal mode, left/right margin within the resource column in
     * vertical mode), in px.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel#config-resourceMargin)
     */
    resourceMargin: number|Partial<ResourceMarginConfig>
    /**
     * Used by the default implementation of [getRowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-getRowHeight) to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the [href](https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-href) field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
}

/**
 * This class represents a single resource in your Gantt project.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel)
 */
export class ResourceModel extends SchedulerProResourceModel {
    /**
     * Get associated tasks
     */
    readonly events: EventModel[]
}

/**
 * Type with configuration options for [TaskModel](https://bryntum.com/products/grid/docs/api/Gantt/model/TaskModel) class.
 */
type TaskModelConfig = {
    /**
     * A set of resources assigned to this task
     */
    assigned: Set<any>
    /**
     * The getter will yield a [Store](https://bryntum.com/products/gantt/docs/api/Core/data/Store) of [Baseline](#Gantt/model/Baseline)s.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-baselines)
     */
    baselines: Partial<BaselineConfig>[]|Store
    /**
     * The calendar, assigned to the task. Allows you to set the time when task can be performed.
     */
    calendar: CalendarModel
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field
     * for leaf tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-children)
     */
    children: boolean|object[]|TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * An encapsulation of the CSS classes to be added to the rendered event element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-cls)
     */
    cls: DomClassList|string
    /**
     * Field defining the constraint boundary date or `null` if [constraintType](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-constraintType) is `null`.
     */
    constraintDate: string|Date|null
    /**
     * Field storing the task constraint alias or `null` if not constraint set.
     * Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-constraintType)
     */
    constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null
    /**
     * A calculated field indicating if the task is *critical*.
     * A task considered *critical* if its delaying causes the project delay.
     * The field value is calculated based on [totalSlack](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack) field value.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-critical)
     */
    critical: boolean
    /**
     * A deadline date for this task. Does not affect scheduling logic.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-deadlineDate)
     */
    deadlineDate: string|Date
    /**
     * The scheduling direction of this event. The `Forward` direction corresponds to the as-soon-as-possible scheduling (ASAP),
     * `Backward` - to as-late-as-possible (ALAP). The ASAP tasks "sticks" to the project's start date,
     * and ALAP tasks - to the project's end date.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-direction)
     */
    direction: 'Forward'|'Backward'
    /**
     * Specify false to prevent the event from being dragged (if [TaskDrag](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag) feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the task duration (the number of units).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-duration)
     */
    duration: number
    /**
     * The unit part of the task duration, defaults to "day" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-durationUnit)
     */
    durationUnit: DurationUnit
    /**
     * A calculated field storing the *early end date* of the task.
     * The *early end date* is the earliest possible date the task can finish.
     * This value is calculated based on the earliest dates of the task predecessors and the task own
     * constraints. If the task has no predecessors nor other constraints, its early end date matches the
     * project start date plus the task duration.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-earlyEndDate)
     */
    earlyEndDate: Date
    /**
     * A calculated field storing the *early start date* of the task.
     * The *early start date* is the earliest possible date the task can start.
     * This value is calculated based on the earliest dates of the task predecessors and the task own
     * constraints. If the task has no predecessors nor other constraints, its early start date matches the
     * project start date.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-earlyStartDate)
     */
    earlyStartDate: Date
    /**
     * The effective calendar used by the task.
     * Returns the task own [calendar](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-calendar) if provided or the project [calendar](#Gantt/model/ProjectModel#field-calendar).
     */
    effectiveCalendar: CalendarModel
    /**
     * The calculated effective scheduling direction of this event. See the [direction](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction) field for details.
     */
    effectiveDirection: EffectiveDirection
    /**
     * The numeric part of the task effort (the number of units). The effort of the "parent" tasks will be automatically set to the sum
     * of efforts of their "child" tasks
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-effort)
     */
    effort: number
    /**
     * This boolean flag defines what part of task data should be updated in the `FixedUnits` scheduling mode.
     * If it is `true`, then [effort](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort) is kept intact, and duration is updated. If it is `false` -
     * vice-versa.
     */
    effortDriven: boolean
    /**
     * The unit part of the task's effort, defaults to "h" (hours). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-effortUnit)
     */
    effortUnit: DurationUnit
    /**
     * End date of the task in ISO 8601 format
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-endDate)
     */
    endDate: string|Date
    /**
     * Changes task's background color. Named colors are applied as a `b-sch-color-{color}` (for example
     * `b-sch-color-red`) CSS class to the task's bar. Colors specified as hex, `rgb()` etc. are applied as
     * `style.color` to the bar.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration) and [durationUnit](#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the task row
     */
    iconCls: string
    /**
     * Unique identifier of task (mandatory)
     */
    id: string|number
    /**
     * When set to `true` the calendars of the assigned resources
     * are not taken into account when scheduling the task.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-ignoreResourceCalendar)
     */
    ignoreResourceCalendar: boolean
    /**
     * When set to `true` the task becomes inactive and stops taking part in the project scheduling (doesn't
     * affect linked tasks, rolls up its attributes and affect its assigned resources allocation).
     */
    inactive: boolean
    /**
     * A calculated field storing the *late end date* of the task.
     * The *late end date* is the latest possible date the task can finish.
     * This value is calculated based on the latest dates of the task successors and the task own constraints.
     * If the task has no successors nor other constraints, its late end date matches the project end date.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-lateEndDate)
     */
    lateEndDate: Date
    /**
     * A calculated field storing the *late start date* of the task.
     * The *late start date* is the latest possible date the task can start.
     * This value is calculated based on the latest dates of the task successors and the task own constraints.
     * If the task has no successors nor other constraints, its late start date matches the project end date
     * minus the task duration.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-lateStartDate)
     */
    lateStartDate: Date
    /**
     * When set to `true`, the [startDate](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-startDate) of the task will not be changed by any of its incoming
     * dependencies or constraints.
     */
    manuallyScheduled: boolean
    /**
     * Name of the task
     */
    name: string
    /**
     * A freetext note about the task.
     */
    note: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-percentDone)
     */
    percentDone: number
    /**
     * Specifies how the task should treat the project border (the project start or end depending
     * if it's scheduled forward or backwards respectively).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-projectConstraintResolution)
     */
    projectConstraintResolution: 'honor'|'ignore'|'conflict'
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-readOnly)
     */
    readOnly: boolean
    /**
     * Specify false to prevent the task from being resized (if [TaskResize](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize) feature is
     * used). You can also specify 'start' or 'end' to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Set this to true to roll up a task to its closest parent
     */
    rollup: boolean
    /**
     * This field defines the scheduling mode for the task. Based on this field some fields of the task
     * will be "fixed" (should be provided by the user) and some - computed.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-schedulingMode)
     */
    schedulingMode: 'Normal'|'FixedDuration'|'FixedEffort'|'FixedUnits'
    /**
     * Segments of the task that appear when the task gets [splitToSegments](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-splitToSegments).
     */
    segments: EventSegmentModel[]
    /**
     * Set this to true if this task should be shown in the Timeline widget
     */
    showInTimeline: boolean
    /**
     * A calculated field storing unit for the [totalSlack](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack) value.
     */
    slackUnit: string
    /**
     * Start date of the task in ISO 8601 format
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-startDate)
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-style)
     */
    style: string
    /**
     * CSS class specifying an icon to apply to the task bar
     */
    taskIconCls: string
    /**
     * An [EventStore](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore) instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-timeZone)
     */
    timeZone: string|number|null
    /**
     * A calculated field storing the *total slack* (or *total float*) of the task.
     * The *total slack* is the amount of working time the task can be delayed without causing a delay
     * to the project end.
     * The value is expressed in [slackUnit](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-slackUnit) units.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-totalSlack)
     */
    totalSlack: number
    /**
     * This field is automatically set to `true` when the task is "unscheduled" - user has provided an empty
     * string in one of the UI editors for start date, end date or duration. Such task is not rendered,
     * and does not affect the schedule of its successors.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-unscheduled)
     */
    unscheduled: boolean
    /**
     * The [WBS](https://bryntum.com/products/gantt/docs/api/Gantt/data/Wbs) for this task record. This field is automatically calculated and
     * maintained by the store. This calculation can be refreshed by calling [refreshWbs](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-refreshWbs).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#config-wbsValue)
     */
    wbsValue: Wbs|string
}

/**
 * This class represents a task in your Gantt project. Extend it to add your own custom task fields and methods.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel)
 */
export class TaskModel extends TimeSpan {
    /**
     * This static configuration option allows you to control whether an empty parent task should be converted into a
     * leaf. Enable/disable it for a whole class:
     */
    static convertEmptyParentToLeaf: boolean|ConvertEmptyParentToLeafOptions
    /**
     * Returns all dependencies of this task (both incoming and outgoing)
     */
    allDependencies: DependencyModel[]
    /**
     * A set of resources assigned to this task
     */
    readonly assigned: Set<any>
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * An array of the assignments, related to this task
     */
    readonly assignments: AssignmentModel[]
    /**
     * The getter will yield a [Store](https://bryntum.com/products/gantt/docs/api/Core/data/Store) of [Baseline](#Gantt/model/Baseline)s.
     */
    baselines: Partial<BaselineConfig>[]|Store
    /**
     * The calendar, assigned to the task. Allows you to set the time when task can be performed.
     */
    calendar: CalendarModel
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field
     * for leaf tasks.
     */
    children: boolean|object[]|TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * An encapsulation of the CSS classes to be added to the rendered event element.
     */
    cls: DomClassList|string
    /**
     * Field defining the constraint boundary date or `null` if [constraintType](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-constraintType) is `null`.
     */
    constraintDate: string|Date|null
    /**
     * Field storing the task constraint alias or `null` if not constraint set.
     * Valid values are:
     */
    constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null
    /**
     * A calculated field indicating if the task is *critical*.
     * A task considered *critical* if its delaying causes the project delay.
     * The field value is calculated based on [totalSlack](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack) field value.
     */
    readonly critical: boolean
    /**
     * A deadline date for this task. Does not affect scheduling logic.
     */
    deadlineDate: string|Date
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * The scheduling direction of this event. The `Forward` direction corresponds to the as-soon-as-possible scheduling (ASAP),
     * `Backward` - to as-late-as-possible (ALAP). The ASAP tasks "sticks" to the project's start date,
     * and ALAP tasks - to the project's end date.
     */
    direction: 'Forward'|'Backward'
    /**
     * Specify false to prevent the event from being dragged (if [TaskDrag](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag) feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the task duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the task duration, defaults to "day" (days). Valid values are:
     */
    durationUnit: DurationUnit
    /**
     * A calculated field storing the *early end date* of the task.
     * The *early end date* is the earliest possible date the task can finish.
     * This value is calculated based on the earliest dates of the task predecessors and the task own
     * constraints. If the task has no predecessors nor other constraints, its early end date matches the
     * project start date plus the task duration.
     */
    readonly earlyEndDate: Date
    /**
     * A calculated field storing the *early start date* of the task.
     * The *early start date* is the earliest possible date the task can start.
     * This value is calculated based on the earliest dates of the task predecessors and the task own
     * constraints. If the task has no predecessors nor other constraints, its early start date matches the
     * project start date.
     */
    readonly earlyStartDate: Date
    /**
     * The effective calendar used by the task.
     * Returns the task own [calendar](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-calendar) if provided or the project [calendar](#Gantt/model/ProjectModel#field-calendar).
     */
    readonly effectiveCalendar: CalendarModel
    /**
     * The calculated effective scheduling direction of this event. See the [direction](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction) field for details.
     */
    effectiveDirection: EffectiveDirection
    /**
     * The numeric part of the task effort (the number of units). The effort of the "parent" tasks will be automatically set to the sum
     * of efforts of their "child" tasks
     */
    effort: number
    /**
     * This boolean flag defines what part of task data should be updated in the `FixedUnits` scheduling mode.
     * If it is `true`, then [effort](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort) is kept intact, and duration is updated. If it is `false` -
     * vice-versa.
     */
    effortDriven: boolean
    /**
     * The unit part of the task's effort, defaults to "h" (hours). Valid values are:
     */
    effortUnit: DurationUnit
    /**
     * End date of the task in ISO 8601 format
     */
    endDate: string|Date
    /**
     * Changes task's background color. Named colors are applied as a `b-sch-color-{color}` (for example
     * `b-sch-color-red`) CSS class to the task's bar. Colors specified as hex, `rgb()` etc. are applied as
     * `style.color` to the bar.
     */
    eventColor: EventColor
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * The event first segment or null if the event is not segmented.
     */
    firstSegment: EventSegmentModel
    /**
     * Property which encapsulates the effort's magnitude and units.
     */
    fullEffort: Duration
    /**
     * CSS class specifying an icon to apply to the task row
     */
    iconCls: string
    /**
     * Unique identifier of task (mandatory)
     */
    id: string|number
    /**
     * When set to `true` the calendars of the assigned resources
     * are not taken into account when scheduling the task.
     */
    ignoreResourceCalendar: boolean
    /**
     * When set to `true` the task becomes inactive and stops taking part in the project scheduling (doesn't
     * affect linked tasks, rolls up its attributes and affect its assigned resources allocation).
     */
    inactive: boolean
    /**
     * A `Set&lt;Gantt.model.DependencyModel&gt;` of the incoming dependencies for this task
     */
    readonly incomingDeps: Set<any>
    /**
     * Indicates if the task is complete (its [percent completion](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is 100% (or greater)).
     */
    isCompleted: boolean
    /**
     * Indicates if the task is in progress (its [percent completion](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is greater than zero and less than 100%).
     */
    isInProgress: boolean
    /**
     * Indicates if the task is started (its [percent completion](https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone) is greater than zero).
     */
    isStarted: boolean
    /**
     * The event last segment or null if the event is not segmented.
     */
    lastSegment: EventSegmentModel
    /**
     * A calculated field storing the *late end date* of the task.
     * The *late end date* is the latest possible date the task can finish.
     * This value is calculated based on the latest dates of the task successors and the task own constraints.
     * If the task has no successors nor other constraints, its late end date matches the project end date.
     */
    readonly lateEndDate: Date
    /**
     * A calculated field storing the *late start date* of the task.
     * The *late start date* is the latest possible date the task can start.
     * This value is calculated based on the latest dates of the task successors and the task own constraints.
     * If the task has no successors nor other constraints, its late start date matches the project end date
     * minus the task duration.
     */
    readonly lateStartDate: Date
    /**
     * When set to `true`, the [startDate](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-startDate) of the task will not be changed by any of its incoming
     * dependencies or constraints.
     */
    manuallyScheduled: boolean
    /**
     * Name of the task
     */
    name: string
    /**
     * A freetext note about the task.
     */
    note: string
    /**
     * A `Set&lt;Gantt.model.DependencyModel&gt;` of the outgoing dependencies for this task
     */
    readonly outgoingDeps: Set<any>
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Returns all predecessor tasks of a task
     */
    predecessorTasks: TaskModel[]
    /**
     * Returns all predecessor dependencies of this task
     */
    readonly predecessors: DependencyModel[]
    /**
     * Returns count of all sibling nodes (including their children).
     */
    previousSiblingsTotalCount: number
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Specifies how the task should treat the project border (the project start or end depending
     * if it's scheduled forward or backwards respectively).
     */
    projectConstraintResolution: 'honor'|'ignore'|'conflict'
    /**
     * Human-friendly rounding. When task is completed &lt; 99%, it rounds the value. It floors value between 99 and 100, to not
     * show task as completed when it is for example 99.51% done.
     */
    renderedPercentDone: number
    /**
     * Specify false to prevent the task from being resized (if [TaskResize](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize) feature is
     * used). You can also specify 'start' or 'end' to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: ResourceModel[]
    /**
     * Set this to true to roll up a task to its closest parent
     */
    rollup: boolean
    /**
     * This field defines the scheduling mode for the task. Based on this field some fields of the task
     * will be "fixed" (should be provided by the user) and some - computed.
     */
    schedulingMode: 'Normal'|'FixedDuration'|'FixedEffort'|'FixedUnits'
    /**
     * Segments of the task that appear when the task gets [splitToSegments](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-splitToSegments).
     */
    segments: EventSegmentModel[]
    /**
     * Returns the sequential number of the task. A sequential number means the ordinal position of the task in the
     * total dataset, regardless of its nesting level and collapse/expand state of any parent tasks. The root node has a
     * sequential number equal to 0.
     */
    sequenceNumber: number
    /**
     * Set this to true if this task should be shown in the Timeline widget
     */
    showInTimeline: boolean
    /**
     * A calculated field storing unit for the [totalSlack](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack) value.
     */
    slackUnit: string
    /**
     * Start date of the task in ISO 8601 format
     */
    startDate: string|Date
    /**
     * Returns all successor tasks of a task
     */
    readonly successorTasks: TaskModel[]
    /**
     * Returns all successor dependencies of this task
     */
    readonly successors: DependencyModel[]
    /**
     * CSS class specifying an icon to apply to the task bar
     */
    taskIconCls: string
    /**
     * The [store](https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore) holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * A calculated field storing the *total slack* (or *total float*) of the task.
     * The *total slack* is the amount of working time the task can be delayed without causing a delay
     * to the project end.
     * The value is expressed in [slackUnit](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-slackUnit) units.
     */
    readonly totalSlack: number
    /**
     * This field is automatically set to `true` when the task is "unscheduled" - user has provided an empty
     * string in one of the UI editors for start date, end date or duration. Such task is not rendered,
     * and does not affect the schedule of its successors.
     */
    readonly unscheduled: boolean
    /**
     * The [WBS](https://bryntum.com/products/gantt/docs/api/Gantt/data/Wbs) for this task record. This field is automatically calculated and
     * maintained by the store. This calculation can be refreshed by calling [refreshWbs](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-refreshWbs).
     */
    readonly wbsValue: Wbs|string
    /**
     * This method assigns a resource to this task.
     * @param {ResourceModel} resource The instance of [ResourceModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel)
     * @param {number} units The `units` field of the new assignment
     */
    assign(resource: ResourceModel, units?: number): Promise<void>;
    /**
     * Propagates changes to the dependent tasks. For example:
     */
    commitAsync(): Promise<void>;
    /**
     * Converts this task to a milestone (start date will match the end date).
     */
    convertToMilestone(): Promise<void>;
    /**
     * Converts the milestone task to a regular task with a duration of 1 (keeping current [durationUnit](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-durationUnit)).
     */
    convertToRegular(): Promise<void>;
    /**
     * If given resource is assigned to this task, returns a [AssignmentModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel) record.
     * Otherwise returns `null`
     * @param {ResourceModel} resource The instance of [ResourceModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel)
     */
    getAssignmentFor(resource: ResourceModel): AssignmentModel|null;
    /**
     * Returns the task calendar.
     */
    getCalendar(): CalendarModel;
    /**
     * Returns the event [ignoreResourceCalendar](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-ignoreResourceCalendar) field value.
     */
    getIgnoreResourceCalendar(): boolean;
    /**
     * Defines if the given task field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * @param {string} fieldName Name of the field
     */
    isEditable(fieldName: string): boolean;
    /**
     * Merges the task segments.
     * The method merges two provided task segments (and all the segment between them if any).
     * @param {EventSegmentModel} segment1 First segment to merge.
     * @param {EventSegmentModel} segment2 Second segment to merge.
     */
    mergeSegments(segment1?: EventSegmentModel, segment2?: EventSegmentModel): Promise<any>;
    /**
     * Refreshes the [wbsValue](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-wbsValue) of this record and its children. This is rarely needed but may be required
     * after a complex series of filtering, inserting, or removing nodes. In particular, removing nodes does create a
     * gap in `wbsValue` values that may be undesirable.
     * @param {object} options A set of options for refreshing.
     * @param {number} index The index of this node in its parent's children array. Pass -1 to ignore this node's `wbsValue` and only operate on children (if `options.deep`).
     */
    refreshWbs(options?: {
        deep?: boolean
        silent?: boolean
        useOrderedTree?: boolean
    }, index?: number): void;
    /**
     * Applies the start/end dates from the task to the corresponding baseline.
     * @param {number} version The baseline version to update
     */
    setBaseline(version: number): void;
    /**
     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`
     * @param {CalendarModel} calendar The new calendar. Provide `null` to return back to the project calendar.
     */
    setCalendar(calendar: CalendarModel): Promise<void>;
    /**
     * Sets the constraint type and (optionally) constraining date to the task.
     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType Constraint type, please refer to the [constraintType](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-constraintType) for the valid values.
     * @param {Date} constraintDate Constraint date.
     */
    setConstraint(constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null, constraintDate?: Date): Promise<void>;
    /**
     * Updates the duration (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`
     * @param {number} duration New duration value
     * @param {DurationUnit} unit New duration unit
     */
    setDuration(duration: number, unit?: DurationUnit): Promise<void>;
    /**
     * Updates the effort (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`
     * @param {number} effort New effort value
     * @param {DurationUnit} unit New effort unit
     */
    setEffort(effort: number, unit?: DurationUnit): Promise<void>;
    /**
     * Sets the end date of the task. Will cause the schedule to be updated - returns a `Promise`
     * @param {Date} date The new end date.
     * @param {boolean} keepDuration Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.
     */
    setEndDate(date: Date, keepDuration?: boolean): Promise<void>;
    /**
     * Sets the task [ignoreResourceCalendar](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-ignoreResourceCalendar) field value and triggers rescheduling.
     * @param {boolean} ignore Provide `true` to ignore the calendars of the assigned resources when scheduling the task. If `false` the task performs only when its own [calendar](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-calendar) and some of the assigned resource calendars allow that.
     */
    setIgnoreResourceCalendar(ignore: boolean): Promise<void>;
    /**
     * Either activates or deactivates the task depending on the passed value.
     * Will cause the schedule to be updated - returns a `Promise`
     * @param {boolean} inactive `true` to deactivate the task, `false` to activate it.
     */
    setInactive(inactive: boolean): Promise<void>;
    /**
     * Sets [segments](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-segments) field value.
     * @param {EventSegmentModel[]} segments Array of segments or null to make the task not segmented.
     */
    setSegments(segments: EventSegmentModel[]): Promise<any>;
    /**
     * Sets the start date of the task. Will cause the schedule to be updated - returns a `Promise`
     * @param {Date} date The new start date.
     * @param {boolean} keepDuration Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.
     */
    setStartDate(date: Date, keepDuration?: boolean): Promise<void>;
    /**
     * Splits the task to segments.
     * @param {Date} from The date to split this task at.
     * @param {number} lag Split duration.
     * @param {string} lagUnit Split duration unit.
     */
    splitToSegments(from: Date, lag?: number, lagUnit?: string): Promise<any>;
    /**
     * This method unassigns a resource from this task.
     * @param {ResourceModel} resource The instance of [ResourceModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel)
     */
    unassign(resource: ResourceModel): Promise<void>;
}

/**
 * An internal utility class which generates sample project data for Examples and Tests.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/util/ProjectGenerator)
 */
export class ProjectGenerator {
}

type GanttFeaturesType = {
    baselines: Baselines
    cellCopyPaste: CellCopyPaste
    cellEdit: CellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnLines: ColumnLines
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    criticalPaths: CriticalPaths
    dependencies: Dependencies
    dependencyEdit: DependencyEdit
    eventFilter: EventFilter
    eventSegments: EventSegments
    excelExporter: GridExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GridGroupSummary
    headerMenu: HeaderMenu
    headerZoom: HeaderZoom
    indicators: Indicators
    labels: Labels
    mergeCells: MergeCells
    mspExport: MspExport
    nonWorkingTime: NonWorkingTime
    pan: Pan
    parentArea: ParentArea
    pdfExport: PdfExport
    percentBar: PercentBar
    print: Print
    progressLine: ProgressLine
    projectLines: ProjectLines
    quickFind: QuickFind
    regionResize: RegionResize
    rollups: Rollups
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: RowReorder
    rowResize: GridRowResize
    scheduleMenu: ScheduleMenu
    scheduleTooltip: ScheduleTooltip
    scrollButtons: ScrollButtons
    search: Search
    sort: Sort
    split: GridSplit
    stickyCells: StickyCells
    stripe: Stripe
    summary: Summary
    taskCopyPaste: TaskCopyPaste
    taskDrag: TaskDrag
    taskDragCreate: TaskDragCreate
    taskEdit: TaskEdit
    taskMenu: TaskMenu
    taskNonWorkingTime: TaskNonWorkingTime
    taskResize: TaskResize
    taskSegmentDrag: TaskSegmentDrag
    taskSegmentResize: TaskSegmentResize
    taskTooltip: TaskTooltip
    timeAxisHeaderMenu: TimeAxisHeaderMenu
    timeRanges: TimeRanges
    timeSpanHighlight: TimeSpanHighlight
    tree: Tree
    treeGroup: TreeGroup
    versions: Versions
}

type GanttFeaturesConfigType = {
    baselines: string|boolean|Partial<BaselinesConfig>
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<CellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnLines: string|boolean|Partial<ColumnLinesConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    criticalPaths: string|boolean|Partial<CriticalPathsConfig>
    dependencies: string|boolean|Partial<DependenciesConfig>
    dependencyEdit: string|boolean|Partial<DependencyEditConfig>
    eventFilter: string|boolean|Partial<EventFilterConfig>
    eventSegments: string|boolean|Partial<EventSegmentsConfig>
    excelExporter: string|boolean|Partial<GridExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GridGroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    headerZoom: string|boolean|Partial<HeaderZoomConfig>
    indicators: string|boolean|Partial<IndicatorsConfig>
    labels: string|boolean|Partial<LabelsConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    mspExport: string|boolean|Partial<MspExportConfig>
    nonWorkingTime: string|boolean|Partial<NonWorkingTimeConfig>
    pan: string|boolean|Partial<PanConfig>
    parentArea: string|boolean|Partial<ParentAreaConfig>
    pdfExport: string|boolean|Partial<PdfExportConfig>
    percentBar: string|boolean|Partial<PercentBarConfig>
    print: string|boolean|Partial<PrintConfig>
    progressLine: string|boolean|Partial<ProgressLineConfig>
    projectLines: string|boolean|Partial<ProjectLinesConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    rollups: string|boolean|Partial<RollupsConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<RowReorderConfig>
    rowResize: string|boolean|Partial<GridRowResizeConfig>
    scheduleMenu: string|boolean|Partial<ScheduleMenuConfig>
    scheduleTooltip: string|boolean|Partial<ScheduleTooltipConfig>
    scrollButtons: string|boolean|Partial<ScrollButtonsConfig>
    search: string|boolean|Partial<SearchConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<GridSplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<SummaryConfig>
    taskCopyPaste: string|boolean|Partial<TaskCopyPasteConfig>
    taskDrag: string|boolean|Partial<TaskDragConfig>
    taskDragCreate: string|boolean|Partial<TaskDragCreateConfig>
    taskEdit: string|boolean|Partial<TaskEditConfig>
    taskMenu: string|boolean|Partial<TaskMenuConfig>
    taskNonWorkingTime: string|boolean|Partial<TaskNonWorkingTimeConfig>
    taskResize: string|boolean|Partial<TaskResizeConfig>
    taskSegmentDrag: string|boolean|Partial<TaskSegmentDragConfig>
    taskSegmentResize: string|boolean|Partial<TaskSegmentResizeConfig>
    taskTooltip: string|boolean|Partial<TaskTooltipConfig>
    timeAxisHeaderMenu: string|boolean|Partial<TimeAxisHeaderMenuConfig>
    timeRanges: string|boolean|Partial<TimeRangesConfig>
    timeSpanHighlight: string|boolean|Partial<TimeSpanHighlightConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<TreeGroupConfig>
    versions: string|boolean|Partial<VersionsConfig>
}

/**
 * Type with configuration options for [Gantt](https://bryntum.com/products/grid/docs/api/Gantt/view/Gantt) class.
 */
type GanttConfig = ContainerItemConfig & {
    type: 'gantt'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Set to `false` to not allow creating dependencies
     */
    allowCreate: boolean
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-allowOver)
     */
    allowOver: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/gantt/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-ariaLive)
     */
    ariaLive: string
    /**
     * Inline assignments, will be loaded into the backing project's AssignmentStore.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * You can set this option to `false` to make the timeline panel start and end on the exact provided
     * [startDate](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.
     */
    autoAdjustTimeAxis: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Controls how much space to leave between stacked event bars in px.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-barMargin)
     */
    barMargin: number
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-bufferCoef)
     */
    bufferCoef: number
    /**
     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.
     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side
     * has less than that of the rendered content - a shift is triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-bufferThreshold)
     */
    bufferThreshold: number
    /**
     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/gantt/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * A tooltip config object that will be applied to the dependency creation [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip)
     */
    creationTooltip: Partial<TooltipConfig>
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {object} data Data about the dependency being created
     * @param {TimeSpan} data.source The from event
     * @param {TimeSpan} data.target The target event
     * @param {string} data.fromSide The from side (start, end, top, bottom)
     * @param {string} data.toSide The target side (start, end, top, bottom)
     * @param {boolean} data.valid The validity of the dependency
     * @returns {string|DomConfig}
     */
    creationTooltipTemplate: (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: boolean }) => string|DomConfig
    /**
     * Class implementing the popup resolving *scheduling cycles*.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-cycleResolutionPopupClass)
     */
    cycleResolutionPopupClass: typeof CycleResolutionPopup
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-data)
     */
    data: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * The file name of an image file to use when a resource has no image, or its image cannot be loaded.
     */
    defaultResourceImageName: string
    /**
     * Inline dependencies, will be loaded into the backing project's DependencyStore.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.
     */
    dependencyIdField: string
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#function-getState) when there is a column
     * configured without an `id`. But the recommended action is to always configure columns with an `id` when
     * using states.
     */
    disableGridColumnIdWarning: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the
     * view preset. For allowed values see [format](https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#function-format-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-displayDateFormat)
     */
    displayDateFormat: string
    /**
     * Set to `true` to display special popups allowing user
     * to resolve [scheduling conflicts](https://bryntum.com/products/gantt/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup),
     * [cycles](https://bryntum.com/products/gantt/docs/api/SchedulerPro/widget/CycleResolutionPopup) or calendar misconfigurations.
     * The popup will suggest user ways to resolve the corresponding case.
     */
    displaySchedulingIssueResolutionPopup: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.
     * Specify `false` to use raw value
     */
    durationDisplayPrecision: number|boolean
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid
     */
    emptyText: string|Partial<DomConfig>
    /**
     * Allow using [Delete] and [Backspace] to remove events/assignments
     */
    enableDeleteKey: boolean
    /**
     * Set to `false` if you don't want event bar DOM updates to animate.
     */
    enableEventAnimations: boolean
    /**
     * Enables showing occurrences of recurring events across the scheduler's time axis. If you want to disable
     * the recurrence popup, you can choose set the `defaultAction` to `future` to affect all future
     * occurrences, or `single` to just affect the currently selected event.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-enableRecurringEvents)
     */
    enableRecurringEvents: boolean|{
        defaultAction?: 'single'|'future'
    }
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-endDate)
     */
    endDate: Date|string
    /**
     * Task color used by default. Tasks can specify their own [eventColor](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-eventColor),
     * which will override this config.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Event style used by default. Events and resources can specify their own style, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class
     * to it. Available styles are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-eventStyle)
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<GanttFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start
     * and end dates retain their value on the data level.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-fillTicks)
     */
    fillTicks: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).
     * Note that setting [suppressFit](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming
     * cannot be used when `forceFit` is set.
     */
    forceFit: boolean
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * Returns dates that will constrain resize and drag operations. The method will be called with the
     * task being dragged.
     * @param {TaskModel} taskRecord The task record being moved or resized.
     * @returns {DateConstraint} Constraining object containing `start` and `end` constraints. Omitting either will mean that end is not constrained. So you can prevent a resize or move from moving *before* a certain time while not constraining the end date.
     */
    getDateConstraints: (taskRecord: TaskModel) => DateConstraint
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/gantt/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-getRowHeight)
     * @param {Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: Model }) => number
    /**
     * A config [object](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * By default the row hover effect is not visible in the Scheduler part of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-hideRowHover)
     */
    hideRowHover: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you
     * want to maximize scroll performance.
     */
    ignoreDomEventsWhileScrolling: boolean
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,
     * when the scroller comes close to the start/end edges.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-infiniteScroll)
     */
    infiniteScroll: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/gantt/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.
     * Set this to `false` if you want to control height and vertical position using CSS instead.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-managedEventSizing)
     */
    managedEventSizing: boolean
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: DurationUnit
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of
     * [ViewPresets](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)
     * for information. Unless you have modified the collection of available presets, the max zoom level is
     * milliseconds.
     */
    maxZoomLevel: number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)
     */
    minZoomLevel: number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * A callback function or a set of `name: value` properties to apply on tasks created using the task context menu.
     * Be aware that `name` value will be ignored since it's auto generated and may be configured with localization.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-newTaskDefaults)
     * @returns {TaskModelConfig|object} Set of properties to apply on tasks created using the task context menu
     */
    newTaskDefaults: Partial<TaskModelConfig>|object|(() => Partial<TaskModelConfig>|object)
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-owner)
     */
    owner: Widget
    /**
     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),
     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-partner)
     */
    partner: TimelineBase
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * An array of [ViewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/ViewPreset) config objects
     * which describes the available timeline layouts for this scheduler.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-presets)
     */
    presets: Partial<ViewPresetConfig>[]
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * A [ProjectModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel) instance or a config object. The project holds all Gantt data.
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Accepts the following values:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-projectProgressReporting)
     */
    projectProgressReporting: string|null
    /**
     * Configure as `true` to make the Gantt read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * The path for resource images, used by various widgets such as the resource assignment column.
     */
    resourceImageFolderPath: string
    /**
     * Inline resources, will be loaded into the backing project's ResourceStore.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-rowHeight)
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * Class implementing the popup resolving *scheduling conflicts* and *calendar misconfigurations*.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-schedulingIssueResolutionPopupClass)
     */
    schedulingIssueResolutionPopupClass: typeof SchedulingIssueResolutionPopup
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/gantt/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/gantt/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * True to scroll the task bar into view when clicking a cell, you can also pass a
     * [scroll config](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#function-scrollTaskIntoView) object.
     */
    scrollTaskIntoViewOnCellClick: boolean|BryntumScrollOptions
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/gantt/docs/api/Core/helper/util/Scroller).
     * See the [scrollerClass](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).
     */
    scrollerClass: typeof Scroller
    /**
     * Selection configuration settings, change these properties to control how selection works and what can be
     * selected.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-selectionMode)
     */
    selectionMode: GridSelectionMode
    /**
     * `false` to not show a tooltip while creating a dependency
     */
    showCreationTooltip: boolean
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * Set to `true` to show the lag in the tooltip
     */
    showLagInTooltip: boolean
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * If set to `true` this will show a color field in the [TaskEdit](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit) editor and also a
     * picker in the [TaskMenu](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu). Both enables the user to choose a color which will be
     * applied to the task bar's background. See TaskModel's [eventColor](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-eventColor)
     * config.
     */
    showTaskColorPickers: boolean
    /**
     * Set to `true` to show a tooltip when hovering a dependency line
     */
    showTooltip: boolean
    /**
     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-snap)
     */
    snap: boolean
    /**
     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)
     * is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate: boolean
    /**
     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-startDate)
     */
    startDate: Date|string
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/gantt/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.
     */
    stickyHeaders: boolean
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-store)
     */
    store: Partial<Store|StoreConfig|AjaxStore|AjaxStoreConfig>
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)
     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.
     */
    suppressFit: boolean
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a task is rendered into the gantt to render the contents of the task.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-taskRenderer)
     * @param {object} detail An object containing the information needed to render a Task.
     * @param {TaskModel} detail.taskRecord The task record.
     * @param {object} detail.renderData An object containing details about the task rendering.
     * @param {DomClassList|string} detail.renderData.cls An object whose property names represent the CSS class names to be added to the tasks's element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {string|<String, String>} detail.renderData.style Inline styles for the task bar DOM element. Use either 'border: 1px solid black' or { border: '1px solid black' }
     * @param {DomClassList|string} detail.renderData.wrapperCls An object whose property names represent the CSS class names to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {DomClassList|string} detail.renderData.iconCls An object whose property names represent the CSS class names to be added to a task icon element.
     * @param {TimeSpan>|<TimeSpanConfig>} indicators An array that can be populated with TimeSpan records or their config objects to have them rendered in the task row
     * @returns {string|DomConfig|DomConfig>} A simple string, or a DomConfig object defining the actual HTML
     */
    taskRenderer: (detail: { taskRecord: TaskModel, renderData: { cls: DomClassList|string, style: string|Record<string, string>, wrapperCls: DomClassList|string, iconCls: DomClassList|string } }, indicators: TimeSpan[]|Partial<TimeSpanConfig>[]) => string|DomConfig|DomConfig[]
    /**
     * The [TaskStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore) holding the tasks to be rendered into the Gantt.
     */
    taskStore: TaskStore
    /**
     * Inline tasks, will be loaded into an internally created TaskStore.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * CSS class used for terminals
     */
    terminalCls: string
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-terminalHideDelay)
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-terminalShowDelay)
     */
    terminalShowDelay: number
    /**
     * Where (on event bar edges) to display terminals. The sides are `'start'`, `'top'`,
     * `'end'` and `'bottom'`
     */
    terminalSides: string[]
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-terminalSize)
     */
    terminalSize: number|string
    /**
     * The width/height (depending on vertical / horizontal mode) of all the time columns.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-tickSize)
     */
    tickSize: number
    /**
     * A [TimeAxis](https://bryntum.com/products/gantt/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of
     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none
     * supplied.
     */
    timeAxis: Partial<TimeAxisConfig>|TimeAxis
    /**
     * Inline time ranges, will be loaded into the backing project's time range store.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a time zone or a UTC offset. This will set the projects
     * [timeZone](https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please see project's config [documentation](https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-timeZone)
     */
    timeZone: string|number
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-title)
     */
    title: string
    /**
     * True to toggle the collapsed/expanded state when clicking a parent task bar.
     */
    toggleParentTasksOnClick: boolean
    /**
     * The [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {DependencyBaseModel} dependency The dependency record
     * @returns {string|DomConfig}
     */
    tooltipTemplate: (dependency: DependencyBaseModel) => string|DomConfig
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-ui)
     */
    ui: string|object
    /**
     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),
     * managed by [PresetManager](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.
     * Or a config object for a viewPreset.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-viewPreset)
     */
    viewPreset: string|Partial<ViewPresetConfig>
    /**
     * A date to bring into view initially on the scrollable timeline.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-visibleDate)
     */
    visibleDate: Date|VisibleDate
    /**
     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make
     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in
     * [zoomToSpan](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.
     */
    visibleZoomFactor: number
    /**
     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.
     * When omitted, the week start day is retrieved from the active locale class.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.
     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/gantt/docs/api/Scheduler/data/TimeAxis#config-include) property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#config-workingTime)
     */
    workingTime: {
        fromDay?: number
        toDay?: number
        fromHour?: number
        toHour?: number
    }
    /**
     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,
     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to
     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds
     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You
     * can use [minZoomLevel](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.
     */
    zoomKeepsOriginalTimespan: boolean
    /**
     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.
     */
    zoomOnMouseWheel: boolean
    /**
     * True to zoom to time span when double-clicking a time axis cell.
     */
    zoomOnTimeAxisDoubleClick: boolean
    /**
     * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onAfterDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget after a dependency is successfully saved using the
     * dependency edit popup
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance or Gantt instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     */
    onAfterDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => void)|string
    /**
     * Fires on the owning Gantt at the end of the drag create gesture whether or not
     * a task was scheduled by the gesture.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {HTMLElement} event.proxyElement The element showing the drag creation zone.
     */
    onAfterDragCreate: ((event: { source: Gantt, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after an event record is saved
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.eventRecord The event record about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterEventSave: ((event: { source: SchedulerPro, eventRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Gantt after a task drop, regardless if the drop validity
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {boolean} event.valid
     */
    onAfterTaskDrop: ((event: { source: Gantt, taskRecords: TaskModel[], valid: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after task editing is finished by applying changes, cancelling them
     * or deleting the task record.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord Task record used in the task editor
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskEdit: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after a task is saved
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Gantt after a task drop, regardless if the drop validity
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dropped segments
     * @param {boolean} event.valid
     */
    onAfterTaskSegmentDrop: ((event: { source: Gantt, taskRecords: TaskModel[], valid: boolean }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/gantt/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => boolean|void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onBeforeColumnResize: ((event: { source: Grid, column: Column, domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is added from the dependency
     * edit popup
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler or Gantt instance
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependency edit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be added
     */
    onBeforeDependencyAdd: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onBeforeDependencyCreateDrag: ((event: { source: TimeSpan }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {'start'|'end'|'top'|'bottom'} event.fromSide The from side (start / end / top / bottom)
     * @param {'start'|'end'|'top'|'bottom'} event.toSide The to side (start / end / top / bottom)
     */
    onBeforeDependencyCreateFinalize: ((event: { source: TimeSpan, target: TimeSpan, fromSide: 'start'|'end'|'top'|'bottom', toSide: 'start'|'end'|'top'|'bottom' }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is deleted from the dependency
     * edit popup
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency record about to be deleted
     */
    onBeforeDependencyDelete: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before an dependency is displayed in the editor.
     * This may be listened for to allow an application to take over dependency editing duties. Return `false` to
     * stop the default editing UI from being shown or a `Promise` yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler or Gantt instance
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     */
    onBeforeDependencyEdit: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for a dependency is available, but before it is shown. Allows
     * manipulating fields before the widget is shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler or Gantt instance
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     * @param {Popup} event.editor The editor popup
     */
    onBeforeDependencyEditShow: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is saved using the dependency edit popup
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler or Gantt instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     * @param {object} event.values The new values
     */
    onBeforeDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel, values: object }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Gantt at the beginning of the drag gesture
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {Date} event.date The datetime associated with the drag start point.
     */
    onBeforeDragCreate: ((event: { source: Gantt, taskRecord: TaskModel, date: Date }) => void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeDragCreateFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Scheduler instance
     * @param {HTMLElement} event.proxyElement Proxy element, representing future event
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle drag create asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize drag create. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeDragCreateFinalize: ((event: { source: Gantt, proxyElement: HTMLElement, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeEventResizeFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {SchedulerEventModel} event.context.eventRecord Event record being resized
     * @param {Date} event.context.startDate New startDate (changed if resizing start side)
     * @param {Date} event.context.endDate New endDate (changed if resizing end side)
     * @param {Date} event.context.originalStartDate Start date before resize
     * @param {Date} event.context.originalEndDate End date before resize
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     * @param {Event} event.event Browser event
     */
    onBeforeEventResizeFinalize: ((event: { source: Scheduler, context: { eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date, async: boolean, finalize: Function }, event: Event }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before an event record is saved, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeEventSave)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.eventRecord The event record about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeEventSave: ((event: { source: SchedulerPro, eventRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler Pro before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {SchedulerProResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventSegmentResize: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: SchedulerProResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler Pro to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeEventSegmentResizeFinalize)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     */
    onBeforeEventSegmentResizeFinalize: ((event: { source: SchedulerPro, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Location} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onBeforeFillHandleDragStart: ((event: { cell: Location, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires on the owning Gantt before export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforeMspExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforePan: ((event: { event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler/Gantt before showing dependency terminals on a task or event. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The hovered task
     */
    onBeforeShowTerminals: ((event: { source: TimeSpan }) => boolean|void)|string
    /**
     * Fires when adding a task from the UI to allow data mutation.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The task
     */
    onBeforeTaskAdd: ((event: { source: Gantt, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a task is deleted, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeTaskDelete)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance.
     * @param {EventModel} event.taskRecord The record about to be deleted
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskDelete: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Gantt before task dragging starts. Return false to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event The native browser event
     */
    onBeforeTaskDrag: ((event: { source: Gantt, taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeTaskDropFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {TaskModel[]} event.context.taskRecords The dragged task records
     * @param {boolean} event.context.valid Set this to `false` to mark the drop as invalid
     * @param {boolean} event.context.async Set true to handle dragdrop asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize dragdrop. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskDropFinalize: ((event: { source: Gantt, context: { taskRecords: TaskModel[], valid: boolean, async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is displayed in the editor.
     * This may be listened to in order to take over the task editing flow. Returning `false`
     * stops the default editing UI from being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeTaskEdit)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {SchedulerProTaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.taskElement The element which represents the task
     */
    onBeforeTaskEdit: ((event: { source: SchedulerPro, taskEdit: SchedulerProTaskEdit, taskRecord: EventModel, taskElement: HTMLElement }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is available but before it is shown. Allows
     * manipulating fields etc.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The SchedulerPro instance
     * @param {SchedulerProTaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.eventElement The element which represents the task
     * @param {TaskEditorBase} event.editor The editor
     */
    onBeforeTaskEditShow: ((event: { source: SchedulerPro, taskEdit: SchedulerProTaskEdit, taskRecord: EventModel, eventElement: HTMLElement, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Gantt before resizing starts. Return false to prevent the operation.
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event
     */
    onBeforeTaskResize: ((event: { taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeTaskResizeFinalize)
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {Date} event.context.endDate New endDate
     * @param {Date} event.context.originalEndDate End date before resize
     * @param {Event} event.event Browser event
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskResizeFinalize: ((event: { taskRecord: TaskModel, source: Gantt, context: { endDate: Date, originalEndDate: Date, async: boolean, finalize: Function }, event: Event }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is saved, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeTaskSave)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Gantt before segment dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord The segment about to be dragged
     * @param {Event} event.event The native browser event
     */
    onBeforeTaskSegmentDrag: ((event: { source: Gantt, taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeTaskSegmentDropFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {TaskModel[]} event.context.taskRecords Dragged segments
     * @param {boolean} event.context.valid Set this to `false` to mark the drop as invalid
     * @param {boolean} event.context.async Set true to handle dragdrop asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize dragdrop. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskSegmentDropFinalize: ((event: { source: Gantt, context: { taskRecords: TaskModel[], valid: boolean, async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired on the owning Gantt before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeTaskSegmentResize: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Gantt to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeTaskSegmentResizeFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     */
    onBeforeTaskSegmentResizeFinalize: ((event: { source: Gantt, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered cell
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the cell that the mouse left
     * @param {Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResize: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResizeStart: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when critical paths get highlighted.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-criticalPathsHighlighted)
     */
    onCriticalPathsHighlighted: (() => void)|string
    /**
     * Fired when critical paths get hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-criticalPathsUnhighlighted)
     */
    onCriticalPathsUnhighlighted: (() => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the range of dates encapsulated by the UI changes. This will be when
     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen
     * when zooming, or changing [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-viewPreset).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-dateRangeChange)
     * @param {object} event Event object
     * @param {TimelineBase} event.source This Scheduler/Gantt instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onDateRangeChange: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when dependencies are rendered
     */
    onDependenciesDrawn: (() => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a context menu event is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyContextMenu: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onDependencyCreateDragStart: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a double click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyDblClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves out of a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOut: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves over a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOver: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationComplete: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationStart: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Gantt after the task has been scheduled.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {MouseEvent} event.event The ending mouseup event.
     * @param {HTMLElement} event.proxyElement The proxy element showing the drag creation zone.
     */
    onDragCreateEnd: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the drag start has created a proxy element.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {HTMLElement} event.proxyElement The proxy representing the new event.
     */
    onDragCreateStart: ((event: { source: Gantt, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Partial<LocationConfig>[]|Location[]} event.selectedCells The cells that is currently being dragged over
     * @param {Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Partial<LocationConfig>[]|Location[], selectedRecords: Model[] }) => void)|string
    /**
     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     * @param {MouseEvent} event.event Pointer event which triggered the context menu (if any)
     */
    onEventMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerEventModel} event.eventRecord
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuItem: ((event: { source: Scheduler, item: MenuItem, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler after showing the context menu for an event
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Menu} event.menu The menu
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuShow: ((event: { source: Scheduler, menu: Menu, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler on each resize move event
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventPartialResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     */
    onEventResizeEnd: ((event: { source: Scheduler, changed: boolean, eventRecord: SchedulerEventModel }) => void)|string
    /**
     * Fires on the owning Scheduler when event resizing starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventResizeStart: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler Pro on each segment resize move event
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventSegmentPartialResize: ((event: { source: SchedulerPro, eventRecord: EventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler Pro after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {EventModel} event.eventRecord Segment being resized
     */
    onEventSegmentResizeEnd: ((event: { source: SchedulerPro, changed: boolean, eventRecord: EventModel }) => void)|string
    /**
     * Fires on the owning Scheduler Pro when segment resizing starts
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {SchedulerProResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventSegmentResizeStart: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: SchedulerProResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleBeforeDragFinalize: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDrag: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    onFillHandleDragAbort: (() => void)|string
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragEnd: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Location} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragStart: ((event: { cell: Location, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Column} event.column The column clicked on.
     */
    onHeaderClick: ((event: { domEvent: Event, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt when project content is exported
     * to XML, before the XML is downloaded by the browser.
     * @param {object} event Event object
     * @param {object} event.config Export config
     * @param {string} event.fileContent Exported XML-file content
     */
    onMspExport: ((event: { config: object, fileContent: string }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dragging the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrag: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget if a percent bar drag-drop operation is aborted
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragAbort: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when percent bar dragging starts
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragStart: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dropping the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrop: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Task is released, no longer in view/removed. A good spot for cleaning custom things added in a `renderTask`
     * listener up, if needed.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {object} event.renderData Task render data
     * @param {TaskModel} event.taskRecord Rendered task
     * @param {HTMLElement} event.element Task element
     */
    onReleaseTask: ((event: { source: Gantt, renderData: object, taskRecord: TaskModel, element: HTMLElement }) => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Task is rendered, its element is available in DOM.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {object} event.renderData Task render data
     * @param {TaskModel} event.taskRecord Rendered task
     * @param {HTMLElement} event.element Task element
     */
    onRenderTask: ((event: { source: Gantt, renderData: object, taskRecord: TaskModel, element: HTMLElement }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when clicking a resource avatar or chip in the cells of the [ResourceAssignmentColumn](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn).
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {ResourceModel} event.resourceRecord Resource record
     * @param {Event} event.event Browser event
     */
    onResourceAssignmentClick: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: ResourceModel, event: Event }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered row
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule.
     * Allows manipulation of the items to show in the same way as in `processItems`. Returning `false` from a listener
     * prevents the menu from being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onScheduleMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, date: Date, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    onScheduleMenuItem: ((event: { source: Scheduler, item: MenuItem, resourceRecord: SchedulerResourceModel, date: Date, element: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Menu} event.menu The menu
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    onScheduleMenuShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, menu: Menu, resourceRecord: SchedulerResourceModel, date: Date, targetElement: HTMLElement }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterExpandClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Triggered after a click on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskClick: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a rightclick (or long press on a touch device) on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskContextMenu: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a doubleclick on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskDblClick: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt while a task is being dragged
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {object} event.dragData
     * @param {boolean} event.changed `true` if startDate has changed.
     */
    onTaskDrag: ((event: { source: Gantt, taskRecords: TaskModel[], startDate: Date, endDate: Date, dragData: object, changed: boolean }) => void)|string
    /**
     * Fires on the owning Gantt when task dragging starts
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     */
    onTaskDragStart: ((event: { source: Gantt, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning Gantt after a valid task drop
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {boolean} event.isCopy
     */
    onTaskDrop: ((event: { source: Gantt, taskRecords: TaskModel[], isCopy: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is canceled.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord the task about the shown in the editor
     * @param {TaskEditorBase} event.editor The editor
     */
    onTaskEditCanceled: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Triggered when a keydown event is observed if there are selected tasks.
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {KeyboardEvent} event.event Browser event
     */
    onTaskKeyDown: ((event: { source: Gantt, taskRecord: TaskModel, event: KeyboardEvent }) => void)|string
    /**
     * Triggered when a keyup event is observed if there are selected tasks.
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {KeyboardEvent} event.event Browser event
     */
    onTaskKeyUp: ((event: { source: Gantt, taskRecord: TaskModel, event: KeyboardEvent }) => void)|string
    /**
     * This event fires on the owning Gantt before the context menu is shown for a task. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {Partial<MenuItemConfig>[]} event.items Menu item configs
     * @param {TaskModel} event.taskRecord Event record for which the menu was triggered
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuBeforeShow: ((event: { source: Gantt, items: Partial<MenuItemConfig>[], taskRecord: TaskModel, taskElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Gantt when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {MenuItem} event.item
     * @param {TaskModel} event.taskRecord
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuItem: ((event: { source: Gantt, item: MenuItem, taskRecord: TaskModel, taskElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Gantt after showing the context menu for an event
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {Menu} event.menu The menu
     * @param {TaskModel} event.taskRecord Event record for which the menu was triggered
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuShow: ((event: { source: Gantt, menu: Menu, taskRecord: TaskModel, taskElement: HTMLElement }) => void)|string
    /**
     * Triggered after a mousedown on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseDown: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouseout from a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseOut: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a mouseover on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseOver: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a mouseup on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseUp: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeClick: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when right-clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeContextMenu: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when double-clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeDblClick: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt on each resize move event
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Date} event.start The start date
     * @param {Date} event.end The end date
     * @param {HTMLElement} event.element The element
     */
    onTaskPartialResize: ((event: { taskRecord: TaskModel, start: Date, end: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {boolean} event.changed
     * @param {TaskModel} event.taskRecord
     */
    onTaskResizeEnd: ((event: { changed: boolean, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Gantt when task resizing starts
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event
     */
    onTaskResizeStart: ((event: { taskRecord: TaskModel, event: Event }) => void)|string
    /**
     * Fires on the owning Gantt while a segment is being dragged
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dragged segments
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {object} event.dragData
     * @param {boolean} event.changed `true` if startDate has changed.
     */
    onTaskSegmentDrag: ((event: { source: Gantt, taskRecords: TaskModel[], startDate: Date, endDate: Date, dragData: object, changed: boolean }) => void)|string
    /**
     * Fires on the owning Gantt when segment dragging starts
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dragged segments
     */
    onTaskSegmentDragStart: ((event: { source: Gantt, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning Gantt after a valid task drop
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dropped segments
     * @param {boolean} event.isCopy
     */
    onTaskSegmentDrop: ((event: { source: Gantt, taskRecords: TaskModel[], isCopy: boolean }) => void)|string
    /**
     * Fires on the owning Gantt on each resize move event
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onTaskSegmentPartialResize: ((event: { source: Gantt, taskRecord: TaskModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {TaskModel} event.taskRecord Segment being resized
     */
    onTaskSegmentResizeEnd: ((event: { source: Gantt, changed: boolean, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Gantt when event resizing starts
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onTaskSegmentResizeStart: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {object} event.config Config object used to reconfigure the time axis.
     * @param {Date} event.config.startDate New start date (if supplied)
     * @param {Date} event.config.endDate New end date (if supplied)
     */
    onTimeAxisChange: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-timeAxisHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderContextMenu: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderDblClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.
     * This happens when the grid changes height, or when the subgrid which encapsulates the
     * scheduler column changes width.
     * @param {object} event Event object
     * @param {Widget} event.source This Scheduler
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onTimelineViewportResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean, allRecords?: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * <strong>Note that this event fires on the owning [SchedulerPro](https://bryntum.com/products/gantt/docs/api/SchedulerPro/view/SchedulerPro).</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-transactionChange)
     * @param {object} event Event object
     * @param {boolean} event.hasChanges Whether any changes are recorded that are not yet attached to a version.
     */
    onTransactionChange: ((event: { hasChanges: boolean }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
    /**
     * Fired when the range of dates visible within the viewport changes. This will be when
     * scrolling along a time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-visibleDateRangeChange)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onVisibleDateRangeChange: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
}

/**
 * <h2>Summary</h2>
 * The <b>Gantt</b> widget is the main component that visualizes the project data contained in a
 * [ProjectModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel) instance. The Gantt view is implemented as a TreeGrid consisting of a left section
 * showing the task hierarchy (or WBS) and a right section showing a graphical representation of the tasks on the time
 * axis. Task relationships (or "dependencies") are rendered as arrows between the tasks and in the background you can
 * (optionally) render non-working time too.
 * The view is very interactive by default:
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt)
 */
export class Gantt extends GanttBase {
    /**
     * An object containing Features
     */
    features: GanttFeaturesType
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered cell
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the cell that the mouse left
     * @param {Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Partial<LocationConfig>[]|Location[]} event.selectedCells The cells that is currently being dragged over
     * @param {Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Partial<LocationConfig>[]|Location[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Column} event.column The column clicked on.
     */
    onHeaderClick: ((event: { domEvent: Event, column: Column }) => boolean|void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered row
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<GanttConfig>} config
     */
    constructor(config?: Partial<GanttConfig>);
}

type GanttBaseFeaturesType = {
    baselines: Baselines
    cellCopyPaste: CellCopyPaste
    cellEdit: CellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnLines: ColumnLines
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    criticalPaths: CriticalPaths
    dependencies: Dependencies
    dependencyEdit: DependencyEdit
    eventFilter: EventFilter
    eventSegments: EventSegments
    excelExporter: GridExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GridGroupSummary
    headerMenu: HeaderMenu
    headerZoom: HeaderZoom
    indicators: Indicators
    labels: Labels
    mergeCells: MergeCells
    mspExport: MspExport
    nonWorkingTime: NonWorkingTime
    pan: Pan
    parentArea: ParentArea
    pdfExport: PdfExport
    percentBar: PercentBar
    print: Print
    progressLine: ProgressLine
    projectLines: ProjectLines
    quickFind: QuickFind
    regionResize: RegionResize
    rollups: Rollups
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: RowReorder
    rowResize: GridRowResize
    scheduleMenu: ScheduleMenu
    scheduleTooltip: ScheduleTooltip
    scrollButtons: ScrollButtons
    search: Search
    sort: Sort
    split: GridSplit
    stickyCells: StickyCells
    stripe: Stripe
    summary: Summary
    taskCopyPaste: TaskCopyPaste
    taskDrag: TaskDrag
    taskDragCreate: TaskDragCreate
    taskEdit: TaskEdit
    taskMenu: TaskMenu
    taskNonWorkingTime: TaskNonWorkingTime
    taskResize: TaskResize
    taskSegmentDrag: TaskSegmentDrag
    taskSegmentResize: TaskSegmentResize
    taskTooltip: TaskTooltip
    timeAxisHeaderMenu: TimeAxisHeaderMenu
    timeRanges: TimeRanges
    timeSpanHighlight: TimeSpanHighlight
    tree: Tree
    treeGroup: TreeGroup
    versions: Versions
}

type GanttBaseFeaturesConfigType = {
    baselines: string|boolean|Partial<BaselinesConfig>
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<CellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnLines: string|boolean|Partial<ColumnLinesConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    criticalPaths: string|boolean|Partial<CriticalPathsConfig>
    dependencies: string|boolean|Partial<DependenciesConfig>
    dependencyEdit: string|boolean|Partial<DependencyEditConfig>
    eventFilter: string|boolean|Partial<EventFilterConfig>
    eventSegments: string|boolean|Partial<EventSegmentsConfig>
    excelExporter: string|boolean|Partial<GridExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GridGroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    headerZoom: string|boolean|Partial<HeaderZoomConfig>
    indicators: string|boolean|Partial<IndicatorsConfig>
    labels: string|boolean|Partial<LabelsConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    mspExport: string|boolean|Partial<MspExportConfig>
    nonWorkingTime: string|boolean|Partial<NonWorkingTimeConfig>
    pan: string|boolean|Partial<PanConfig>
    parentArea: string|boolean|Partial<ParentAreaConfig>
    pdfExport: string|boolean|Partial<PdfExportConfig>
    percentBar: string|boolean|Partial<PercentBarConfig>
    print: string|boolean|Partial<PrintConfig>
    progressLine: string|boolean|Partial<ProgressLineConfig>
    projectLines: string|boolean|Partial<ProjectLinesConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    rollups: string|boolean|Partial<RollupsConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<RowReorderConfig>
    rowResize: string|boolean|Partial<GridRowResizeConfig>
    scheduleMenu: string|boolean|Partial<ScheduleMenuConfig>
    scheduleTooltip: string|boolean|Partial<ScheduleTooltipConfig>
    scrollButtons: string|boolean|Partial<ScrollButtonsConfig>
    search: string|boolean|Partial<SearchConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<GridSplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<SummaryConfig>
    taskCopyPaste: string|boolean|Partial<TaskCopyPasteConfig>
    taskDrag: string|boolean|Partial<TaskDragConfig>
    taskDragCreate: string|boolean|Partial<TaskDragCreateConfig>
    taskEdit: string|boolean|Partial<TaskEditConfig>
    taskMenu: string|boolean|Partial<TaskMenuConfig>
    taskNonWorkingTime: string|boolean|Partial<TaskNonWorkingTimeConfig>
    taskResize: string|boolean|Partial<TaskResizeConfig>
    taskSegmentDrag: string|boolean|Partial<TaskSegmentDragConfig>
    taskSegmentResize: string|boolean|Partial<TaskSegmentResizeConfig>
    taskTooltip: string|boolean|Partial<TaskTooltipConfig>
    timeAxisHeaderMenu: string|boolean|Partial<TimeAxisHeaderMenuConfig>
    timeRanges: string|boolean|Partial<TimeRangesConfig>
    timeSpanHighlight: string|boolean|Partial<TimeSpanHighlightConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<TreeGroupConfig>
    versions: string|boolean|Partial<VersionsConfig>
}

/**
 * Type with configuration options for [GanttBase](https://bryntum.com/products/grid/docs/api/Gantt/view/GanttBase) class.
 */
type GanttBaseConfig = ContainerItemConfig & {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Set to `false` to not allow creating dependencies
     */
    allowCreate: boolean
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-allowOver)
     */
    allowOver: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/gantt/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-ariaLive)
     */
    ariaLive: string
    /**
     * Inline assignments, will be loaded into the backing project's AssignmentStore.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * You can set this option to `false` to make the timeline panel start and end on the exact provided
     * [startDate](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.
     */
    autoAdjustTimeAxis: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * Controls how much space to leave between stacked event bars in px.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-barMargin)
     */
    barMargin: number
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-bufferCoef)
     */
    bufferCoef: number
    /**
     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.
     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side
     * has less than that of the rendered content - a shift is triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-bufferThreshold)
     */
    bufferThreshold: number
    /**
     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/gantt/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * A tooltip config object that will be applied to the dependency creation [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip)
     */
    creationTooltip: Partial<TooltipConfig>
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {object} data Data about the dependency being created
     * @param {TimeSpan} data.source The from event
     * @param {TimeSpan} data.target The target event
     * @param {string} data.fromSide The from side (start, end, top, bottom)
     * @param {string} data.toSide The target side (start, end, top, bottom)
     * @param {boolean} data.valid The validity of the dependency
     * @returns {string|DomConfig}
     */
    creationTooltipTemplate: (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: boolean }) => string|DomConfig
    /**
     * Class implementing the popup resolving *scheduling cycles*.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-cycleResolutionPopupClass)
     */
    cycleResolutionPopupClass: typeof CycleResolutionPopup
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-data)
     */
    data: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * The file name of an image file to use when a resource has no image, or its image cannot be loaded.
     */
    defaultResourceImageName: string
    /**
     * Inline dependencies, will be loaded into the backing project's DependencyStore.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.
     */
    dependencyIdField: string
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#function-getState) when there is a column
     * configured without an `id`. But the recommended action is to always configure columns with an `id` when
     * using states.
     */
    disableGridColumnIdWarning: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the
     * view preset. For allowed values see [format](https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#function-format-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-displayDateFormat)
     */
    displayDateFormat: string
    /**
     * Set to `true` to display special popups allowing user
     * to resolve [scheduling conflicts](https://bryntum.com/products/gantt/docs/api/SchedulerPro/widget/SchedulingIssueResolutionPopup),
     * [cycles](https://bryntum.com/products/gantt/docs/api/SchedulerPro/widget/CycleResolutionPopup) or calendar misconfigurations.
     * The popup will suggest user ways to resolve the corresponding case.
     */
    displaySchedulingIssueResolutionPopup: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.
     * Specify `false` to use raw value
     */
    durationDisplayPrecision: number|boolean
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid
     */
    emptyText: string|Partial<DomConfig>
    /**
     * Allow using [Delete] and [Backspace] to remove events/assignments
     */
    enableDeleteKey: boolean
    /**
     * Set to `false` if you don't want event bar DOM updates to animate.
     */
    enableEventAnimations: boolean
    /**
     * Enables showing occurrences of recurring events across the scheduler's time axis. If you want to disable
     * the recurrence popup, you can choose set the `defaultAction` to `future` to affect all future
     * occurrences, or `single` to just affect the currently selected event.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-enableRecurringEvents)
     */
    enableRecurringEvents: boolean|{
        defaultAction?: 'single'|'future'
    }
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-endDate)
     */
    endDate: Date|string
    /**
     * Task color used by default. Tasks can specify their own [eventColor](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-eventColor),
     * which will override this config.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-eventColor)
     */
    eventColor: EventColor
    /**
     * Event style used by default. Events and resources can specify their own style, with priority order being:
     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class
     * to it. Available styles are:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-eventStyle)
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<GanttBaseFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start
     * and end dates retain their value on the data level.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-fillTicks)
     */
    fillTicks: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).
     * Note that setting [suppressFit](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming
     * cannot be used when `forceFit` is set.
     */
    forceFit: boolean
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * Returns dates that will constrain resize and drag operations. The method will be called with the
     * task being dragged.
     * @param {TaskModel} taskRecord The task record being moved or resized.
     * @returns {DateConstraint} Constraining object containing `start` and `end` constraints. Omitting either will mean that end is not constrained. So you can prevent a resize or move from moving *before* a certain time while not constraining the end date.
     */
    getDateConstraints: (taskRecord: TaskModel) => DateConstraint
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/gantt/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-getRowHeight)
     * @param {Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: Model }) => number
    /**
     * A config [object](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * By default the row hover effect is not visible in the Scheduler part of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-hideRowHover)
     */
    hideRowHover: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you
     * want to maximize scroll performance.
     */
    ignoreDomEventsWhileScrolling: boolean
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,
     * when the scroller comes close to the start/end edges.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-infiniteScroll)
     */
    infiniteScroll: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/gantt/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.
     * Set this to `false` if you want to control height and vertical position using CSS instead.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-managedEventSizing)
     */
    managedEventSizing: boolean
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).
     * When zooming to a view with a larger unit, no non-working time elements will be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-maxTimeAxisUnit)
     */
    maxTimeAxisUnit: DurationUnit
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of
     * [ViewPresets](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)
     * for information. Unless you have modified the collection of available presets, the max zoom level is
     * milliseconds.
     */
    maxZoomLevel: number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)
     */
    minZoomLevel: number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * A callback function or a set of `name: value` properties to apply on tasks created using the task context menu.
     * Be aware that `name` value will be ignored since it's auto generated and may be configured with localization.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-newTaskDefaults)
     * @returns {TaskModelConfig|object} Set of properties to apply on tasks created using the task context menu
     */
    newTaskDefaults: Partial<TaskModelConfig>|object|(() => Partial<TaskModelConfig>|object)
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-owner)
     */
    owner: Widget
    /**
     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),
     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-partner)
     */
    partner: TimelineBase
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * An array of [ViewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/ViewPreset) config objects
     * which describes the available timeline layouts for this scheduler.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-presets)
     */
    presets: Partial<ViewPresetConfig>[]
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * A [ProjectModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel) instance or a config object. The project holds all Gantt data.
     */
    project: ProjectModel|Partial<ProjectModelConfig>
    /**
     * Accepts the following values:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-projectProgressReporting)
     */
    projectProgressReporting: string|null
    /**
     * Configure as `true` to make the Gantt read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * The path for resource images, used by various widgets such as the resource assignment column.
     */
    resourceImageFolderPath: string
    /**
     * Inline resources, will be loaded into the backing project's ResourceStore.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-rowHeight)
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * Class implementing the popup resolving *scheduling conflicts* and *calendar misconfigurations*.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-schedulingIssueResolutionPopupClass)
     */
    schedulingIssueResolutionPopupClass: typeof SchedulingIssueResolutionPopup
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/gantt/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/gantt/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * True to scroll the task bar into view when clicking a cell, you can also pass a
     * [scroll config](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#function-scrollTaskIntoView) object.
     */
    scrollTaskIntoViewOnCellClick: boolean|BryntumScrollOptions
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/gantt/docs/api/Core/helper/util/Scroller).
     * See the [scrollerClass](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).
     */
    scrollerClass: typeof Scroller
    /**
     * Selection configuration settings, change these properties to control how selection works and what can be
     * selected.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-selectionMode)
     */
    selectionMode: GridSelectionMode
    /**
     * `false` to not show a tooltip while creating a dependency
     */
    showCreationTooltip: boolean
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * Set to `true` to show the lag in the tooltip
     */
    showLagInTooltip: boolean
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * If set to `true` this will show a color field in the [TaskEdit](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskEdit) editor and also a
     * picker in the [TaskMenu](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskMenu). Both enables the user to choose a color which will be
     * applied to the task bar's background. See TaskModel's [eventColor](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-eventColor)
     * config.
     */
    showTaskColorPickers: boolean
    /**
     * Set to `true` to show a tooltip when hovering a dependency line
     */
    showTooltip: boolean
    /**
     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-snap)
     */
    snap: boolean
    /**
     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)
     * is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate: boolean
    /**
     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-startDate)
     */
    startDate: Date|string
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/gantt/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.
     */
    stickyHeaders: boolean
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-store)
     */
    store: Partial<Store|StoreConfig|AjaxStore|AjaxStoreConfig>
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)
     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.
     */
    suppressFit: boolean
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a task is rendered into the gantt to render the contents of the task.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-taskRenderer)
     * @param {object} detail An object containing the information needed to render a Task.
     * @param {TaskModel} detail.taskRecord The task record.
     * @param {object} detail.renderData An object containing details about the task rendering.
     * @param {DomClassList|string} detail.renderData.cls An object whose property names represent the CSS class names to be added to the tasks's element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {string|<String, String>} detail.renderData.style Inline styles for the task bar DOM element. Use either 'border: 1px solid black' or { border: '1px solid black' }
     * @param {DomClassList|string} detail.renderData.wrapperCls An object whose property names represent the CSS class names to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class name based on the property name. Using this technique, you do not have to know whether the class is already there, or deal with concatenation.
     * @param {DomClassList|string} detail.renderData.iconCls An object whose property names represent the CSS class names to be added to a task icon element.
     * @param {TimeSpan>|<TimeSpanConfig>} indicators An array that can be populated with TimeSpan records or their config objects to have them rendered in the task row
     * @returns {string|DomConfig|DomConfig>} A simple string, or a DomConfig object defining the actual HTML
     */
    taskRenderer: (detail: { taskRecord: TaskModel, renderData: { cls: DomClassList|string, style: string|Record<string, string>, wrapperCls: DomClassList|string, iconCls: DomClassList|string } }, indicators: TimeSpan[]|Partial<TimeSpanConfig>[]) => string|DomConfig|DomConfig[]
    /**
     * The [TaskStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore) holding the tasks to be rendered into the Gantt.
     */
    taskStore: TaskStore
    /**
     * Inline tasks, will be loaded into an internally created TaskStore.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * CSS class used for terminals
     */
    terminalCls: string
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-terminalHideDelay)
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-terminalShowDelay)
     */
    terminalShowDelay: number
    /**
     * Where (on event bar edges) to display terminals. The sides are `'start'`, `'top'`,
     * `'end'` and `'bottom'`
     */
    terminalSides: string[]
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-terminalSize)
     */
    terminalSize: number|string
    /**
     * The width/height (depending on vertical / horizontal mode) of all the time columns.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-tickSize)
     */
    tickSize: number
    /**
     * A [TimeAxis](https://bryntum.com/products/gantt/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of
     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none
     * supplied.
     */
    timeAxis: Partial<TimeAxisConfig>|TimeAxis
    /**
     * Inline time ranges, will be loaded into the backing project's time range store.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a time zone or a UTC offset. This will set the projects
     * [timeZone](https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please see project's config [documentation](https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-timeZone)
     */
    timeZone: string|number
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-title)
     */
    title: string
    /**
     * True to toggle the collapsed/expanded state when clicking a parent task bar.
     */
    toggleParentTasksOnClick: boolean
    /**
     * The [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {DependencyBaseModel} dependency The dependency record
     * @returns {string|DomConfig}
     */
    tooltipTemplate: (dependency: DependencyBaseModel) => string|DomConfig
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-ui)
     */
    ui: string|object
    /**
     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),
     * managed by [PresetManager](https://bryntum.com/products/gantt/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.
     * Or a config object for a viewPreset.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-viewPreset)
     */
    viewPreset: string|Partial<ViewPresetConfig>
    /**
     * A date to bring into view initially on the scrollable timeline.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-visibleDate)
     */
    visibleDate: Date|VisibleDate
    /**
     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make
     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in
     * [zoomToSpan](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.
     */
    visibleZoomFactor: number
    /**
     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.
     * When omitted, the week start day is retrieved from the active locale class.
     */
    weekStartDay: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.
     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/gantt/docs/api/Scheduler/data/TimeAxis#config-include) property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-workingTime)
     */
    workingTime: {
        fromDay?: number
        toDay?: number
        fromHour?: number
        toHour?: number
    }
    /**
     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,
     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to
     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds
     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You
     * can use [minZoomLevel](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.
     */
    zoomKeepsOriginalTimespan: boolean
    /**
     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.
     */
    zoomOnMouseWheel: boolean
    /**
     * True to zoom to time span when double-clicking a time axis cell.
     */
    zoomOnTimeAxisDoubleClick: boolean
    /**
     * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onAfterDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget after a dependency is successfully saved using the
     * dependency edit popup
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance or Gantt instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     */
    onAfterDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => void)|string
    /**
     * Fires on the owning Gantt at the end of the drag create gesture whether or not
     * a task was scheduled by the gesture.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {HTMLElement} event.proxyElement The element showing the drag creation zone.
     */
    onAfterDragCreate: ((event: { source: Gantt, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after an event record is saved
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.eventRecord The event record about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterEventSave: ((event: { source: SchedulerPro, eventRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Gantt after a task drop, regardless if the drop validity
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {boolean} event.valid
     */
    onAfterTaskDrop: ((event: { source: Gantt, taskRecords: TaskModel[], valid: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after task editing is finished by applying changes, cancelling them
     * or deleting the task record.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord Task record used in the task editor
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskEdit: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance after a task is saved
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onAfterTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Gantt after a task drop, regardless if the drop validity
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dropped segments
     * @param {boolean} event.valid
     */
    onAfterTaskSegmentDrop: ((event: { source: Gantt, taskRecords: TaskModel[], valid: boolean }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/gantt/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => boolean|void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onBeforeColumnResize: ((event: { source: Grid, column: Column, domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is added from the dependency
     * edit popup
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler or Gantt instance
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependency edit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be added
     */
    onBeforeDependencyAdd: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onBeforeDependencyCreateDrag: ((event: { source: TimeSpan }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation is about to finalize
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {'start'|'end'|'top'|'bottom'} event.fromSide The from side (start / end / top / bottom)
     * @param {'start'|'end'|'top'|'bottom'} event.toSide The to side (start / end / top / bottom)
     */
    onBeforeDependencyCreateFinalize: ((event: { source: TimeSpan, target: TimeSpan, fromSide: 'start'|'end'|'top'|'bottom', toSide: 'start'|'end'|'top'|'bottom' }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is deleted from the dependency
     * edit popup
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency record about to be deleted
     */
    onBeforeDependencyDelete: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before an dependency is displayed in the editor.
     * This may be listened for to allow an application to take over dependency editing duties. Return `false` to
     * stop the default editing UI from being shown or a `Promise` yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler or Gantt instance
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     */
    onBeforeDependencyEdit: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for a dependency is available, but before it is shown. Allows
     * manipulating fields before the widget is shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler or Gantt instance
     * @param {SchedulerDependencyEdit} event.dependencyEdit The dependencyEdit feature
     * @param {SchedulerDependencyModel} event.dependencyRecord The record about to be shown in the editor.
     * @param {Popup} event.editor The editor popup
     */
    onBeforeDependencyEditShow: ((event: { source: Scheduler, dependencyEdit: SchedulerDependencyEdit, dependencyRecord: SchedulerDependencyModel, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a dependency is saved using the dependency edit popup
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler or Gantt instance
     * @param {SchedulerDependencyModel} event.dependencyRecord The dependency about to be saved
     * @param {object} event.values The new values
     */
    onBeforeDependencySave: ((event: { source: Scheduler, dependencyRecord: SchedulerDependencyModel, values: object }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Gantt at the beginning of the drag gesture
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {Date} event.date The datetime associated with the drag start point.
     */
    onBeforeDragCreate: ((event: { source: Gantt, taskRecord: TaskModel, date: Date }) => void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeDragCreateFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Scheduler instance
     * @param {HTMLElement} event.proxyElement Proxy element, representing future event
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle drag create asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize drag create. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeDragCreateFinalize: ((event: { source: Gantt, proxyElement: HTMLElement, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeEventResizeFinalize)
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {object} event.context
     * @param {SchedulerEventModel} event.context.eventRecord Event record being resized
     * @param {Date} event.context.startDate New startDate (changed if resizing start side)
     * @param {Date} event.context.endDate New endDate (changed if resizing end side)
     * @param {Date} event.context.originalStartDate Start date before resize
     * @param {Date} event.context.originalEndDate End date before resize
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     * @param {Event} event.event Browser event
     */
    onBeforeEventResizeFinalize: ((event: { source: Scheduler, context: { eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, originalStartDate: Date, originalEndDate: Date, async: boolean, finalize: Function }, event: Event }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before an event record is saved, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeEventSave)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.eventRecord The event record about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeEventSave: ((event: { source: SchedulerPro, eventRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler Pro before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {SchedulerProResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeEventSegmentResize: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: SchedulerProResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Scheduler Pro to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeEventSegmentResizeFinalize)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     */
    onBeforeEventSegmentResizeFinalize: ((event: { source: SchedulerPro, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Location} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onBeforeFillHandleDragStart: ((event: { cell: Location, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires on the owning Gantt before export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforeMspExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforePan: ((event: { event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired on the owning Scheduler/Gantt before showing dependency terminals on a task or event. Return `false` to
     * prevent it
     * @param {object} event Event object
     * @param {TimeSpan} event.source The hovered task
     */
    onBeforeShowTerminals: ((event: { source: TimeSpan }) => boolean|void)|string
    /**
     * Fires when adding a task from the UI to allow data mutation.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The task
     */
    onBeforeTaskAdd: ((event: { source: Gantt, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before a task is deleted, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskDelete)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance.
     * @param {EventModel} event.taskRecord The record about to be deleted
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskDelete: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Gantt before task dragging starts. Return false to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event The native browser event
     */
    onBeforeTaskDrag: ((event: { source: Gantt, taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskDropFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {TaskModel[]} event.context.taskRecords The dragged task records
     * @param {boolean} event.context.valid Set this to `false` to mark the drop as invalid
     * @param {boolean} event.context.async Set true to handle dragdrop asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize dragdrop. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskDropFinalize: ((event: { source: Gantt, context: { taskRecords: TaskModel[], valid: boolean, async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is displayed in the editor.
     * This may be listened to in order to take over the task editing flow. Returning `false`
     * stops the default editing UI from being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskEdit)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {SchedulerProTaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.taskElement The element which represents the task
     */
    onBeforeTaskEdit: ((event: { source: SchedulerPro, taskEdit: SchedulerProTaskEdit, taskRecord: EventModel, taskElement: HTMLElement }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is available but before it is shown. Allows
     * manipulating fields etc.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The SchedulerPro instance
     * @param {SchedulerProTaskEdit} event.taskEdit The taskEdit feature
     * @param {EventModel} event.taskRecord The task about to be shown in the editor.
     * @param {HTMLElement} event.eventElement The element which represents the task
     * @param {TaskEditorBase} event.editor The editor
     */
    onBeforeTaskEditShow: ((event: { source: SchedulerPro, taskEdit: SchedulerProTaskEdit, taskRecord: EventModel, eventElement: HTMLElement, editor: TaskEditorBase }) => void)|string
    /**
     * Fires on the owning Gantt before resizing starts. Return false to prevent the operation.
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event
     */
    onBeforeTaskResize: ((event: { taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskResizeFinalize)
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {Date} event.context.endDate New endDate
     * @param {Date} event.context.originalEndDate End date before resize
     * @param {Event} event.event Browser event
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskResizeFinalize: ((event: { taskRecord: TaskModel, source: Gantt, context: { endDate: Date, originalEndDate: Date, async: boolean, finalize: Function }, event: Event }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget instance before a task is saved, return `false` to prevent it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskSave)
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord The task about to be saved
     * @param {TaskEditorBase} event.editor The editor widget
     */
    onBeforeTaskSave: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Gantt before segment dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord The segment about to be dragged
     * @param {Event} event.event The native browser event
     */
    onBeforeTaskSegmentDrag: ((event: { source: Gantt, taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskSegmentDropFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {TaskModel[]} event.context.taskRecords Dragged segments
     * @param {boolean} event.context.valid Set this to `false` to mark the drop as invalid
     * @param {boolean} event.context.async Set true to handle dragdrop asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize dragdrop. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskSegmentDropFinalize: ((event: { source: Gantt, context: { taskRecords: TaskModel[], valid: boolean, async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired on the owning Gantt before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeTaskSegmentResize: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Gantt to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskSegmentResizeFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     */
    onBeforeTaskSegmentResizeFinalize: ((event: { source: Gantt, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered cell
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the cell that the mouse left
     * @param {Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResize: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResizeStart: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when critical paths get highlighted.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-criticalPathsHighlighted)
     */
    onCriticalPathsHighlighted: (() => void)|string
    /**
     * Fired when critical paths get hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-criticalPathsUnhighlighted)
     */
    onCriticalPathsUnhighlighted: (() => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the range of dates encapsulated by the UI changes. This will be when
     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen
     * when zooming, or changing [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/TimelineBase#config-viewPreset).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-dateRangeChange)
     * @param {object} event Event object
     * @param {TimelineBase} event.source This Scheduler/Gantt instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onDateRangeChange: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when dependencies are rendered
     */
    onDependenciesDrawn: (() => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a context menu event is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyContextMenu: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     */
    onDependencyCreateDragStart: ((event: { source: TimeSpan }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {DependencyBaseModel} event.dependency The created dependency
     */
    onDependencyCreateDrop: ((event: { source: TimeSpan, target: TimeSpan, dependency: DependencyBaseModel }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when a double click is registered on a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyDblClick: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves out of a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOut: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the mouse moves over a dependency line.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {SchedulerDependencyModel} event.dependency
     * @param {MouseEvent} event.event
     */
    onDependencyMouseOver: ((event: { source: Scheduler, dependency: SchedulerDependencyModel, event: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation completes
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationComplete: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fired on the owning Scheduler/Gantt when asynchronous dependency validation starts
     * @param {object} event Event object
     * @param {TimeSpan} event.source The source task
     * @param {TimeSpan} event.target The target task
     * @param {number} event.dependencyType The dependency type, see [Type](https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static)
     */
    onDependencyValidationStart: ((event: { source: TimeSpan, target: TimeSpan, dependencyType: number }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Gantt after the task has been scheduled.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {MouseEvent} event.event The ending mouseup event.
     * @param {HTMLElement} event.proxyElement The proxy element showing the drag creation zone.
     */
    onDragCreateEnd: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the drag start has created a proxy element.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {HTMLElement} event.proxyElement The proxy representing the new event.
     */
    onDragCreateStart: ((event: { source: Gantt, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Partial<LocationConfig>[]|Location[]} event.selectedCells The cells that is currently being dragged over
     * @param {Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Partial<LocationConfig>[]|Location[], selectedRecords: Model[] }) => void)|string
    /**
     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     * @param {MouseEvent} event.event Pointer event which triggered the context menu (if any)
     */
    onEventMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerEventModel} event.eventRecord
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuItem: ((event: { source: Scheduler, item: MenuItem, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler after showing the context menu for an event
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Menu} event.menu The menu
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuShow: ((event: { source: Scheduler, menu: Menu, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler on each resize move event
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventPartialResize: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     */
    onEventResizeEnd: ((event: { source: Scheduler, changed: boolean, eventRecord: SchedulerEventModel }) => void)|string
    /**
     * Fires on the owning Scheduler when event resizing starts
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {SchedulerEventModel} event.eventRecord Event record being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventResizeStart: ((event: { source: Scheduler, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Scheduler Pro on each segment resize move event
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onEventSegmentPartialResize: ((event: { source: SchedulerPro, eventRecord: EventModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Scheduler Pro after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {EventModel} event.eventRecord Segment being resized
     */
    onEventSegmentResizeEnd: ((event: { source: SchedulerPro, changed: boolean, eventRecord: EventModel }) => void)|string
    /**
     * Fires on the owning Scheduler Pro when segment resizing starts
     * @param {object} event Event object
     * @param {SchedulerPro} event.source Scheduler Pro instance
     * @param {EventModel} event.eventRecord Segment being resized
     * @param {SchedulerProResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onEventSegmentResizeStart: ((event: { source: SchedulerPro, eventRecord: EventModel, resourceRecord: SchedulerProResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleBeforeDragFinalize: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDrag: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    onFillHandleDragAbort: (() => void)|string
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragEnd: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Location} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragStart: ((event: { cell: Location, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Column} event.column The column clicked on.
     */
    onHeaderClick: ((event: { domEvent: Event, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt when project content is exported
     * to XML, before the XML is downloaded by the browser.
     * @param {object} event Event object
     * @param {object} event.config Export config
     * @param {string} event.fileContent Exported XML-file content
     */
    onMspExport: ((event: { config: object, fileContent: string }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dragging the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrag: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget if a percent bar drag-drop operation is aborted
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragAbort: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when percent bar dragging starts
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragStart: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dropping the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrop: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Task is released, no longer in view/removed. A good spot for cleaning custom things added in a `renderTask`
     * listener up, if needed.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {object} event.renderData Task render data
     * @param {TaskModel} event.taskRecord Rendered task
     * @param {HTMLElement} event.element Task element
     */
    onReleaseTask: ((event: { source: Gantt, renderData: object, taskRecord: TaskModel, element: HTMLElement }) => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Task is rendered, its element is available in DOM.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {object} event.renderData Task render data
     * @param {TaskModel} event.taskRecord Rendered task
     * @param {HTMLElement} event.element Task element
     */
    onRenderTask: ((event: { source: Gantt, renderData: object, taskRecord: TaskModel, element: HTMLElement }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when clicking a resource avatar or chip in the cells of the [ResourceAssignmentColumn](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn).
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {ResourceModel} event.resourceRecord Resource record
     * @param {Event} event.event Browser event
     */
    onResourceAssignmentClick: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: ResourceModel, event: Event }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered row
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule.
     * Allows manipulation of the items to show in the same way as in `processItems`. Returning `false` from a listener
     * prevents the menu from being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onScheduleMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, date: Date, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    onScheduleMenuItem: ((event: { source: Scheduler, item: MenuItem, resourceRecord: SchedulerResourceModel, date: Date, element: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Menu} event.menu The menu
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    onScheduleMenuShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, menu: Menu, resourceRecord: SchedulerResourceModel, date: Date, targetElement: HTMLElement }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterExpandClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Triggered after a click on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskClick: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a rightclick (or long press on a touch device) on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskContextMenu: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a doubleclick on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskDblClick: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt while a task is being dragged
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {object} event.dragData
     * @param {boolean} event.changed `true` if startDate has changed.
     */
    onTaskDrag: ((event: { source: Gantt, taskRecords: TaskModel[], startDate: Date, endDate: Date, dragData: object, changed: boolean }) => void)|string
    /**
     * Fires on the owning Gantt when task dragging starts
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     */
    onTaskDragStart: ((event: { source: Gantt, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning Gantt after a valid task drop
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {boolean} event.isCopy
     */
    onTaskDrop: ((event: { source: Gantt, taskRecords: TaskModel[], isCopy: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget when the editor for an event is canceled.
     * @param {object} event Event object
     * @param {SchedulerPro} event.source The Scheduler Pro instance
     * @param {EventModel} event.taskRecord the task about the shown in the editor
     * @param {TaskEditorBase} event.editor The editor
     */
    onTaskEditCanceled: ((event: { source: SchedulerPro, taskRecord: EventModel, editor: TaskEditorBase }) => void)|string
    /**
     * Triggered when a keydown event is observed if there are selected tasks.
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {KeyboardEvent} event.event Browser event
     */
    onTaskKeyDown: ((event: { source: Gantt, taskRecord: TaskModel, event: KeyboardEvent }) => void)|string
    /**
     * Triggered when a keyup event is observed if there are selected tasks.
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {KeyboardEvent} event.event Browser event
     */
    onTaskKeyUp: ((event: { source: Gantt, taskRecord: TaskModel, event: KeyboardEvent }) => void)|string
    /**
     * This event fires on the owning Gantt before the context menu is shown for a task. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {Partial<MenuItemConfig>[]} event.items Menu item configs
     * @param {TaskModel} event.taskRecord Event record for which the menu was triggered
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuBeforeShow: ((event: { source: Gantt, items: Partial<MenuItemConfig>[], taskRecord: TaskModel, taskElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Gantt when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {MenuItem} event.item
     * @param {TaskModel} event.taskRecord
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuItem: ((event: { source: Gantt, item: MenuItem, taskRecord: TaskModel, taskElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Gantt after showing the context menu for an event
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {Menu} event.menu The menu
     * @param {TaskModel} event.taskRecord Event record for which the menu was triggered
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuShow: ((event: { source: Gantt, menu: Menu, taskRecord: TaskModel, taskElement: HTMLElement }) => void)|string
    /**
     * Triggered after a mousedown on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseDown: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouseout from a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseOut: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a mouseover on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseOver: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a mouseup on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseUp: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeClick: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when right-clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeContextMenu: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when double-clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeDblClick: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt on each resize move event
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Date} event.start The start date
     * @param {Date} event.end The end date
     * @param {HTMLElement} event.element The element
     */
    onTaskPartialResize: ((event: { taskRecord: TaskModel, start: Date, end: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {boolean} event.changed
     * @param {TaskModel} event.taskRecord
     */
    onTaskResizeEnd: ((event: { changed: boolean, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Gantt when task resizing starts
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event
     */
    onTaskResizeStart: ((event: { taskRecord: TaskModel, event: Event }) => void)|string
    /**
     * Fires on the owning Gantt while a segment is being dragged
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dragged segments
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {object} event.dragData
     * @param {boolean} event.changed `true` if startDate has changed.
     */
    onTaskSegmentDrag: ((event: { source: Gantt, taskRecords: TaskModel[], startDate: Date, endDate: Date, dragData: object, changed: boolean }) => void)|string
    /**
     * Fires on the owning Gantt when segment dragging starts
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dragged segments
     */
    onTaskSegmentDragStart: ((event: { source: Gantt, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning Gantt after a valid task drop
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dropped segments
     * @param {boolean} event.isCopy
     */
    onTaskSegmentDrop: ((event: { source: Gantt, taskRecords: TaskModel[], isCopy: boolean }) => void)|string
    /**
     * Fires on the owning Gantt on each resize move event
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onTaskSegmentPartialResize: ((event: { source: Gantt, taskRecord: TaskModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {TaskModel} event.taskRecord Segment being resized
     */
    onTaskSegmentResizeEnd: ((event: { source: Gantt, changed: boolean, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Gantt when event resizing starts
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onTaskSegmentResizeStart: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler
     * @param {object} event.config Config object used to reconfigure the time axis.
     * @param {Date} event.config.startDate New start date (if supplied)
     * @param {Date} event.config.endDate New end date (if supplied)
     */
    onTimeAxisChange: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-timeAxisHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderContextMenu: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler} event.source Scheduler instance
     * @param {TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.event DEPRECATED 5.3.0 Use `domEvent` instead
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderDblClick: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, event: MouseEvent, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.
     * This happens when the grid changes height, or when the subgrid which encapsulates the
     * scheduler column changes width.
     * @param {object} event Event object
     * @param {Widget} event.source This Scheduler
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onTimelineViewportResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean, allRecords?: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * <strong>Note that this event fires on the owning [SchedulerPro](https://bryntum.com/products/gantt/docs/api/SchedulerPro/view/SchedulerPro).</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-transactionChange)
     * @param {object} event Event object
     * @param {boolean} event.hasChanges Whether any changes are recorded that are not yet attached to a version.
     */
    onTransactionChange: ((event: { hasChanges: boolean }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
    /**
     * Fired when the range of dates visible within the viewport changes. This will be when
     * scrolling along a time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-visibleDateRangeChange)
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onVisibleDateRangeChange: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
}

/**
 * A thin base class for [Gantt](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt). Does not include any features by default, allowing smaller
 * custom-built bundles if used in place of [Gantt](https://bryntum.com/products/gantt/docs/api/Gantt/view/Gantt).
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase)
 */
export class GanttBase extends TimelineBase {
    /**
     * Class name getter.
     * Used when original ES6 class name is minified or mangled during production build.
     * Should be overridden in each class which extends Widget or it descendants.
     */
    static $name: string
    /**
     * Set this static flag to `true` to enable accessibility features.
     */
    static accessibility: boolean
    /**
     * By default, on touch devices, a two finger pinch gesture where both touch points are
     * within a Bryntum widget is converted to a `CTRL/wheel` event injected at the mid-point between
     * the two initial touches.
     */
    static convertPinchToMousewheel: boolean
    /**
     * Updated dynamically with the current element that the mouse is over. For use when showing a Tooltip
     * from code which is not triggered by a pointer event so that a tooltip can be positioned.
     */
    static readonly currentOverElement: HTMLElement
    /**
     * Set this to true to have the [shared tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-tooltip-static) pop up
     * to show the full text for elements which have overflowing text and have `text-overflow:ellipsis`.
     */
    static showOverflow: boolean
    /**
     * The shared [Tooltip](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip) instance which handles
     * [tooltips](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-tooltip) which are <strong>not</strong> configured
     * with `newInstance : true`.
     */
    static readonly tooltip: Tooltip
    /**
     * Widget name alias which you can use in the `items` of a Container widget.
     */
    static type: string
    /**
     * This property is a shortcut to the static [accessibility](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-accessibility-static) property.
     */
    accessibility: boolean
    /**
     * The HTML element that triggered this Tooltip to show
     */
    readonly activeTarget: HTMLElement
    /**
     * Get/set this widget's `align-self` flexbox setting. This may be set to modify how this widget is aligned
     * within the cross axis of a flexbox layout container.
     */
    alignSelf: string
    /**
     * `false` to require a drop on a target event bar side circle to define the dependency type.
     * If dropped on the event bar, the `defaultValue` of the DependencyModel `type` field will be used to
     * determine the target task side.
     */
    allowDropOnEventBar: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * The `aria-live` value for this widget.
     */
    ariaLive: string
    /**
     * Get/set assignments, applies to the backing project's AssignmentStore.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * Get toolbar [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar) docked to the bottom of the panel
     */
    readonly bbar: Toolbar
    /**
     * Get/set calendars, applies to the backing projects CalendarManagerStore.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * An object providing the `record` and `column` for a widget embedded inside a [WidgetColumn](https://bryntum.com/products/gantt/docs/api/Grid/column/WidgetColumn)
     */
    readonly cellInfo: CellWidgetContext
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     */
    cls: string|object
    /**
     * This property is `true` if the panel is currently collapsing.
     */
    readonly collapsing: boolean
    /**
     * Returns a *copy* of the full configuration which was used to configure this object.
     */
    readonly config: object
    /**
     * This property is set to `true` when focus is within the ownership tree of this Widget.
     */
    readonly containsFocus: boolean
    /**
     * The child element into which content should be placed. This means where [html](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-html) should be put,
     * or, for [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container)s, where child items should be rendered.
     */
    readonly contentElement: HTMLElement
    /**
     * A template function that will be called to generate the HTML contents of the dependency creation tooltip.
     * You can return either an HTML string or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     */
    creationTooltipTemplate: (data: { source: TimeSpan, target: TimeSpan, fromSide: string, toSide: string, valid: boolean }) => string|DomConfig
    /**
     * Get widgets elements dataset or assign to it
     */
    dataset: object
    /**
     * Get/set dependencies, applies to the backing projects DependencyStore.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * Get/set element's disabled state
     */
    disabled: boolean
    /**
     * Get this widget's encapsulating HTMLElement, which is created along with the widget but added to DOM at
     * render time.
     */
    readonly element: HTMLElement
    /**
     * Task color used by default. Tasks can specify their own [eventColor](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-eventColor),
     * which will override this config.
     */
    eventColor: EventColor
    /**
     * This property is `true` if the panel is currently expanding.
     */
    readonly expanding: boolean
    /**
     * Get element's flex property. This may be configured as a single number or a format string:
     */
    flex: number|string
    /**
     * Get this widget's primary focus holding element if this widget is itself focusable, or contains focusable widgets.
     */
    readonly focusElement: HTMLElement
    /**
     * Get element's offsetHeight or sets its style.height, or specified height if element no created yet.
     */
    height: number|string
    /**
     * Get/set the widget hidden state.
     */
    hidden: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * Get/set widgets id
     */
    id: string
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * This property is set to `true` before the `constructor` returns.
     */
    readonly isConstructing: boolean
    /**
     * This property is set to `true` by [destroy](https://bryntum.com/products/gantt/docs/api/Core/Base#function-destroy) after destruction.
     */
    readonly isDestroyed: boolean
    /**
     * This property is set to `true` on entry to the [destroy](https://bryntum.com/products/gantt/docs/api/Core/Base#function-destroy) method. It remains on the objects after
     * returning from `destroy()`. If [isDestroyed](https://bryntum.com/products/gantt/docs/api/Core/Base#property-isDestroyed) is `true`, this property will also be `true`, so
     * there is no need to test for both (for example, `comp.isDestroying || comp.isDestroyed`).
     */
    readonly isDestroying: boolean
    /**
     * Returns `true` if this instance implements the [State](https://bryntum.com/products/gantt/docs/api/Core/mixin/State) interface.
     */
    readonly isStateful: boolean
    /**
     * Determines visibility by checking if the Widget is hidden, or any ancestor is hidden and that it has an
     * element which is visible in the DOM
     */
    readonly isVisible: boolean
    /**
     * Get the global LocaleHelper
     */
    readonly localeHelper: typeof LocaleHelper
    /**
     * Get the global LocaleManager
     */
    readonly localeManager: typeof LocaleManager
    /**
     * Get element's margin property. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Get/set element's maxHeight. Getter returns max-height from elements style, which is always a string. Setter
     * accepts either a String or a Number (which will have 'px' appended). Note that like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height),
     * *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * Get/set elements maxWidth. Getter returns max-width from elements style, which is always a string. Setter accepts
     * either a String or a Number (which will have 'px' appended). Note that like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width),
     * *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * Get/set element's minHeight. Getter returns min-height from elements style, which is always a string. Setter
     * accepts either a String or a Number (which will have 'px' appended). Note that like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height),
     * *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * Get/set elements minWidth. Getter returns min-width from elements style, which is always a string. Setter accepts
     * either a String or a Number (which will have 'px' appended). Note that like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width),
     * *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Get this Widget's next sibling in the parent [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), or, if not
     * in a Container, the next sibling widget in the same *parentElement*.
     */
    readonly nextSibling: Widget
    /**
     * The child element which scrolls if any. This means the element used by the [scrollable](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-scrollable).
     */
    readonly overflowElement: HTMLElement
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), <strong>this property will
     * be read-only, and will refer to the the containing Widget</strong>.
     */
    readonly owner: Widget
    /**
     * Get this Widget's parent when used as a child in a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container),
     */
    readonly parent: Widget
    /**
     * Get this Widget's previous sibling in the parent [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), or, if not
     * in a Container, the previous sibling widget in the same *parentElement*.
     */
    readonly previousSibling: Widget
    /**
     * The [ProjectModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel) instance containing the data visualized by the Gantt chart.
     */
    project: ProjectModel
    /**
     * Configure as `true` to make the Gantt read-only, by disabling any UIs for modifying data.
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     */
    readonly ref: string
    /**
     * Get/set resources, applies to the backing project's ResourceStore.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * True to scroll the task bar into view when clicking a cell, you can also pass a
     * [scroll config](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#function-scrollTaskIntoView) object.
     */
    scrollTaskIntoViewOnCellClick: boolean|BryntumScrollOptions
    /**
     * Accessor to the [Scroller](https://bryntum.com/products/gantt/docs/api/Core/helper/util/Scroller) which can be used
     * to both set and read scroll information.
     */
    scrollable: Scroller
    /**
     * Gets or sets a component's state
     */
    state: any
    /**
     * Get/set widgets elements style. The setter accepts a cssText string or a style config object, the getter always
     * returns a CSSStyleDeclaration
     */
    style: string|object|CSSStyleDeclaration
    /**
     * The [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel).
     */
    readonly tab: Tab
    /**
     * Get/set the task store instance of the backing project.
     */
    taskStore: TaskStore
    /**
     * Get/set tasks, applies to the backing project's EventStore.
     * Returns a flat array of all tasks in the task store.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * Get toolbar [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar) docked to the top of the panel
     */
    readonly tbar: Toolbar
    /**
     * Delay in ms before hiding the terminals when the mouse leaves an event bar or terminal.
     */
    terminalHideDelay: number
    /**
     * Terminal offset from their initial position, in px. Positive values move terminals further away from the
     * event bar, negative values inside the event bar.
     */
    terminalOffset: number
    /**
     * Delay in ms before showing the terminals when hovering over an event bar.
     */
    terminalShowDelay: number
    /**
     * Terminal diameter in px, overrides the default CSS value for it (which might depend on theme).
     */
    terminalSize: number|string
    /**
     * Get/set time ranges, applies to the backing project's TimeRangeStore.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Get/set this Panel's title which is used when the panel has a header, or is part of a TabPanel. If a
     * header has been disabled by configuring the [header](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-header)as `false`, setting it will have no
     * effect.
     */
    title: string
    /**
     * True to toggle the collapsed/expanded state when clicking a parent task bar.
     */
    toggleParentTasksOnClick: boolean
    /**
     * The tool Widgets as specified by the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) configuration
     * (and the [closable](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#config-closable) configuration in the Popup subclass).
     * Each is a [Widget](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget) instance which may be hidden, shown and observed and styled
     * just like any other widget.
     */
    tools: Record<string, Tool|Partial<ToolConfig>>|Record<string, Tool>
    /**
     * Get/set a tooltip on the widget. Accepts a string or tooltip config (specify true (or 'true') to use placeholder
     * as tooltip). When using a string it will configure the tooltip with `textContent: true` which enforces a default
     * max width.
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * A template function allowing you to configure the contents of the tooltip shown when hovering a
     * dependency line. You can return either an HTML string or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     */
    tooltipTemplate: (dependency: DependencyBaseModel) => string|DomConfig
    /**
     * The DOM event that triggered this tooltip to show
     */
    readonly triggeredByEvent: Event
    /**
     * An object which contains a map of descendant widgets keyed by their [ref](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-ref).
     * All descendant widgets will be available in the `widgetMap`.
     */
    readonly widgetMap: Record<string, Widget>
    /**
     * Get elements offsetWidth or sets its style.width, or specified width if element not created yet.
     */
    width: number|string
    /**
     * An object containing Features
     */
    features: GanttBaseFeaturesType
    /**
     * Fires on the owning Gantt at the end of the drag create gesture whether or not
     * a task was scheduled by the gesture.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {HTMLElement} event.proxyElement The element showing the drag creation zone.
     */
    onAfterDragCreate: ((event: { source: Gantt, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after a task drop, regardless if the drop validity
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {boolean} event.valid
     */
    onAfterTaskDrop: ((event: { source: Gantt, taskRecords: TaskModel[], valid: boolean }) => void)|string
    /**
     * Fires on the owning Gantt after a task drop, regardless if the drop validity
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dropped segments
     * @param {boolean} event.valid
     */
    onAfterTaskSegmentDrop: ((event: { source: Gantt, taskRecords: TaskModel[], valid: boolean }) => void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Gantt at the beginning of the drag gesture
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {Date} event.date The datetime associated with the drag start point.
     */
    onBeforeDragCreate: ((event: { source: Gantt, taskRecord: TaskModel, date: Date }) => void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeDragCreateFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Scheduler instance
     * @param {HTMLElement} event.proxyElement Proxy element, representing future event
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle drag create asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize drag create. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeDragCreateFinalize: ((event: { source: Gantt, proxyElement: HTMLElement, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`
     * for async vetoing).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Scheduler|any} event.source The Scheduler instance
     * @param {SchedulerEventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Scheduler|any, eventRecords: SchedulerEventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Gantt before export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforeMspExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.
     * @param {object} event Event object
     * @param {Event} event.event The native browser DOM event
     */
    onBeforePan: ((event: { event: Event }) => boolean|void)|string
    /**
     * Fired before the [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onBeforePresetChange: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires when adding a task from the UI to allow data mutation.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The task
     */
    onBeforeTaskAdd: ((event: { source: Gantt, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Gantt before task dragging starts. Return false to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event The native browser event
     */
    onBeforeTaskDrag: ((event: { source: Gantt, taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskDropFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {TaskModel[]} event.context.taskRecords The dragged task records
     * @param {boolean} event.context.valid Set this to `false` to mark the drop as invalid
     * @param {boolean} event.context.async Set true to handle dragdrop asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize dragdrop. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskDropFinalize: ((event: { source: Gantt, context: { taskRecords: TaskModel[], valid: boolean, async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires on the owning Gantt before resizing starts. Return false to prevent the operation.
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event
     */
    onBeforeTaskResize: ((event: { taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskResizeFinalize)
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {Date} event.context.endDate New endDate
     * @param {Date} event.context.originalEndDate End date before resize
     * @param {Event} event.event Browser event
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskResizeFinalize: ((event: { taskRecord: TaskModel, source: Gantt, context: { endDate: Date, originalEndDate: Date, async: boolean, finalize: Function }, event: Event }) => void)|string
    /**
     * Fires on the owning Gantt before segment dragging starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord The segment about to be dragged
     * @param {Event} event.event The native browser event
     */
    onBeforeTaskSegmentDrag: ((event: { source: Gantt, taskRecord: TaskModel, event: Event }) => boolean|void)|string
    /**
     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskSegmentDropFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {TaskModel[]} event.context.taskRecords Dragged segments
     * @param {boolean} event.context.valid Set this to `false` to mark the drop as invalid
     * @param {boolean} event.context.async Set true to handle dragdrop asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize dragdrop. This method accepts one argument: pass true to update records, or false, to ignore changes
     */
    onBeforeTaskSegmentDropFinalize: ((event: { source: Gantt, context: { taskRecords: TaskModel[], valid: boolean, async: boolean, finalize: Function } }) => void)|string
    /**
     * Fired on the owning Gantt before resizing starts. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onBeforeTaskSegmentResize: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => boolean|void)|string
    /**
     * Fired on the owning Gantt to allow implementer to prevent immediate finalization by setting
     * `data.context.async = true` in the listener, to show a confirmation popup etc.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-beforeTaskSegmentResizeFinalize)
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {object} event.context
     * @param {boolean} event.context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)
     * @param {Function} event.context.finalize Call this method to finalize resize. This method accepts one argument: pass `true` to update records, or `false`, to ignore changes
     */
    onBeforeTaskSegmentResizeFinalize: ((event: { source: Gantt, context: { async: boolean, finalize: Function } }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered cell
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the cell that the mouse left
     * @param {Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when critical paths get highlighted.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-criticalPathsHighlighted)
     */
    onCriticalPathsHighlighted: (() => void)|string
    /**
     * Fired when critical paths get hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-criticalPathsUnhighlighted)
     */
    onCriticalPathsUnhighlighted: (() => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Gantt after the task has been scheduled.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel} event.taskRecord
     * @param {MouseEvent} event.event The ending mouseup event.
     * @param {HTMLElement} event.proxyElement The proxy element showing the drag creation zone.
     */
    onDragCreateEnd: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the drag start has created a proxy element.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {HTMLElement} event.proxyElement The proxy representing the new event.
     */
    onDragCreateStart: ((event: { source: Gantt, proxyElement: HTMLElement }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Partial<LocationConfig>[]|Location[]} event.selectedCells The cells that is currently being dragged over
     * @param {Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Partial<LocationConfig>[]|Location[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Column} event.column The column clicked on.
     */
    onHeaderClick: ((event: { domEvent: Event, column: Column }) => boolean|void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt when project content is exported
     * to XML, before the XML is downloaded by the browser.
     * @param {object} event Event object
     * @param {object} event.config Export config
     * @param {string} event.fileContent Exported XML-file content
     */
    onMspExport: ((event: { config: object, fileContent: string }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement|null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement|null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dragging the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrag: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget if a percent bar drag-drop operation is aborted
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragAbort: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when percent bar dragging starts
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDragStart: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when dropping the percent bar
     * @param {object} event Event object
     * @param {TimelineBase} event.source SchedulerPro or Gantt instance
     * @param {Model} event.taskRecord The task record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onPercentBarDrop: ((event: { source: TimelineBase, taskRecord: Model, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired after the [viewPreset](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.
     * @param {object} event Event object
     * @param {Scheduler} event.source This Scheduler instance.
     * @param {Date} event.startDate The new start date of the timeline.
     * @param {Date} event.centerDate The new center date of the timeline.
     * @param {Date} event.endDate The new end date of the timeline.
     * @param {ViewPreset} event.from The outgoing ViewPreset.
     * @param {ViewPreset} event.to The ViewPreset being switched to.
     */
    onPresetChange: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => boolean|void)|string
    /**
     * Task is released, no longer in view/removed. A good spot for cleaning custom things added in a `renderTask`
     * listener up, if needed.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {object} event.renderData Task render data
     * @param {TaskModel} event.taskRecord Rendered task
     * @param {HTMLElement} event.element Task element
     */
    onReleaseTask: ((event: { source: Gantt, renderData: object, taskRecord: TaskModel, element: HTMLElement }) => void)|string
    /**
     * Task is rendered, its element is available in DOM.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {object} event.renderData Task render data
     * @param {TaskModel} event.taskRecord Rendered task
     * @param {HTMLElement} event.element Task element
     */
    onRenderTask: ((event: { source: Gantt, renderData: object, taskRecord: TaskModel, element: HTMLElement }) => void)|string
    /**
     * Triggered when clicking a resource avatar or chip in the cells of the [ResourceAssignmentColumn](https://bryntum.com/products/gantt/docs/api/Gantt/column/ResourceAssignmentColumn).
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {ResourceModel} event.resourceRecord Resource record
     * @param {Event} event.event Browser event
     */
    onResourceAssignmentClick: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: ResourceModel, event: Event }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered row
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule.
     * Allows manipulation of the items to show in the same way as in `processItems`. Returning `false` from a listener
     * prevents the menu from being shown.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {SchedulerEventModel} event.eventRecord Event record for which the menu was triggered
     * @param {SchedulerResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {SchedulerAssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onScheduleMenuBeforeShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, eventRecord: SchedulerEventModel, resourceRecord: SchedulerResourceModel, date: Date, assignmentRecord: SchedulerAssignmentModel, eventElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {MenuItem} event.item
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    onScheduleMenuItem: ((event: { source: Scheduler, item: MenuItem, resourceRecord: SchedulerResourceModel, date: Date, element: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler} event.source
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Menu} event.menu The menu
     * @param {SchedulerResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    onScheduleMenuShow: ((event: { source: Scheduler, items: Record<string, Partial<MenuItemConfig>>, menu: Menu, resourceRecord: SchedulerResourceModel, date: Date, targetElement: HTMLElement }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a click on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskClick: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a rightclick (or long press on a touch device) on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskContextMenu: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a doubleclick on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskDblClick: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt while a task is being dragged
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {object} event.dragData
     * @param {boolean} event.changed `true` if startDate has changed.
     */
    onTaskDrag: ((event: { source: Gantt, taskRecords: TaskModel[], startDate: Date, endDate: Date, dragData: object, changed: boolean }) => void)|string
    /**
     * Fires on the owning Gantt when task dragging starts
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     */
    onTaskDragStart: ((event: { source: Gantt, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning Gantt after a valid task drop
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords
     * @param {boolean} event.isCopy
     */
    onTaskDrop: ((event: { source: Gantt, taskRecords: TaskModel[], isCopy: boolean }) => void)|string
    /**
     * Triggered when a keydown event is observed if there are selected tasks.
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {KeyboardEvent} event.event Browser event
     */
    onTaskKeyDown: ((event: { source: Gantt, taskRecord: TaskModel, event: KeyboardEvent }) => void)|string
    /**
     * Triggered when a keyup event is observed if there are selected tasks.
     * @param {object} event Event object
     * @param {Gantt} event.source This Gantt
     * @param {TaskModel} event.taskRecord Task record
     * @param {KeyboardEvent} event.event Browser event
     */
    onTaskKeyUp: ((event: { source: Gantt, taskRecord: TaskModel, event: KeyboardEvent }) => void)|string
    /**
     * This event fires on the owning Gantt before the context menu is shown for a task. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {Partial<MenuItemConfig>[]} event.items Menu item configs
     * @param {TaskModel} event.taskRecord Event record for which the menu was triggered
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuBeforeShow: ((event: { source: Gantt, items: Partial<MenuItemConfig>[], taskRecord: TaskModel, taskElement: HTMLElement }) => boolean|void)|string
    /**
     * This event fires on the owning Gantt when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {MenuItem} event.item
     * @param {TaskModel} event.taskRecord
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuItem: ((event: { source: Gantt, item: MenuItem, taskRecord: TaskModel, taskElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Gantt after showing the context menu for an event
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {Menu} event.menu The menu
     * @param {TaskModel} event.taskRecord Event record for which the menu was triggered
     * @param {HTMLElement} event.taskElement
     */
    onTaskMenuShow: ((event: { source: Gantt, menu: Menu, taskRecord: TaskModel, taskElement: HTMLElement }) => void)|string
    /**
     * Triggered after a mousedown on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseDown: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered for mouseout from a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseOut: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a mouseover on a task.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseOver: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered after a mouseup on a task bar.
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt instance
     * @param {TaskModel} event.taskRecord The Task record
     * @param {MouseEvent} event.event The native browser event
     */
    onTaskMouseUp: ((event: { source: Gantt, taskRecord: TaskModel, event: MouseEvent }) => void)|string
    /**
     * Triggered when clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeClick: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when right-clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeContextMenu: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Triggered when double-clicking a nonworking time element
     * @param {object} event Event object
     * @param {Gantt} event.source The Gantt chart instance
     * @param {TaskModel} event.taskRecord Task record
     * @param {object} event.interval The raw data describing the nonworking time interval
     * @param {string} event.interval.name The interval name (if any)
     * @param {Date} event.interval.startDate The interval start date
     * @param {Date} event.interval.endDate The interval end date
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTaskNonWorkingTimeDblClick: ((event: { source: Gantt, taskRecord: TaskModel, interval: { name: string, startDate: Date, endDate: Date }, domEvent: MouseEvent }) => void)|string
    /**
     * Fires on the owning Gantt on each resize move event
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Date} event.start The start date
     * @param {Date} event.end The end date
     * @param {HTMLElement} event.element The element
     */
    onTaskPartialResize: ((event: { taskRecord: TaskModel, start: Date, end: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {boolean} event.changed
     * @param {TaskModel} event.taskRecord
     */
    onTaskResizeEnd: ((event: { changed: boolean, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Gantt when task resizing starts
     * @param {object} event Event object
     * @param {TaskModel} event.taskRecord
     * @param {Event} event.event
     */
    onTaskResizeStart: ((event: { taskRecord: TaskModel, event: Event }) => void)|string
    /**
     * Fires on the owning Gantt while a segment is being dragged
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dragged segments
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {object} event.dragData
     * @param {boolean} event.changed `true` if startDate has changed.
     */
    onTaskSegmentDrag: ((event: { source: Gantt, taskRecords: TaskModel[], startDate: Date, endDate: Date, dragData: object, changed: boolean }) => void)|string
    /**
     * Fires on the owning Gantt when segment dragging starts
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dragged segments
     */
    onTaskSegmentDragStart: ((event: { source: Gantt, taskRecords: TaskModel[] }) => void)|string
    /**
     * Fires on the owning Gantt after a valid task drop
     * @param {object} event Event object
     * @param {Gantt} event.source
     * @param {TaskModel[]} event.taskRecords Dropped segments
     * @param {boolean} event.isCopy
     */
    onTaskSegmentDrop: ((event: { source: Gantt, taskRecords: TaskModel[], isCopy: boolean }) => void)|string
    /**
     * Fires on the owning Gantt on each resize move event
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {Date} event.startDate
     * @param {Date} event.endDate
     * @param {HTMLElement} event.element
     */
    onTaskSegmentPartialResize: ((event: { source: Gantt, taskRecord: TaskModel, startDate: Date, endDate: Date, element: HTMLElement }) => void)|string
    /**
     * Fires on the owning Gantt after the resizing gesture has finished.
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {boolean} event.changed Shows if the record has been changed by the resize action
     * @param {TaskModel} event.taskRecord Segment being resized
     */
    onTaskSegmentResizeEnd: ((event: { source: Gantt, changed: boolean, taskRecord: TaskModel }) => void)|string
    /**
     * Fires on the owning Gantt when event resizing starts
     * @param {object} event Event object
     * @param {Gantt} event.source Gantt instance
     * @param {TaskModel} event.taskRecord Segment being resized
     * @param {SchedulerResourceModel} event.resourceRecord Resource record the resize starts within
     * @param {MouseEvent} event.event Browser event
     */
    onTaskSegmentResizeStart: ((event: { source: Gantt, taskRecord: TaskModel, resourceRecord: SchedulerResourceModel, event: MouseEvent }) => void)|string
    /**
     * Fires after a click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderClick: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a right click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderContextMenu: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * Fires after a double click on a time axis cell
     * @param {object} event Event object
     * @param {SchedulerTimeAxisColumn|VerticalTimeAxisColumn} event.source The column object
     * @param {Date} event.startDate The start date of the header cell
     * @param {Date} event.endDate The end date of the header cell
     * @param {Event} event.event The event object
     */
    onTimeAxisHeaderDblClick: ((event: { source: SchedulerTimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#event-timeAxisHeaderMenuBeforeShow)
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuBeforeShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuItem: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Scheduler} event.source The scheduler
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Time axis column
     */
    onTimeAxisHeaderMenuShow: ((event: { source: Scheduler, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {TimelineContext} event.oldContext The tick/resource context being deactivated.
     * @param {TimelineContext} event.context The tick/resource context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<GanttBaseConfig>} config
     */
    constructor(config?: Partial<GanttBaseConfig>);
    /**
     * Get localized string, returns value of `text` if no localized string found.
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static L(text: string, templateData?: object): string;
    /**
     * Destroys the provided objects by calling their [destroy](https://bryntum.com/products/gantt/docs/api/Core/Base#function-destroy) method.
     * Skips empty values or objects that are already destroyed.
     * @param {object} args Objects to be destroyed
     */
    static destroy(...args: object[]): void;
    /**
     * Returns the Widget which owns the passed element (or event).
     * @param {HTMLElement|Event} element The element or event to start from
     * @param {string|Function} type The type of Widget to scan upwards for. The lowercase class name. Or a filter function which returns `true` for the required Widget
     * @param {HTMLElement|number} limit The number of components to traverse upwards to find a match of the type parameter, or the element to stop at
     */
    static fromElement(element: HTMLElement|Event, type?: string|Function, limit?: HTMLElement|number): Widget|null;
    /**
     * Returns the Widget which owns the passed CSS selector.
     * @param {string} selector CSS selector
     */
    static fromSelector(selector: string): Widget|null;
    /**
     * Returns the widget with the specified id.
     * @param {string} id Id of widget to find
     */
    static getById(id: string): Widget;
    /**
     * Call once per class for custom widgets to have them register with the `Widget` class, allowing them to be created
     * by type.
     */
    static initClass(): void;
    /**
     * Checks if an obj is of type using object's $$name property and doing string comparison of the property with the
     * type parameter.
     * @param {string} type
     */
    static isOfTypeName(type: string): boolean;
    /**
     * Applies one or more `mixins` to this class and returns the produced class constructor.
     * @param {Function} mixins
     */
    static mixin(...mixins: Function[]): Function;
    /**
     * Convenience function to get an optional translation. The difference compared to `L()` is that it won't throw
     * an error when the translation is missing even if configured with `throwOnMissingLocale`
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static optionalL(text: string, templateData?: object): string;
    /**
     * Analogous to `document.querySelector`, finds the first Bryntum widget matching the passed
     * selector. Right now, only class name (lowercased) selector strings, or
     * a filter function which returns `true` for required object are allowed:
     * @param {string|Function} selector A lowercased class name, or a filter function.
     * @param {boolean} deep Specify `true` to search the prototype chain (requires supplying a string `selector`). For example 'widget' would then find a Grid
     */
    static query(selector: string|Function, deep?: boolean): Widget;
    /**
     * Analogous to document.querySelectorAll, finds all Bryntum widgets matching the passed
     * selector. Right now, only registered widget `type` strings, or a filter function which
     * returns `true` for required object are allowed:
     * @param {string|Function} selector A lowercased class name, or a filter function.
     * @param {boolean} deep Specify `true` to search the prototype chain (requires supplying a string `selector`). For example 'widget' would then find a Grid
     */
    static queryAll(selector: string|Function, deep?: boolean): Widget[];
    /**
     * Convenience function that can be called directly on the class that mixes Localizable in
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    L(text: string, templateData?: object): string;
    /**
     * Aborts dependency creation, removes proxy and cleans up listeners
     */
    abort(): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a new milestone task below the passed reference task
     * @param {TaskModel} taskRecord The reference task record
     * @param {object} options Options for creating the new milestone
     */
    addMilestoneBelow(taskRecord: TaskModel, options?: {
        data?: Partial<TaskModelConfig>
    }): Promise<TaskModel>;
    /**
     * Adds a predecessor task to the passed reference task
     * @param {TaskModel} taskRecord The reference task record
     * @param {object} options Options for creating the new task
     */
    addPredecessor(taskRecord: TaskModel, options?: {
        data?: Partial<TaskModelConfig>
    }): Promise<TaskModel>;
    /**
     * Adds a new subtask to the passed reference task
     * @param {TaskModel} taskRecord The reference task record
     * @param {object} options Options for creating the new subtask
     */
    addSubtask(taskRecord: TaskModel, options?: {
        at?: 'start'|'end'
        data?: Partial<TaskModelConfig>
    }): Promise<TaskModel>;
    /**
     * Adds a successor task to the passed reference task
     * @param {TaskModel} taskRecord The reference task record
     * @param {object} options Options for creating the new task
     */
    addSuccessor(taskRecord: TaskModel, options?: {
        data?: Partial<TaskModelConfig>
    }): Promise<TaskModel>;
    /**
     * Adds a new task above the passed reference task
     * @param {TaskModel} taskRecord The reference task record
     * @param {object} options Options for creating the new task
     */
    addTaskAbove(taskRecord: TaskModel, options?: {
        data?: Partial<TaskModelConfig>
    }): Promise<TaskModel>;
    /**
     * Adds a new task below the passed reference task
     * @param {TaskModel} taskRecord The reference task record
     * @param {object} options Options for creating the new task
     */
    addTaskBelow(taskRecord: TaskModel, options?: {
        data?: Partial<TaskModelConfig>
    }): Promise<TaskModel>;
    /**
     * Applies the given `state` to this instance.
     * @param {object} state The state object to apply to this instance.
     */
    applyState(state: object): void;
    /**
     * Provides a way of calling callbacks which may have been specified as the *name* of a function
     * and optionally adds scope resolution.
     * @param {string|Function} fn The function to call, or the name of the function to call.
     * @param {object} thisObject The `this` object of the function.
     * @param {object[]} args The argument list to pass.
     */
    callback(fn: string|Function, thisObject: object, args: object[]): void;
    /**
     * Cancel editing, destroys the editor
     * This function is exposed on Grid and can thus be called as `grid.cancelEditing(...)`
     * @param {boolean} silent Pass true to prevent method from firing event
     */
    cancelEditing(silent?: boolean): void;
    /**
     * Clears the clipboard data
     */
    clearClipboard(): Promise<void>;
    /**
     * Clears the previously applied transformation, restoring data to its initial state.
     */
    clearGroups(): Promise<void>;
    /**
     * Performs the configured [closeAction](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#config-closeAction) upon this popup.
     * By default, the popup hides. The [closeAction](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#config-closeAction) may be
     * configured as `'destroy'`.
     */
    close(): void;
    /**
     * Starts with this Widget, then Looks up the [owner](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-owner) axis to find an ancestor which matches the
     * passed selector. The selector may be a widget type identifier, such as `'grid'`, or a function which will return
     * `true` when passed the desired ancestor.
     * @param {string|Function} selector A Type identifier or selection function.
     * @param {boolean} deep When using a string identifier, pass `true` if all superclasses should be included, i.e., if a `Grid` should match `'widget'`.
     * @param {number|string|Widget} limit how many steps to step up before aborting the search, or a selector to stop at or the topmost ancestor to consider.
     */
    closest(selector: string|Function, deep?: boolean, limit?: number|string|Widget): void;
    /**
     * Returns a [createElement](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#function-createElement-static) config object that defines this widget's
     * DOM structure. This object should be determined using [configurable](https://bryntum.com/products/gantt/docs/api/Core/Base#property-configurable-static) properties
     * to ensure this method is called again if these properties are modified.
     */
    compose(): DomConfig;
    /**
     * Base implementation applies configuration.
     * @param {object} args Usually called with a config object, but accepts any params
     */
    construct(...args: object[]): void;
    /**
     * Returns `true` if this widget is or contains the specified element or widget.
     * @param {HTMLElement|Widget} elementOrWidget The element or widget
     * @param {boolean} strict Pass `true` to test for strict containment (if `elementOrWidget` is this widget, the return value will be `false`).
     */
    contains(elementOrWidget: HTMLElement|Widget, strict?: boolean): boolean;
    /**
     * Copy or cut rows to clipboard to paste later
     * @param {boolean} isCut Copies by default, pass `true` to cut
     */
    copyRows(isCut?: boolean): Promise<void>;
    /**
     * Destroys this object.
     */
    destroy(): void;
    /**
     * Removes all event listeners that were registered with the given `name`.
     * @param {string|Symbol} name The name of the event listeners to be removed.
     */
    detachListeners(name: string|Symbol): void;
    /**
     * Disable the widget
     */
    disable(): void;
    /**
     * Classes implement this method to provide custom cleanup logic before calling `super.doDestroy()`. The general
     * pattern is as follows:
     */
    doDestroy(): void;
    /**
     * Experimental helper function, extracts the currently used configs and wraps them as an app, downloading the
     * resulting JS file.
     */
    downloadTestCase(): void;
    /**
     * Iterate over all ancestors of this widget.
     * @param {Function} fn Function to execute for all ancestors. Terminate iteration by returning `false`.
     */
    eachAncestor(fn: Function): boolean;
    /**
     * Iterate over all widgets owned by this widget and any descendants.
     * @param {Function} fn A function to execute upon each descendant widget. Iteration terminates if this function returns `false`.
     * @param {boolean} deep Pass as `false` to only consider immediate child widgets.
     */
    eachWidget(fn: Function, deep?: boolean): boolean;
    /**
     * Shows a [TaskEditor](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor) to edit the passed task. This function is exposed on
     * the Gantt instance and can be called as `gantt.editTask()`.
     * @param {TaskModel} taskRecord Task to edit
     * @param {HTMLElement} element The task element
     */
    editTask(taskRecord: TaskModel, element?: HTMLElement): Promise<any>;
    /**
     * Enable the widget
     */
    enable(): void;
    /**
     * Exits fullscreen mode
     */
    exitFullscreen(): Promise<any>;
    /**
     * Finish editing, update the underlying record and destroy the editor
     * This function is exposed on Grid and can thus be called as `grid.finishEditing(...)`
     */
    finishEditing(): Promise<any>;
    /**
     * Focuses this widget if it has a focusable element.
     */
    focus(): void;
    /**
     * Returns the HTMLElement representing a task record.
     * @param {TaskModel} taskRecord A task record
     * @param {boolean} inner Specify `false` to return the task wrapper element
     */
    getElementFromTaskRecord(taskRecord: TaskModel, inner?: boolean): HTMLElement;
    /**
     * Gets the region represented by the timeline and optionally only for a single task. Returns `null` if passed a
     * task that is filtered out or not part of the task store.
     * @param {TaskModel} taskRecord (optional) The task record
     */
    getScheduleRegion(taskRecord: TaskModel): Rectangle|null;
    /**
     * Returns this object's state information.
     */
    getState(): object;
    /**
     * Get the region for a specified task
     * @param {TaskModel} taskRecord
     * @param {boolean} includeOutside
     * @param {boolean} inner Specify true to return the box for the task bar within the wrapper.
     */
    getTaskBox(taskRecord: TaskModel, includeOutside?: boolean, inner?: boolean): Rectangle;
    /**
     * Transforms the data according to the supplied levels.
     * @param {(string|Column|((model: Model) => any))[]} levels Field names or functions use to generate parents in resulting tree.
     */
    group(levels: (string|Column|((model: Model) => any))[]): Promise<void>;
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Hide widget
     * @param {boolean} animate Pass `true` (default) to animate the hide action
     */
    hide(animate?: boolean): Promise<any>;
    /**
     * Hide terminals for specified event
     * @param {HTMLElement} eventElement Event element
     */
    hideTerminals(eventElement: HTMLElement): void;
    /**
     * Highlights the region representing the passed time span and optionally for a single certain resource.
     * @param {HighlightTimeSpan} options A single options object describing the time span to highlight.
     */
    highlightTimeSpan(options: HighlightTimeSpan): void;
    /**
     * Highlights the regions representing the passed time spans.
     * @param {HighlightTimeSpan[]} timeSpans An array of objects with start/end dates describing the rectangle to highlight.
     * @param {object} options A single options object
     */
    highlightTimeSpans(timeSpans: HighlightTimeSpan[], options?: {
        clearExisting?: boolean
    }): void;
    /**
     * Increase the indentation level of one or more tasks in the tree. Has no effect if [TreeGroup](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup)
     * has regrouped the tree.
     * @param {TaskModel[]|TaskModel} tasks The task(s) to indent.
     */
    indent(tasks: TaskModel[]|TaskModel): Promise<any>;
    /**
     * Loads this object's state from its [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider) and applies it to its [state](#Core/mixin/State#property-state).
     * @param {string} stateId An overriding key to use instead of this object's [stateId](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateId).
     * @param {boolean} reload Pass `true` to load the state even if previously loaded.
     */
    loadState(stateId?: string, reload?: boolean): void;
    /**
     * Mask the widget, showing the specified message
     * @param {string|Partial<MaskConfig>} msg Mask message (or a [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object
     */
    mask(msg: string|Partial<MaskConfig>): Mask;
    /**
     * Alias for [addListener](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig|string} config An object containing listener definitions, or the event name to listen for
     * @param {object|Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * This method is called when IFrame is loaded with all the HTML/CSS and is about to be printed. Use it to take
     * control over the page contents.
     * @param {HTMLIFrameElement} iframe
     */
    onPrintIFrameLoad(iframe: HTMLIFrameElement): Promise<void>;
    /**
     * Decrease the indentation level of one or more tasks in the tree. Has no effect if [TreeGroup](https://bryntum.com/products/gantt/docs/api/Gantt/feature/TreeGroup)
     * has regrouped the tree.
     * @param {TaskModel[]|TaskModel} tasks The task(s) to outdent.
     */
    outdent(tasks: TaskModel[]|TaskModel): Promise<any>;
    /**
     * Returns `true` if this Widget owns the passed Element, Event or Widget. This is based on the widget hierarchy,
     * not DOM containment. So an element in a `Combo`'s dropdown list will be owned by the `Combo`.
     * @param {HTMLElement|Event|Widget} target The element event or Widget to test for being within the ownership tree of this Widget.
     */
    owns(target: HTMLElement|Event|Widget): void;
    /**
     * Paste rows below selected or passed record
     * @param {Model} record Paste below this record, or currently selected record if left out
     */
    pasteRows(record?: Model): Promise<void>;
    /**
     * Starts the print process. Accepts a config object which overrides any default configs.
     * <strong>NOTE</strong> Component should not be interacted with when print is in progress
     * @param {object} config
     */
    print(config: object): Promise<any>;
    /**
     * Returns the first descendant widgets which the passed
     * filter function returns `true` for.
     * @param {Function} filter A function which, when passed a widget, returns `true` to return the widget as the sole result.
     */
    query(filter: Function): Widget;
    /**
     * Returns an array of all descendant widgets which the passed
     * filter function returns `true` for.
     * @param {Function} filter A function which, when passed a widget, returns `true` to include the widget in the results.
     */
    queryAll(filter: Function): Widget[];
    /**
     * Calling this [delayable](https://bryntum.com/products/gantt/docs/api/Core/mixin/Delayable#property-delayable-static) method marks this widget as dirty. The DOM
     * will be updated on the next animation frame:
     */
    recompose(): Promise<void>;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {EventsClass} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Requests fullscreen display for this widget
     */
    requestFullscreen(): Promise<any>;
    /**
     * Provides a way of locating callbacks which may have been specified as the *name* of a function
     * and optionally adds scope resolution.
     * @param {string|Function} handler The function to call, or the name of the function to call.
     * @param {object} thisObj The `this` object of the function.
     * @param {boolean} enforceCallability Pass `false` if the function may not exist, and a null return value is acceptable.
     */
    resolveCallback(handler: string|Function, thisObj: object, enforceCallability?: boolean): object;
    /**
     * Returns the dependency record for a DOM element
     * @param {HTMLElement} element The dependency line element
     */
    resolveDependencyRecord(element: HTMLElement): DependencyModel;
    /**
     * Product agnostic method which yields the [TaskModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel) record which underpins the row which
     * encapsulates the passed element. The element can be a grid cell, or an event element, and the result
     * will be a [TaskModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel)
     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a record from
     */
    resolveRowRecord(elementOrEvent: HTMLElement|Event): TaskModel;
    /**
     * Returns the task record for a DOM element
     * @param {HTMLElement} element The DOM node to lookup
     */
    resolveTaskRecord(element: HTMLElement): TaskModel;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * If this Widget contains focus, focus is reverted to the source from which it entered if possible,
     * or to a close relative if not.
     * @param {boolean} force Pass as `true` to move focus to the previously focused item, or the closest possible relative even if this widget does not contain focus.
     */
    revertFocus(force?: boolean): void;
    /**
     * Saves this object's state to its [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider).
     * @param {object|string} options Options that affect the state saving process or, if a string, the state `id`.
     */
    saveState(options?: {
        id?: string
        immediate?: boolean
    }|string): void;
    /**
     * Scrolls a task record into the viewport.
     * @param {TaskModel} taskRecord The task record to scroll into view
     * @param {BryntumScrollOptions} options How to scroll.
     */
    scrollTaskIntoView(taskRecord: TaskModel, options?: BryntumScrollOptions): Promise<any>;
    /**
     * Sets configuration options this object with all the properties passed in the parameter object.
     * Timing is taken care of. If the setter of one config is called first, and references
     * the value of another config which has not yet been set, that config will be set just
     * in time, and the *new* value will be used.
     * @param {object} config An object containing configurations to change.
     */
    setConfig(config: object): void;
    /**
     * Shows this widget
     * @param {object} options modifications to the show operation
     */
    show(options?: {
        align?: AlignSpec
        animate?: boolean
    }): Promise<any>;
    /**
     * Shows a spinner and a message to indicate an async flow is ongoing
     * @param {string} message The message, defaults to [loadingMsg](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-loadingMsg)
     */
    showAsyncMessage(message: string): void;
    /**
     * Shows the context menu.
     * @param {Event} event The initiating event.
     * @param {AlignSpec|HTMLElement} alignSpec Menu alignment specification, or an element to align to
     */
    showContextMenu(event: Event, alignSpec?: AlignSpec|HTMLElement): Promise<void>;
    /**
     * Shows the [print dialog](https://bryntum.com/products/gantt/docs/api/Grid/view/export/ExportDialog)
     */
    showPrintDialog(): Promise<any>;
    /**
     * Show terminals for specified event at sides defined in #terminalSides.
     * @param {TimeSpan} timeSpanRecord Event/task to show terminals for
     * @param {HTMLElement} element Event/task element, defaults to using the first element found for the task
     */
    showTerminals(timeSpanRecord: TimeSpan, element?: HTMLElement): void;
    /**
     * Start editing specified cell. If no cellContext is given it starts with the first cell in the first row.
     * This function is exposed on Grid and can thus be called as `grid.startEditing(...)`
     * @param {object} cellContext Cell specified in format { id: 'x', columnId/column/field: 'xxx' }. See [getCell](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#function-getCell) for details.
     */
    startEditing(cellContext: object): Promise<any>;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Toggles collapsed state of the panel.
     * Collapses an expanded or expands a collapsed panel.
     */
    toggleCollapsed(): boolean;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object|string} config A config object or the event name
     * @param {object|Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
    /**
     * Removes any highlighting elements.
     * @param {boolean} fadeOut `true` to fade out the highlight elements before removing
     */
    unhighlightTimeSpans(fadeOut?: boolean): Promise<void>;
    /**
     * Unmask the widget
     */
    unmask(): void;
    /**
     * Looks up the [owner](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-owner) axis to find an ancestor which matches the passed selector.
     * The selector may be a widget type identifier, such as `'grid'`, or a function which will return
     * `true` when passed the desired ancestor.
     * @param {string|Function} selector A Type identifier or selection function. If not provided, this method returns the [owner](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-owner) of this widget
     * @param {boolean} deep When using a string identifier, pass `true` if all superclasses should be included, i.e., if a `Grid` should match `'widget'`.
     * @param {number|string|Widget} limit how many steps to step up before aborting the search, or a selector to stop at or the topmost ancestor to consider.
     */
    up(selector?: string|Function, deep?: boolean, limit?: number|string|Widget): Widget|any;
    /**
     * Method that is triggered when applying a locale to the instance
     * (happens on the instance construction steps and when switching to another locale).
     */
    updateLocalization(): void;
}

/**
 * Type with configuration options for [GanttDom](https://bryntum.com/products/grid/docs/api/Gantt/view/mixin/GanttDom) class.
 */
type GanttDomClassConfig = {
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {GanttTimelineContext} event.oldContext The tick/task context being deactivated.
     * @param {GanttTimelineContext} event.context The tick/task context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: GanttTimelineContext, context: GanttTimelineContext }) => void)|string
}

export class GanttDomClass {
    /**
     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.
     * @param {object} event Event object
     * @param {GanttTimelineContext} event.oldContext The tick/task context being deactivated.
     * @param {GanttTimelineContext} event.context The tick/task context being activated.
     */
    onTimelineContextChange: ((event: { oldContext: GanttTimelineContext, context: GanttTimelineContext }) => void)|string
    /**
     * Returns the HTMLElement representing a task record.
     * @param {TaskModel} taskRecord A task record
     * @param {boolean} inner Specify `false` to return the task wrapper element
     */
    getElementFromTaskRecord(taskRecord: TaskModel, inner?: boolean): HTMLElement;
    /**
     * Product agnostic method which yields the [TaskModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel) record which underpins the row which
     * encapsulates the passed element. The element can be a grid cell, or an event element, and the result
     * will be a [TaskModel](https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel)
     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a record from
     */
    resolveRowRecord(elementOrEvent: HTMLElement|Event): TaskModel;
    /**
     * Returns the task record for a DOM element
     * @param {HTMLElement} element The DOM node to lookup
     */
    resolveTaskRecord(element: HTMLElement): TaskModel;
}

export const GanttDom : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & GanttDomClass>

export class GanttRegionsClass {
    /**
     * Gets the region represented by the timeline and optionally only for a single task. Returns `null` if passed a
     * task that is filtered out or not part of the task store.
     * @param {TaskModel} taskRecord (optional) The task record
     */
    getScheduleRegion(taskRecord: TaskModel): Rectangle|null;
    /**
     * Get the region for a specified task
     * @param {TaskModel} taskRecord
     * @param {boolean} includeOutside
     * @param {boolean} inner Specify true to return the box for the task bar within the wrapper.
     */
    getTaskBox(taskRecord: TaskModel, includeOutside?: boolean, inner?: boolean): Rectangle;
}

export const GanttRegions : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & GanttRegionsClass>

export class GanttScrollClass {
    /**
     * Scrolls a task record into the viewport.
     * @param {TaskModel} taskRecord The task record to scroll into view
     * @param {BryntumScrollOptions} options How to scroll.
     */
    scrollTaskIntoView(taskRecord: TaskModel, options?: BryntumScrollOptions): Promise<any>;
}

export const GanttScroll : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & GanttScrollClass>

export class GanttStateClass {
    /**
     * Gets or sets gantt's state. Check out [GanttState](https://bryntum.com/products/gantt/docs/api/Gantt/view/mixin/GanttState) mixin for details.
     */
    state: {
        columns: object[]
        rowHeight: number
        scroll: object
        selectedRecords: any[]
        style: string
        selectedCell: string
        store: object
        subGrids: object
        barMargin: number
        zoomLevel: number
    }
}

export const GanttState : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & GanttStateClass>

/**
 * Type with configuration options for [GanttStores](https://bryntum.com/products/grid/docs/api/Gantt/view/mixin/GanttStores) class.
 */
type GanttStoresClassConfig = {
    /**
     * Inline assignments, will be loaded into the backing project's AssignmentStore.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Inline dependencies, will be loaded into the backing project's DependencyStore.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * Inline resources, will be loaded into the backing project's ResourceStore.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * The [TaskStore](https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore) holding the tasks to be rendered into the Gantt.
     */
    taskStore: TaskStore
    /**
     * Inline tasks, will be loaded into an internally created TaskStore.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * Inline time ranges, will be loaded into the backing project's time range store.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
}

export class GanttStoresClass {
    /**
     * Get/set assignments, applies to the backing project's AssignmentStore.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * Get/set calendars, applies to the backing projects CalendarManagerStore.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Get/set dependencies, applies to the backing projects DependencyStore.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * Get/set resources, applies to the backing project's ResourceStore.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * Get/set the task store instance of the backing project.
     */
    taskStore: TaskStore
    /**
     * Get/set tasks, applies to the backing project's EventStore.
     * Returns a flat array of all tasks in the task store.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * Get/set time ranges, applies to the backing project's TimeRangeStore.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<GanttStoresClassConfig>} config
     */
    constructor(config?: Partial<GanttStoresClassConfig>);
}

export const GanttStores : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & GanttStoresClass>

export class TaskNavigationClass {
}

export const TaskNavigation : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TaskNavigationClass>

/**
 * Type with configuration options for [AssignmentField](https://bryntum.com/products/grid/docs/api/Gantt/widget/AssignmentField) class.
 */
type AssignmentFieldConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'assignmentfield'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/gantt/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/gantt/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * `true` to clear value typed to a multiselect combo when an item is selected. `true` by default as
     * of version 6.0
     */
    clearTextOnSelection: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/gantt/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the [filterParamName](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-filterParamName) to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-filterOperator)
     */
    filterOperator: CollectionCompareOperator
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/gantt/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/gantt/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: Record<string, string>
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc.).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-owner)
     */
    owner: Widget
    /**
     * A config object used to configure the [assignment grid](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid)
     * used to select resources to assign.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-picker)
     */
    picker: Partial<AssignmentGridConfig>|AssignmentGrid
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this field's [pickerAlignElement](https://bryntum.com/products/gantt/docs/api/Core/widget/PickerField#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Event to load resource assignments for.
     * Either event or [store](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-store) should be given.
     */
    projectEvent: TaskModel
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Assignment manipulation store to use, or it's configuration object.
     * Either store or [projectEvent](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-projectEvent) should be given
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * A template function used to generate the tooltip contents when hovering this field. Defaults to
     * showing "[Name] [%]"
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-tooltipTemplate)
     * @param {object} data Tooltip data
     * @param {TaskModel} data.taskRecord The taskRecord the assignments are associated with
     * @param {AssignmentModel} data.assignmentRecords The field value represented as assignment records
     * @returns {string|DomConfig|DomConfig>}
     */
    tooltipTemplate: (data: { taskRecord: TaskModel, assignmentRecords: AssignmentModel }) => string|DomConfig|DomConfig[]
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * A special field widget used to edit single event assignments.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField)
 */
export class AssignmentField extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<AssignmentFieldConfig>} config
     */
    constructor(config?: Partial<AssignmentFieldConfig>);
}

type AssignmentGridFeaturesType = {
    cellCopyPaste: CellCopyPaste
    cellEdit: GridCellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    excelExporter: GridExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GridGroupSummary
    headerMenu: HeaderMenu
    mergeCells: MergeCells
    pdfExport: GridPdfExport
    print: GridPrint
    quickFind: QuickFind
    regionResize: RegionResize
    rowCopyPaste: RowCopyPaste
    rowExpander: RowExpander
    rowReorder: GridRowReorder
    rowResize: GridRowResize
    search: Search
    sort: Sort
    split: GridSplit
    stickyCells: StickyCells
    stripe: Stripe
    summary: GridSummary
    tree: Tree
    treeGroup: GridTreeGroup
}

type AssignmentGridFeaturesConfigType = {
    cellCopyPaste: string|boolean|Partial<CellCopyPasteConfig>
    cellEdit: string|boolean|Partial<GridCellEditConfig>
    cellMenu: string|boolean|Partial<CellMenuConfig>
    cellTooltip: string|boolean|Partial<CellTooltipConfig>
    columnAutoWidth: string|boolean|Partial<ColumnAutoWidthConfig>
    columnDragToolbar: string|boolean|Partial<ColumnDragToolbarConfig>
    columnPicker: string|boolean|Partial<ColumnPickerConfig>
    columnRename: string|boolean|Partial<ColumnRenameConfig>
    columnReorder: string|boolean|Partial<ColumnReorderConfig>
    columnResize: string|boolean|Partial<ColumnResizeConfig>
    excelExporter: string|boolean|Partial<GridExcelExporterConfig>
    fileDrop: string|boolean|Partial<FileDropConfig>
    fillHandle: string|boolean|Partial<FillHandleConfig>
    filter: string|boolean|Partial<FilterConfig>
    filterBar: string|boolean|Partial<FilterBarConfig>
    group: string|boolean|Partial<GroupConfig>
    groupSummary: string|boolean|Partial<GridGroupSummaryConfig>
    headerMenu: string|boolean|Partial<HeaderMenuConfig>
    mergeCells: string|boolean|Partial<MergeCellsConfig>
    pdfExport: string|boolean|Partial<GridPdfExportConfig>
    print: string|boolean|Partial<GridPrintConfig>
    quickFind: string|boolean|Partial<QuickFindConfig>
    regionResize: string|boolean|Partial<RegionResizeConfig>
    rowCopyPaste: string|boolean|Partial<RowCopyPasteConfig>
    rowExpander: string|boolean|Partial<RowExpanderConfig>
    rowReorder: string|boolean|Partial<GridRowReorderConfig>
    rowResize: string|boolean|Partial<GridRowResizeConfig>
    search: string|boolean|Partial<SearchConfig>
    sort: string|boolean|Partial<SortConfig>
    split: string|boolean|Partial<GridSplitConfig>
    stickyCells: string|boolean|Partial<StickyCellsConfig>
    stripe: string|boolean|Partial<StripeConfig>
    summary: string|boolean|Partial<GridSummaryConfig>
    tree: string|boolean|Partial<TreeConfig>
    treeGroup: string|boolean|Partial<GridTreeGroupConfig>
}

/**
 * Type with configuration options for [AssignmentGrid](https://bryntum.com/products/grid/docs/api/Gantt/widget/AssignmentGrid) class.
 */
type AssignmentGridConfig = ContainerItemConfig & {
    type: 'assignmentgrid'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-allowOver)
     */
    allowOver: boolean
    /**
     * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows: boolean
    /**
     * When the [Tree](https://bryntum.com/products/gantt/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-autoClose)
     */
    autoClose: boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide: boolean
    /**
     * Show immediately when created
     */
    autoShow: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines: boolean
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/gantt/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-columns)
     */
    columns: ColumnStore|Partial<GridColumnConfig>[]|Partial<ColumnStoreConfig>
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent: 'contextmenu'|'click'|'dblclick'
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-data)
     */
    data: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion: string
    /**
     * true to destroy the store when the grid is destroyed
     */
    destroyStore: boolean
    /**
     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#function-getState) when there is a column
     * configured without an `id`. But the recommended action is to always configure columns with an `id` when
     * using states.
     */
    disableGridColumnIdWarning: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-dismissDelay)
     */
    dismissDelay: number
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/gantt/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid
     */
    emptyText: string|Partial<DomConfig>
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-enableSticky)
     */
    enableSticky: boolean
    /**
     * Set to true to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection: boolean
    /**
     * Set to true to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys: boolean
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features: Partial<AssignmentGridFeaturesConfigType>
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-fixedRowHeight)
     */
    fixedRowHeight: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-forElement)
     */
    forElement: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector: string
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-fullRowRefresh)
     */
    fullRowRefresh: boolean
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-getHtml)
     * @param {object} context
     * @param {Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string|Promise}
     */
    getHtml: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/gantt/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-getRowHeight)
     * @param {Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight: (getRowHeight: { record: Model }) => number
    /**
     * A config [object](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-hideDelay)
     */
    hideDelay: number|boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar: boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-hideOnDelegateChange)
     */
    hideOnDelegateChange: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay: number
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#keyboard-shortcuts) for details
     */
    keyMap: Record<string, string>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-listeners)
     */
    listeners: object
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask: string|Partial<MaskConfig>|null
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/gantt/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-loadMaskDefaults)
     */
    loadMaskDefaults: Partial<MaskConfig>
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-loadMaskError)
     */
    loadMaskError: Partial<MaskConfig>|Mask|boolean
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg: string
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime: number
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-minHeight)
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * Grid monitors window resize by default.
     */
    monitorResize: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-mouseOffsetX)
     */
    mouseOffsetX: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/gantt/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY: number
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-owner)
     */
    owner: Widget
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins: Function[]
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Event model to manipulate assignments of, the task should be part of a task store.
     * Either task or [store](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-store) should be given.
     */
    projectEvent: TaskModel
    /**
     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-ref)
     */
    ref: string
    /**
     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.
     */
    resizeToFitIncludesHeader: boolean
    /**
     * A [Column](https://bryntum.com/products/gantt/docs/api/Grid/column/Column) config object for the resource column. You can pass a `renderer` which
     * gives you access to the `resource` record.
     */
    resourceColumn: Partial<ResourceAssignmentColumnConfig>
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels: Record<string, number|string>
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-rowHeight)
     */
    rowHeight: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines: boolean
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/gantt/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/gantt/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager: Partial<ScrollManagerConfig>|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/gantt/docs/api/Core/helper/util/Scroller).
     * See the [scrollerClass](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).
     */
    scrollerClass: typeof Scroller
    /**
     * Selection configuration settings, change these properties to control how selection works and what can be
     * selected.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-selectionMode)
     */
    selectionMode: GridSelectionMode
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells who's
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-showDirty)
     */
    showDirty: boolean|{
        duringEdit?: boolean
    }
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Show on hover
     */
    showOnHover: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/gantt/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-store)
     */
    store: Partial<Store|StoreConfig|AjaxStore|AjaxStoreConfig>
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-subGridConfigs)
     */
    subGridConfigs: Record<string, Partial<SubGridConfig>>
    /**
     * A [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-syncMask)
     */
    syncMask: string|Partial<MaskConfig>|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-trackMouse)
     */
    trackMouse: boolean
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration: number
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-ui)
     */
    ui: string|object
    /**
     * A config object for the units column
     */
    unitsColumn: Partial<NumberColumnConfig>
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     */
    onBeforeCancelCellEdit: ((event: { source: Grid, editorContext: Location }) => boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {(Location|Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themself will not get deleted, only visible column values).
     */
    onBeforeCellDelete: ((event: { source: Grid, gridSelection: (Location|Model)[] }) => boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/gantt/docs/api/Grid/column/Column#config-field)). This property mey be replaced to be a different [field](https://bryntum.com/products/gantt/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => boolean|void)|string
    /**
     * Fired when the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => boolean|void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => boolean|void)|string
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onBeforeColumnResize: ((event: { source: Grid, column: Column, domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy: ((event: { source: Grid, cells: Location[], data: string, isCut: boolean, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Location} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onBeforeFillHandleDragStart: ((event: { cell: Location, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste: ((event: { source: Grid, clipboardData: string, targetCell: Location, entityName: string }) => Promise<boolean|void>)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport: ((event: { config: object }) => boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row about to be rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onBeforeRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup: ((event: { groupRecord: Model, collapse: boolean, domEvent: Event }) => boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit: ((event: { source: Grid, editorContext: Location, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     */
    onCellMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered cell
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the cell that the mouse left
     * @param {Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been collapsed.
     */
    onCollapseNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance.
     * @param {Column} event.column The dragged column.
     * @param {Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => boolean|void)|string
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResize: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResizeStart: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     */
    onContextMenuItem: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Widget} event.source The owning widget
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy: ((event: { source: Grid, cells: Location[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#event-dataChange)
     * @param {object} event Event object
     * @param {Grid} event.source Owning grid
     * @param {Store} event.store The originating store
     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'updatemultiple'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Partial<LocationConfig>[]|Location[]} event.selectedCells The cells that is currently being dragged over
     * @param {Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Partial<LocationConfig>[]|Location[], selectedRecords: Model[] }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Model} event.record The record which has been expanded.
     */
    onExpandNode: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleBeforeDragFinalize: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDrag: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    onFillHandleDragAbort: (() => void)|string
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Location} event.from The from cell
     * @param {Location} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragEnd: ((event: { from: Location, to: Location, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Location} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragStart: ((event: { cell: Location, domEvent: MouseEvent }) => boolean|void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid} event.grid Target grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {MouseEvent} event.event
     */
    onGridRowAbort: ((event: { source: DragHelper, context: object, event: MouseEvent }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowBeforeDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean|void>)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {Model[]} event.context.records The dragged row records
     * @param {MouseEvent|TouchEvent} event.event
     */
    onGridRowDragStart: ((event: { source: DragHelper, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {DragHelper} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Model} event.context.record [DEPRECATED] The dragged row record
     * @param {Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop: ((event: { source: DragHelper, context: { valid: boolean, insertBefore: Model, parent: Model, record: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Column} event.column The column clicked on.
     */
    onHeaderClick: ((event: { domEvent: Event, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/gantt/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuBeforeShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     */
    onHeaderMenuItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {Record<string, Partial<MenuItemConfig>>} event.items Menu item configs
     * @param {Column} event.column Column
     */
    onHeaderMenuShow: ((event: { source: Grid, menu: Menu, items: Record<string, Partial<MenuItemConfig>>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid} event.source The grid
     * @param {Menu} event.menu The menu
     * @param {MenuItem} event.item Selected menu item
     * @param {Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Location} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: Location, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {Row} event.row The row that has been rendered.
     * @param {Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid} event.source This grid.
     */
    onRenderRows: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered row
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal'|'vertical'|'both'} event.options.direction The direction of the split
     * @param {Column} event.options.atColumn The column to split at
     * @param {Model} event.options.atRecord The record to split at
     */
    onSplit: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid} event.source The Grid instance.
     * @param {SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterExpandClick: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => boolean|void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid} event.source Owner grid
     * @param {Location} event.editorContext Editing context
     * @param {Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Column} event.editorContext.column Target column
     * @param {Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid} event.source The firing Grid instance
     * @param {SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Group expanded or collapsed
     * @param {object} event Event object
     * @param {Model} event.groupRecord Group record
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    onToggleGroup: ((event: { groupRecord: Model, collapse: boolean, allRecords?: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit: (() => void)|string
}

/**
 * This grid visualizes and lets users edit assignments of an [event](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#config-projectEvent). Used by the
 * [AssignmentField](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentField). This grid shows one column showing the resource name, and one showing
 * the units assigned. You can add additional columns by providing a [columns](https://bryntum.com/products/gantt/docs/api/Grid/view/Grid#config-columns) array in your grid config.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid)
 */
export class AssignmentGrid extends Grid {
    /**
     * An object containing Features
     */
    features: AssignmentGridFeaturesType
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records to be deselected in this operation.
     * @param {Model[]} event.selected The records to be selected in this operation.
     * @param {Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Location[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Location[]} event.selectedCells The cells to be selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered cell
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the cell that the mouse left
     * @param {Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid} event.grid The grid instance
     * @param {Model} event.record The record representing the row
     * @param {Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid} event.source
     * @param {Partial<LocationConfig>[]|Location[]} event.selectedCells The cells that is currently being dragged over
     * @param {Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: Partial<LocationConfig>[]|Location[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/AssignmentGrid#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Column} event.column The column clicked on.
     */
    onHeaderClick: ((event: { domEvent: Event, column: Column }) => boolean|void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver: ((event: { sourceThe: Tooltip, event: Event }) => boolean|void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the hovered row
     * @param {Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid} event.source The grid instance
     * @param {Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select'|'deselect'} event.action `'select'`/`'deselect'`
     * @param {'row'|'cell'} event.mode `'row'`/`'cell'`
     * @param {Grid} event.source
     * @param {Model[]} event.deselected The records deselected in this operation.
     * @param {Model[]} event.selected The records selected in this operation.
     * @param {Model[]} event.selection The records in the new selection.
     * @param {Location[]} event.deselectedCells The cells deselected in this operation.
     * @param {Location[]} event.selectedCells The cells selected in this operation.
     * @param {Location[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: Location[], selectedCells: Location[], cellSelection: Location[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/gantt/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<AssignmentGridConfig>} config
     */
    constructor(config?: Partial<AssignmentGridConfig>);
}

/**
 * Type with configuration options for [CalendarPicker](https://bryntum.com/products/grid/docs/api/Gantt/widget/CalendarPicker) class.
 */
type CalendarPickerConfig = ContainerItemConfig & {
    type: 'calendarpicker'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/gantt/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/gantt/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * `true` to clear value typed to a multiselect combo when an item is selected. `true` by default as
     * of version 6.0
     */
    clearTextOnSelection: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/gantt/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the [filterParamName](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-filterParamName) to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-filterOperator)
     */
    filterOperator: CollectionCompareOperator
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/gantt/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/gantt/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: Record<string, string>
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc.).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-name)
     */
    name: string
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/gantt/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/gantt/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Combo box preconfigured with possible calendar values.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker)
 */
export class CalendarPicker extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/CalendarPicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Replaces the field store records with the provided ones.
     * @param {CalendarModel[]} calendars New contents for the widget store.
     */
    refreshCalendars(calendars: CalendarModel[]): void;
}

/**
 * Type with configuration options for [DependencyField](https://bryntum.com/products/grid/docs/api/Gantt/widget/DependencyField) class.
 */
type DependencyFieldConfig = InputFieldConfig & ContainerItemConfig & {
    type: 'dependencyfield'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, PickerField's picker is transient, and will [hidePicker](https://bryntum.com/products/gantt/docs/api/Core/widget/PickerField#function-hidePicker) when the user clicks or
     * taps outside or when focus moves outside picker.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-autoClose)
     * @deprecated This will be removed in 6.0
     */
    autoClose: boolean
    /**
     * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
     */
    autoComplete: string
    /**
     * Configure as `true` to have the picker expand upon focus enter.
     */
    autoExpand: boolean
    /**
     * Specify `true` to auto select field contents on focus
     */
    autoSelect: boolean
    /**
     * Initial text to show in badge.
     */
    badge: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
     */
    caseSensitive: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * A config object to configure the [ChipView](https://bryntum.com/products/gantt/docs/api/Core/widget/ChipView) to display the
     * selected value set when [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-chipView)
     */
    chipView: Partial<ChipViewConfig>
    /**
     * `true` to clear value typed to a multiselect combo when picker is collapsed
     */
    clearTextOnPickerHide: boolean
    /**
     * `true` to clear value typed to a multiselect combo when an item is selected. `true` by default as
     * of version 6.0
     */
    clearTextOnSelection: boolean
    /**
     * Show a trigger to clear field, and allow `SHIFT+BACKSPACE` key to clear field if this field is
     * not [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-readOnly). The trigger is available in the [triggers](#Core/widget/Field#property-triggers) object
     * under the name `clear`. May also be an object which configures the `clear`
     * [trigger](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers).
     */
    clearable: boolean|Partial<FieldTriggerConfig>
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-cls)
     */
    cls: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The config controls how the value of nested items are handled when a parent container gets or sets its
     * [values](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-containValues)
     * @param {Field} field Field instance
     * @returns {boolean}
     */
    containValues: boolean|string|((field: Field) => boolean)
    /**
     * The configuration for additional items associated to this field. This is typically used to add contextual
     * fields related to a [checkbox](https://bryntum.com/products/gantt/docs/api/Core/widget/Checkbox) or [radio button](#Core/widget/Radio). See
     * these classes for examples of nested fields.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-container)
     */
    container: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Partial<FieldContainerConfig>|FieldContainer
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * If configured as `true`, this means that when an unmatched string is typed into the
     * combo's input field, and `ENTER`, or the [multiValueSeparator](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiValueSeparator) is typed,
     * a new record will be created using the typed string as the [displayField](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-displayField).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-createOnUnmatched)
     * @param {string} name Record name
     * @param {Combo} combo Combo instance
     * @returns {Model} New record
     */
    createOnUnmatched: ((name: string, combo: Combo) => Model)|string|boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * Delimiter between dependency ids in the field
     */
    delimiter: string
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked
     * tasks. Defaults to [Gantt#dependencyIdField](https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-dependencyIdField)
     */
    dependencyIdField: string
    /**
     * The dependency store
     */
    dependencyStore: DependencyStore
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Field used for item text when populating from store
     */
    displayField: string
    /**
     * Template function that can be used to customize the displayed value
     * @param {Model} record The record to provide a textual value for
     * @param {Combo} combo A reference to this Combo
     * @returns {string|void}
     */
    displayValueRenderer: (record: Model, combo: Combo) => string|void
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * User can edit text in text field (otherwise only pick from attached picker)
     */
    editable: boolean
    /**
     * Text to display in the drop down when there are no items in the underlying store
     */
    emptyText: string
    /**
     * A function which creates an array of values for the [filterParamName](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-filterParamName) to pass
     * any filters to the server upon load.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-encodeFilterParams)
     * @param {<Object>} filters filters
     * @returns {<Object>} array of values
     */
    encodeFilterParams: (filters: object[]) => object[]
    /**
     * If `false`, filtering will be triggered once you exceed [minChars](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-minChars). To filter only when
     * hitting Enter key, set this to `true`;
     */
    filterOnEnter: boolean
    /**
     * The name of an operator type as implemented in [operator](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-operator)
     * to use when filtering the dropdown list based upon the typed value.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-filterOperator)
     */
    filterOperator: CollectionCompareOperator
    /**
     * If the dropdown is to be populated with a filtered query to a remote server, specify the
     * name of the parameter to pass the typed string here. By default, the string is simply sent
     * as the value of the parameter. For special encoding, configure the combo with [encodeFilterParams](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-encodeFilterParams)
     */
    filterParamName: string
    /**
     * When [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`, you may configure `filterSelected` as
     * `true` to hide items in the dropdown when they are added to the selection.
     * It will appear as if the requested item has "moved" into the field's
     * [ChipView](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-chipView).
     */
    filterSelected: boolean
    /**
     * Set to `false` to hide the filter field
     */
    filterable: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * By default, the picker is hidden on selection in single select mode, and
     * remains to allow more selections when [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`.
     * Setting this to a `Boolean` value can override that default.
     */
    hidePickerOnSelect: boolean
    /**
     * Configure as `true` to hide the expand trigger. This is automatically set to `true` if
     * remote filtering is enabled by setting the [filterParamName](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-filterParamName) config.
     */
    hideTrigger: boolean
    /**
     * Specify `false` to prevent field from being highlighted when on external value changes
     */
    highlightExternalChange: boolean
    /**
     * An optional string to display inside the input field as an overlay. This can be useful for displaying
     * a field's units.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-hint)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hint: string|((data: { source: Field, value: any }) => string)
    /**
     * This config is similar to [hint](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-hint) except that this config is used to display HTML content.
     * Since this can allow malicious content to be executed, be sure not to include user-entered data or to
     * encode such data (see [encodeHtml](https://bryntum.com/products/gantt/docs/api/Core/helper/StringHelper#function-encodeHtml-static)).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-hintHtml)
     * @param {object} data A data object
     * @param {Field} data.source A reference to the field instance
     * @param {*} data.value The current value of the field
     * @returns {string}
     */
    hintHtml: string|((data: { source: Field, value: any }) => string)
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Set this config to `true` to always display items horizontally along with this field. This assigns an
     * [hbox](https://bryntum.com/products/gantt/docs/api/Core/widget/layout/Box) as the [layout](#Core/widget/Container#config-layout) to the
     * [container](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-container).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-inline)
     */
    inline: boolean
    /**
     * Configure this as `true` to render the dropdown list as a permanently visible list
     * in the document flow immediately below the input area instead of as a popup.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-inlinePicker)
     */
    inlinePicker: boolean
    /**
     * Text alignment for the input field.
     */
    inputAlign: string
    /**
     * Sets custom attributes of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes)
     */
    inputAttributes: Record<string, string>
    /**
     * Sets the `type` attribute of the underlying input element (password, hidden, date, color, etc.).
     */
    inputType: string
    /**
     * The width to apply to the `&lt;input&gt;` element. If a number is specified, `px` will be used.
     */
    inputWidth: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * Rows to display in the dropdown (list items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-items)
     */
    items: object[]|string[]|object
    /**
     * The delay in milliseconds to wait after the last keystroke before triggering a change event.
     * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
     * immediate feedback, change will still be triggered on blur).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-keyStrokeChangeDelay)
     */
    keyStrokeChangeDelay: number
    /**
     * The delay in milliseconds to wait after the last keystroke before filtering the list.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-keyStrokeFilterDelay)
     */
    keyStrokeFilterDelay: number
    /**
     * Label, prepended to field
     */
    label: string
    /**
     * CSS class name or class names to add to any configured [label](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Labelable#config-label)
     */
    labelCls: string|object
    /**
     * Label position, either 'before' the field or 'above' the field
     */
    labelPosition: 'before'|'above'
    /**
     * The width to apply to the `&lt;label&gt;` element. If a number is specified, `px` will be used.
     */
    labelWidth: string|number
    /**
     * The labels to add either before or after the input field.
     * Each label may have the following properties:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-labels)
     */
    labels: object[]
    /**
     * CSS class to add to picker
     */
    listCls: string
    /**
     * Template string used to render the list items in the dropdown list
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-listItemTpl)
     * @param {Model} record The record representing the item being rendered
     * @returns {string|void}
     */
    listItemTpl: (record: Model) => string|void
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The max number of characters for the input field
     */
    maxLength: number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * The minimum string length to trigger the filtering, only relevant when [editable](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-editable) is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-minChars)
     */
    minChars: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The min number of characters for the input field
     */
    minLength: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * Configure as `true` to allow selection of multiple values from the dropdown list.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-multiSelect)
     */
    multiSelect: boolean
    /**
     * A key value which, when typed in a [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) Combo, selects the
     * currently active item in the picker, and clears the input field ready for another
     * match to be typed.
     */
    multiValueSeparator: string
    /**
     * Name of the field which is used as a key to get/set values from/to the field.
     * Used prior to [ref](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-ref) and [id](#Core/widget/Widget#config-id) in
     * [Container.values](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-values).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-name)
     */
    name: string
    /**
     * The other task's relationship with this field's contextual task.
     * This will be `'from'` if we are editing predecessors, and `'to'` if
     * we are editing successors.
     */
    otherSide: 'from'|'to'
    /**
     * This field's contextual task's relationship with the other task.
     * This will be `'to'` if we are editing predecessors, and `'from'` if
     * we are editing successors.
     */
    ourSide: 'from'|'to'
    /**
     * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
     * to the input field so that the pointer pierces the [pickerAlignElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-pickerAlignElement)
     */
    overlayAnchor: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-owner)
     */
    owner: Widget
    /**
     * Configuration object for the [picker](https://bryntum.com/products/gantt/docs/api/Core/widget/List) on initialization. Returns the
     * [picker](https://bryntum.com/products/gantt/docs/api/Core/widget/List) instance at runtime.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-picker)
     */
    picker: Partial<ListConfig>|List
    /**
     * The name of the element property to which the picker should size and align itself.
     */
    pickerAlignElement: string
    /**
     * Width of picker, defaults to this combo's [pickerAlignElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-pickerAlignElement) width
     */
    pickerWidth: number
    /**
     * Text to display in empty field.
     */
    placeholder: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Optionally a [Filter](https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter) config object which the combo should use for
     * filtering using the typed value.
     * This may use a `filterBy` property to test its `value` against any field in the passed record.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-primaryFilter)
     */
    primaryFilter: Partial<CollectionFilterConfig>
    /**
     * Makes the field unmodifiable by user action. The input area is not editable, and triggers
     * are unresponsive.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-readOnly)
     */
    readOnly: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
     */
    required: boolean
    /**
     * If this field is not [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-readOnly), then setting this option means that pressing
     * the `ESCAPE` key after editing the field will revert the field to the value it had when
     * the user focused the field. If the field is *not* changed from when focused, the [clearable](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated.
     */
    revertOnEscape: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The sorters defining how to sort tasks in the drop down list, defaults to sorting by `name` field
     * ascending. See [StoreSort](https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreSort) for more information.
     */
    sorters: Sorter[]|string[]
    /**
     * Sets the native `spellcheck` property of the underlying input element. For more information, please refer to
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck)
     */
    spellCheck: boolean
    /**
     * Store used to populate items. Also accepts a Store config object
     */
    store: Store|Partial<StoreConfig>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tab index of the input field
     */
    tabIndex: number
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * How to query the store upon click of the expand trigger. Specify one of these values:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-triggerAction)
     */
    triggerAction: 'all'|'last'|null
    /**
     * The triggers to add either before or after the input field. Each property name is the reference by which
     * an instantiated Trigger Widget may be retrieved from the live `[triggers](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-triggers)
     */
    triggers: Record<string, FieldTriggerConfig>
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-ui)
     */
    ui: string|object
    /**
     * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
     */
    validateFilter: boolean
    /**
     * Set to `false` to not highlight a field as invalid while typing, to instead show it on ENTER key press
     * or similar.
     */
    validateOnInput: boolean
    /**
     * The initial value of this Combo box. In single select mode (default) it's a simple string value, for
     * [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) mode, it should be an array of record ids.
     */
    value: string|number|string[]|number[]
    /**
     * Field used for item value when populating from store. Setting this to `null` will
     * yield the selected record as the Combo's [value](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#property-value).
     */
    valueField: string|null
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#config-y)
     */
    y: number
    /**
     * The default action was performed (an item in the list was selected)
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {any} event.value The [value](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-valueField) of the selected record
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onAction: ((event: { source: Combo, value: any, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when this field's value changes.
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     * @param {string|number|boolean|any} event.value This field's value
     * @param {string|number|boolean|any} event.oldValue This field's previous value
     * @param {boolean} event.valid True if this field is in a valid state
     * @param {Event} event.event The triggering DOM event if any
     * @param {boolean} event.userAction Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {boolean} event.checked
     */
    onChange: ((event: { source: Field|any, value: string|number|boolean|any, oldValue: string|number|boolean|any, valid: boolean, event: Event, userAction: boolean, checked: boolean }) => void)|string
    /**
     * Fired when this field is [cleared](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#function-clear).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#event-clear)
     * @param {object} event Event object
     * @param {Field|any} event.source This Field
     */
    onClear: ((event: { source: Field|any }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * User typed into the field. Please note that the value attached to this event is the raw input field value and
     * not the combos value
     * @param {object} event Event object
     * @param {Combo} event.source The combo.
     * @param {string} event.value Raw input value
     * @param {Event} event.event The triggering DOM event if any.
     */
    onInput: ((event: { source: Combo, value: string, event: Event }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * An item in the list was selected
     * @param {object} event Event object
     * @param {Combo} event.source The combo
     * @param {Model} event.record Selected record
     * @param {Model[]} event.records Selected records as an array if [multiSelect](https://bryntum.com/products/gantt/docs/api/Core/widget/Combo#config-multiSelect) is `true`
     * @param {boolean} event.userAction `true` if the value change is due to user interaction
     */
    onSelect: ((event: { source: Combo, record: Model, records: Model[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * User clicked one of this field's [triggers](https://bryntum.com/products/gantt/docs/api/Core/widget/Field#property-triggers)
     * @param {object} event Event object
     * @param {Field|any} event.source This field
     * @param {Widget} event.trigger The trigger activated by click or touch tap.
     */
    onTrigger: ((event: { source: Field|any, trigger: Widget }) => void)|string
}

/**
 * Chooses dependencies, connector sides and lag time for dependencies of a Task.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField)
 */
export class DependencyField extends Combo {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/DependencyField#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {Partial<DependencyFieldConfig>} config
     */
    constructor(config?: Partial<DependencyFieldConfig>);
}

/**
 * Type with configuration options for [TaskEditor](https://bryntum.com/products/grid/docs/api/Gantt/widget/TaskEditor) class.
 */
type TaskEditorConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-adopt)
     */
    adopt: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-align)
     */
    align: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-element).
     */
    appendTo: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-ariaDescription)
     */
    ariaDescription: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-ariaLabel)
     */
    ariaLabel: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-ariaLive)
     */
    ariaLive: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-autoClose)
     */
    autoClose: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-bbar)
     */
    bbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-bodyCls)
     */
    bodyCls: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-bubbleEvents)
     */
    bubbleEvents: object
    /**
     * A message to be shown when Engine is performing task scheduling. Localizable text is 'L{calculateMask}'. Disabled by default.
     */
    calculateMask: string|null
    /**
     * A delay before the [mask](https://bryntum.com/products/gantt/docs/api/SchedulerPro/widget/TaskEditorBase#config-calculateMask) becomes visible. This config is needed to avoid UI blinking when calculating is relatively fast.
     * Note, the mask is applied immediately and blocks the content anyway. However if the delay is set, it will be transparent. If `null`, the mask is visible immediately.
     */
    calculateMaskDelay: number|null
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-callOnFunctions)
     */
    callOnFunctions: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered: boolean
    /**
     * Show a tool in the header to close this Popup, and allow `ESC` close it.
     * The tool is available in the [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-closeAction)
     */
    closeAction: 'hide'|'destroy'
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-cls)
     */
    cls: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-collapsible)
     */
    collapsible: boolean|Partial<PanelCollapserConfig>|Partial<PanelCollapserOverlayConfig>
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-contentElementCls)
     */
    contentElementCls: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty: string
    /**
     * A [query](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-defaultFocus)
     * @param {Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus: (widget: Widget) => boolean
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults: Partial<ContainerItemConfig>
    /**
     * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to Gantt `dependencyIdField`
     */
    dependencyIdField: string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     */
    disabled: boolean
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-dock)
     */
    dock: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-draggable)
     */
    draggable: boolean|{
        handleSelector?: string
    }
    /**
     * The decimal precision to use for Duration field / columns, normally provided by the owning Scheduler´s [durationDisplayPrecision](https://bryntum.com/products/gantt/docs/api/SchedulerPro/view/SchedulerPro#config-durationDisplayPrecision)
     */
    durationDisplayPrecision: number
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-footer)
     */
    footer: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-header)
     */
    header: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-hideAnimation)
     */
    hideAnimation: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-hideWhenEmpty)
     */
    hideWhenEmpty: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time)
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-html)
     * @param {Widget} widget The calling Widget
     * @returns {string}
     */
    html: string|((widget: Widget) => string)
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-items)
     */
    items: Record<string, Partial<ContainerItemConfig>|Partial<MenuItemConfig>|boolean|null>|(Partial<ContainerItemConfig>|Partial<MenuItemConfig>|Widget)[]
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-layout)
     */
    layout: string|Partial<ContainerLayoutConfig>
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-layoutStyle)
     */
    layoutStyle: object
    /**
     * An array of [child item](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-lazyItems)
     */
    lazyItems: Record<string, Partial<ContainerItemConfig>>|Partial<ContainerItemConfig>[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-listeners)
     */
    listeners: object
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-localeClass)
     */
    localeClass: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-localizableProperties)
     */
    localizableProperties: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults: Partial<MaskConfig>
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/gantt/docs/api/Core/widget/Mask) config object.
     */
    masked: boolean|string|Partial<MaskConfig>
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-maximizeOnMobile)
     */
    maximizeOnMobile: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-modal)
     */
    modal: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-monitorResize)
     */
    monitorResize: boolean
    /**
     * An object containing named config objects which may be referenced by name in any [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items)
     * object. For example, a specialized [Menu](https://bryntum.com/products/gantt/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-namedItems)
     */
    namedItems: Record<string, Partial<ContainerItemConfig>>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is it is one
     * of the [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-items) of a Container), this config
     * will be ignored. In this case the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-owner)
     */
    owner: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-positioned)
     */
    positioned: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-readOnly)
     */
    readOnly: boolean
    /**
     * [Record](https://bryntum.com/products/gantt/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-record)
     */
    record: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-ref)
     */
    ref: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-ripple)
     */
    ripple: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement: ShadowRoot|HTMLElement
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-scrollable)
     */
    scrollable: boolean|Partial<ScrollerConfig>|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-showAnimation)
     */
    showAnimation: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
     */
    showOnClick: boolean
    /**
     * Set to false to not show the tooltip when this widget is [disabled](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-stateId)
     */
    stateId: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/gantt/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-stateProvider)
     */
    stateProvider: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-stateful)
     */
    stateful: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/gantt/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-statefulEvents)
     */
    statefulEvents: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/gantt/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-strips)
     */
    strips: Record<string, Partial<ContainerItemConfig>>
    /**
     * Custom style spec to add to element
     */
    style: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/gantt/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/gantt/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-tab)
     */
    tab: boolean|Partial<TabConfig>
    /**
     * The tag name of this Widget's root element
     */
    tag: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/gantt/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-tbar)
     */
    tbar: (Partial<ContainerItemConfig>|string)[]|Partial<ToolbarConfig>|Partial<PagingToolbarConfig>
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-textAlign)
     */
    textAlign: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-textContent)
     */
    textContent: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-title)
     */
    title: string
    /**
     * The [tools](https://bryntum.com/products/gantt/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/gantt/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-tools)
     */
    tools: Record<string, Partial<ToolConfig>>
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-tooltip)
     */
    tooltip: string|Partial<TooltipConfig>
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-ui)
     */
    ui: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/gantt/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-x)
     */
    x: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#config-y)
     */
    y: number
    /**
     * Fired when the [close](https://bryntum.com/products/gantt/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Popup} event.source This Popup
     */
    onBeforeClose: ((event: { source: Popup }) => boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget} event.source The widget being hidden.
     */
    onBeforeHide: ((event: { source: Widget }) => boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Container} event.source The container
     * @param {Model} event.record The record
     */
    onBeforeSetRecord: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Widget|any} event.source The widget being shown
     */
    onBeforeShow: ((event: { source: Widget|any }) => Promise<boolean|void>)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onCollapse: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Panel} event.source This Panel.
     */
    onExpand: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Widget} event.fromWidget The widget which lost focus.
     * @param {Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onHide: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#event-paint)
     * @param {object} event Event object
     * @param {Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/gantt/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Widget} event.source The widget
     */
    onShow: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/gantt/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Tool} event.source This Panel.
     * @param {Tool} event.tool The tool which is being clicked.
     */
    onToolClick: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Provides a UI to edit tasks in a popup dialog. It is implemented as a Tab Panel with several preconfigured built-in
 * tabs. Although the default configuration may be adequate in many cases, the Task Editor is easily configurable.
 * ...
 * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor)
 */
export class TaskEditor extends GanttTaskEditor {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/gantt/docs/api/Gantt/widget/TaskEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}
